.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "MPI4PY" "3" "Jul 28, 2024" "4.0" "MPI for Python"
.SH NAME
mpi4py \- MPI for Python
.INDENT 0.0
.TP
.B Author
Lisandro Dalcin
.TP
.B Contact
\X'tty: link mailto:dalcinl@gmail.com'\fI\%dalcinl@gmail.com\fP\X'tty: link'
.TP
.B Date
Jul 28, 2024
.UNINDENT
.SS Abstract
.sp
\fIMPI for Python\fP provides Python bindings for the \fIMessage Passing
Interface\fP (MPI) standard, allowing Python applications to exploit
multiple processors on workstations, clusters and supercomputers.
.sp
This package builds on the MPI specification and provides an object
oriented interface resembling the MPI\-2 C++ bindings. It supports
point\-to\-point (sends, receives) and collective (broadcasts,
scatters, gathers) communication of any \fIpicklable\fP Python object,
as well as efficient communication of Python objects exposing the
Python buffer interface (e.g. NumPy arrays and builtin
bytes/array/memoryview objects).
.SH INTRODUCTION
.sp
Over the last years, high performance computing has become an
affordable resource to many more researchers in the scientific
community than ever before. The conjunction of quality open source
software and commodity hardware strongly influenced the now widespread
popularity of \X'tty: link https://www.beowulf.org/'\fI\%Beowulf\fP\X'tty: link' class clusters and cluster of workstations.
.sp
Among many parallel computational models, message\-passing has proven
to be an effective one.  This paradigm is specially suited for (but
not limited to) distributed memory architectures and is used in
today\(aqs most demanding scientific and engineering application related
to modeling, simulation, design, and signal processing.  However,
portable message\-passing parallel programming used to be a nightmare
in the past because of the many incompatible options developers were
faced to.  Fortunately, this situation definitely changed after the
MPI Forum released its standard specification.
.sp
High performance computing is traditionally associated with software
development using compiled languages. However, in typical applications
programs, only a small part of the code is time\-critical enough to
require the efficiency of compiled languages. The rest of the code is
generally related to memory management, error handling, input/output,
and user interaction, and those are usually the most error prone and
time\-consuming lines of code to write and debug in the whole
development process.  Interpreted high\-level languages can be really
advantageous for this kind of tasks.
.sp
For implementing general\-purpose numerical computations, MATLAB [1]
is the dominant interpreted programming language. In the open source
side, Octave and Scilab are well known, freely distributed software
packages providing compatibility with the MATLAB language. In this
work, we present MPI for Python, a new package enabling applications
to exploit multiple processors using standard MPI \(dqlook and feel\(dq in
Python scripts.
.IP [1] 5
MATLAB is a registered trademark of The MathWorks, Inc.
.SS What is MPI?
.sp
\X'tty: link https://www.mpi-forum.org/'\fI\%MPI\fP\X'tty: link', \fI\%[mpi\-using]\fP \fI\%[mpi\-ref]\fP the \fIMessage Passing Interface\fP, is a
standardized and portable message\-passing system designed to function
on a wide variety of parallel computers. The standard defines the
syntax and semantics of library routines and allows users to write
portable programs in the main scientific programming languages
(Fortran, C, or C++).
.sp
Since its release, the MPI specification \fI\%[mpi\-std1]\fP \fI\%[mpi\-std2]\fP has
become the leading standard for message\-passing libraries for parallel
computers.  Implementations are available from vendors of
high\-performance computers and from well known open source projects
like \X'tty: link https://www.mpich.org/'\fI\%MPICH\fP\X'tty: link' \fI\%[mpi\-mpich]\fP and \X'tty: link https://www.open-mpi.org/'\fI\%Open MPI\fP\X'tty: link' \fI\%[mpi\-openmpi]\fP\&.
.SS What is Python?
.sp
\X'tty: link https://www.python.org/'\fI\%Python\fP\X'tty: link' is a modern, easy to learn, powerful programming language. It
has efficient high\-level data structures and a simple but effective
approach to object\-oriented programming with dynamic typing and
dynamic binding. It supports modules and packages, which encourages
program modularity and code reuse. Python\(aqs elegant syntax, together
with its interpreted nature, make it an ideal language for scripting
and rapid application development in many areas on most platforms.
.sp
The Python interpreter and the extensive standard library are
available in source or binary form without charge for all major
platforms, and can be freely distributed. It is easily extended with
new functions and data types implemented in C or C++. Python is also
suitable as an extension language for customizable applications.
.sp
Python is an ideal candidate for writing the higher\-level parts of
large\-scale scientific applications \fI\%[Hinsen97]\fP and driving
simulations in parallel architectures \fI\%[Beazley97]\fP like clusters of
PC\(aqs or SMP\(aqs. Python codes are quickly developed, easily maintained,
and can achieve a high degree of integration with other libraries
written in compiled languages.
.SS Related Projects
.sp
As this work started and evolved, some ideas were borrowed from well
known MPI and Python related open source projects from the Internet.
.INDENT 0.0
.IP \(bu 2
\X'tty: link https://web.archive.org/web/20100614170656/http://www.osl.iu.edu/research/oompi/overview.php'\fI\%OOMPI\fP\X'tty: link'
.INDENT 2.0
.IP \(bu 2
It has no relation with Python, but is an excellent object
oriented approach to MPI.
.IP \(bu 2
It is a C++ class library specification layered on top of the C
bindings that encapsulates MPI into a functional class hierarchy.
.IP \(bu 2
It provides a flexible and intuitive interface by adding some
abstractions, like \fIPorts\fP and \fIMessages\fP, which enrich and
simplify the syntax.
.UNINDENT
.IP \(bu 2
\X'tty: link https://github.com/daleroberts/pypar'\fI\%Pypar\fP\X'tty: link'
.INDENT 2.0
.IP \(bu 2
Its interface is rather minimal. There is no support for
communicators or process topologies.
.IP \(bu 2
It does not require the Python interpreter to be modified or
recompiled, but does not permit interactive parallel runs.
.IP \(bu 2
General (\fIpicklable\fP) Python objects of any type can be
communicated. There is good support for numeric arrays,
practically full MPI bandwidth can be achieved.
.UNINDENT
.IP \(bu 2
\X'tty: link https://sourceforge.net/projects/pympi/'\fI\%pyMPI\fP\X'tty: link'
.INDENT 2.0
.IP \(bu 2
It rebuilds the Python interpreter providing a built\-in module
for message passing. It does permit interactive parallel runs,
which are useful for learning and debugging.
.IP \(bu 2
It provides an interface suitable for basic parallel programming.
There is not full support for defining new communicators or process
topologies.
.IP \(bu 2
General (picklable) Python objects can be messaged between
processors. There is not support for numeric arrays.
.UNINDENT
.IP \(bu 2
\X'tty: link http://dirac.cnrs-orleans.fr/ScientificPython.html'\fI\%Scientific Python\fP\X'tty: link'
.INDENT 2.0
.IP \(bu 2
It provides a collection of Python modules that are
useful for scientific computing.
.IP \(bu 2
There is an interface to MPI and BSP (\fIBulk Synchronous Parallel
programming\fP).
.IP \(bu 2
The interface is simple but incomplete and does not resemble
the MPI specification. There is support for numeric arrays.
.UNINDENT
.UNINDENT
.sp
Additionally, we would like to mention some available tools for
scientific computing and software development with Python.
.INDENT 0.0
.IP \(bu 2
\X'tty: link https://numpy.org/'\fI\%NumPy\fP\X'tty: link' is a package that provides array manipulation and
computational capabilities similar to those found in IDL, MATLAB, or
Octave. Using NumPy, it is possible to write many efficient
numerical data processing applications directly in Python without
using any C, C++ or Fortran code.
.IP \(bu 2
\X'tty: link https://scipy.org/'\fI\%SciPy\fP\X'tty: link' is an open source library of scientific tools for Python,
gathering a variety of high level science and engineering modules
together as a single package. It includes modules for graphics and
plotting, optimization, integration, special functions, signal and
image processing, genetic algorithms, ODE solvers, and others.
.IP \(bu 2
\X'tty: link https://cython.org/'\fI\%Cython\fP\X'tty: link' is a language that makes writing C extensions for the
Python language as easy as Python itself. The Cython language is
very close to the Python language, but Cython additionally supports
calling C functions and declaring C types on variables and class
attributes. This allows the compiler to generate very efficient C
code from Cython code. This makes Cython the ideal language for
wrapping for external C libraries, and for fast C modules that speed
up the execution of Python code.
.IP \(bu 2
\X'tty: link https://www.swig.org/'\fI\%SWIG\fP\X'tty: link' is a software development tool that connects programs
written in C and C++ with a variety of high\-level programming
languages like Perl, Tcl/Tk, Ruby and Python. Issuing header files
to SWIG is the simplest approach to interfacing C/C++ libraries from
a Python module.
.UNINDENT
.IP [mpi-std1] 5
MPI Forum. MPI: A Message Passing Interface Standard.
International Journal of Supercomputer Applications, volume 8,
number 3\-4, pages 159\-416, 1994.
.IP [mpi-std2] 5
MPI Forum. MPI: A Message Passing Interface Standard.
High Performance Computing Applications, volume 12, number 1\-2,
pages 1\-299, 1998.
.IP [mpi-using] 5
William Gropp, Ewing Lusk, and Anthony Skjellum.  Using
MPI: portable parallel programming with the message\-passing
interface.  MIT Press, 1994.
.IP [mpi-ref] 5
Mark Snir, Steve Otto, Steven Huss\-Lederman, David
Walker, and Jack Dongarra.  MPI \- The Complete Reference, volume 1,
The MPI Core.  MIT Press, 2nd. edition, 1998.
.IP [mpi-mpich] 5
W. Gropp, E. Lusk, N. Doss, and A. Skjellum.  A
high\-performance, portable implementation of the MPI message
passing interface standard.  Parallel Computing, 22(6):789\-828,
September 1996.
.IP [mpi-openmpi] 5
Edgar Gabriel, Graham E. Fagg, George Bosilca, Thara
Angskun, Jack J. Dongarra, Jeffrey M. Squyres, Vishal Sahay,
Prabhanjan Kambadur, Brian Barrett, Andrew Lumsdaine, Ralph
H. Castain, David J. Daniel, Richard L. Graham, and Timothy
S. Woodall. Open MPI: Goals, Concept, and Design of a Next
Generation MPI Implementation. In Proceedings, 11th European
PVM/MPI Users\(aq Group Meeting, Budapest, Hungary, September 2004.
.IP [Hinsen97] 5
Konrad Hinsen.  The Molecular Modelling Toolkit: a case
study of a large scientific application in Python.  In Proceedings
of the 6th International Python Conference, pages 29\-35, San Jose,
Ca., October 1997.
.IP [Beazley97] 5
David M. Beazley and Peter S. Lomdahl.  Feeding a
large\-scale physics application to Python.  In Proceedings of the
6th International Python Conference, pages 21\-29, San Jose, Ca.,
October 1997.
.SH OVERVIEW
.sp
MPI for Python provides an object oriented approach to message passing
which grounds on the standard MPI\-2 C++ bindings. The interface was
designed with focus in translating MPI syntax and semantics of
standard MPI\-2 bindings for C++ to Python. Any user of the standard
C/C++ MPI bindings should be able to use this module without need of
learning a new interface.
.SS Communicating Python Objects and Array Data
.sp
The Python standard library supports different mechanisms for data
persistence. Many of them rely on disk storage, but \fIpickling\fP and
\fImarshaling\fP can also work with memory buffers.
.sp
The \X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link' modules provide user\-extensible facilities to
serialize general Python objects using ASCII or binary formats. The
\X'tty: link https://docs.python.org/3/library/marshal.html#module-marshal'\fI\%marshal\fP\X'tty: link' module provides facilities to serialize built\-in Python
objects using a binary format specific to Python, but independent of
machine architecture issues.
.sp
\fIMPI for Python\fP can communicate any built\-in or user\-defined Python
object taking advantage of the features provided by the \X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link'
module. These facilities will be routinely used to build binary
representations of objects to communicate (at sending processes), and
restoring them back (at receiving processes).
.sp
Although simple and general, the serialization approach (i.e.,
\fIpickling\fP and \fIunpickling\fP) previously discussed imposes important
overheads in memory as well as processor usage, especially in the
scenario of objects with large memory footprints being
communicated. Pickling general Python objects, ranging from primitive
or container built\-in types to user\-defined classes, necessarily
requires computer resources.  Processing is also needed for
dispatching the appropriate serialization method (that depends on the
type of the object) and doing the actual packing. Additional memory is
always needed, and if its total amount is not known \fIa priori\fP, many
reallocations can occur.  Indeed, in the case of large numeric arrays,
this is certainly unacceptable and precludes communication of objects
occupying half or more of the available memory resources.
.sp
\fIMPI for Python\fP supports direct communication of any object exporting
the single\-segment buffer interface. This interface is a standard
Python mechanism provided by some types (e.g., strings and numeric
arrays), allowing access in the C side to a contiguous memory buffer
(i.e., address and length) containing the relevant data. This feature,
in conjunction with the capability of constructing user\-defined MPI
datatypes describing complicated memory layouts, enables the
implementation of many algorithms involving multidimensional numeric
arrays (e.g., image processing, fast Fourier transforms, finite
difference schemes on structured Cartesian grids) directly in Python,
with negligible overhead, and almost as fast as compiled Fortran, C,
or C++ codes.
.SS Communicators
.sp
In \fIMPI for Python\fP, \fI\%Comm\fP is the base class of communicators. The
\fI\%Intracomm\fP and \fI\%Intercomm\fP classes are subclasses of the \fI\%Comm\fP
class.  The \fI\%Comm.Is_inter\fP method (and \fI\%Comm.Is_intra\fP, provided for
convenience but not part of the MPI specification) is defined for
communicator objects and can be used to determine the particular
communicator class.
.sp
The two predefined intracommunicator instances are available:
\fI\%COMM_SELF\fP and \fI\%COMM_WORLD\fP\&. From them, new communicators can be
created as needed.
.sp
The number of processes in a communicator and the calling process rank
can be respectively obtained with methods \fI\%Comm.Get_size\fP and
\fI\%Comm.Get_rank\fP\&. The associated process group can be retrieved from a
communicator by calling the \fI\%Comm.Get_group\fP method, which returns an
instance of the \fI\%Group\fP class. Set operations with \fI\%Group\fP objects
like like \fI\%Group.Union\fP, \fI\%Group.Intersection\fP and \fI\%Group.Difference\fP
are fully supported, as well as the creation of new communicators from
these groups using \fI\%Comm.Create\fP and \fI\%Intracomm.Create_group\fP\&.
.sp
New communicator instances can be obtained with the \fI\%Comm.Clone\fP,
\fI\%Comm.Dup\fP and \fI\%Comm.Split\fP methods, as well methods
\fI\%Intracomm.Create_intercomm\fP and \fI\%Intercomm.Merge\fP\&.
.sp
Virtual topologies (\fI\%Cartcomm\fP, \fI\%Graphcomm\fP and \fI\%Distgraphcomm\fP
classes, which are specializations of the \fI\%Intracomm\fP class) are fully
supported. New instances can be obtained from intracommunicator
instances with factory methods \fI\%Intracomm.Create_cart\fP and
\fI\%Intracomm.Create_graph\fP\&.
.SS Point\-to\-Point Communications
.sp
Point to point communication is a fundamental capability of message
passing systems. This mechanism enables the transmission of data
between a pair of processes, one side sending, the other receiving.
.sp
MPI provides a set of \fIsend\fP and \fIreceive\fP functions allowing the
communication of \fItyped\fP data with an associated \fItag\fP\&.  The type
information enables the conversion of data representation from one
architecture to another in the case of heterogeneous computing
environments; additionally, it allows the representation of
non\-contiguous data layouts and user\-defined datatypes, thus avoiding
the overhead of (otherwise unavoidable) packing/unpacking
operations. The tag information allows selectivity of messages at the
receiving end.
.SS Blocking Communications
.sp
MPI provides basic send and receive functions that are \fIblocking\fP\&.
These functions block the caller until the data buffers involved in
the communication can be safely reused by the application program.
.sp
In \fIMPI for Python\fP, the \fI\%Comm.Send\fP, \fI\%Comm.Recv\fP and \fI\%Comm.Sendrecv\fP
methods of communicator objects provide support for blocking
point\-to\-point communications within \fI\%Intracomm\fP and \fI\%Intercomm\fP
instances. These methods can communicate memory buffers. The variants
\fI\%Comm.send\fP, \fI\%Comm.recv\fP and \fI\%Comm.sendrecv\fP can communicate general
Python objects.
.SS Nonblocking Communications
.sp
On many systems, performance can be significantly increased by
overlapping communication and computation. This is particularly true
on systems where communication can be executed autonomously by an
intelligent, dedicated communication controller.
.sp
MPI provides \fInonblocking\fP send and receive functions. They allow the
possible overlap of communication and computation.  Non\-blocking
communication always come in two parts: posting functions, which begin
the requested operation; and test\-for\-completion functions, which
allow to discover whether the requested operation has completed.
.sp
In \fIMPI for Python\fP, the \fI\%Comm.Isend\fP and \fI\%Comm.Irecv\fP methods
initiate send and receive operations, respectively. These methods
return a \fI\%Request\fP instance, uniquely identifying the started
operation.  Its completion can be managed using the \fI\%Request.Test\fP,
\fI\%Request.Wait\fP and \fI\%Request.Cancel\fP methods. The management of
\fI\%Request\fP objects and associated memory buffers involved in
communication requires a careful, rather low\-level coordination. Users
must ensure that objects exposing their memory buffers are not
accessed at the Python level while they are involved in nonblocking
message\-passing operations.
.SS Persistent Communications
.sp
Often a communication with the same argument list is repeatedly
executed within an inner loop. In such cases, communication can be
further optimized by using persistent communication, a particular case
of nonblocking communication allowing the reduction of the overhead
between processes and communication controllers. Furthermore , this
kind of optimization can also alleviate the extra call overheads
associated to interpreted, dynamic languages like Python.
.sp
In \fIMPI for Python\fP, the \fI\%Comm.Send_init\fP and \fI\%Comm.Recv_init\fP methods
create persistent requests for a send and receive operation,
respectively.  These methods return an instance of the \fI\%Prequest\fP
class, a subclass of the \fI\%Request\fP class. The actual communication can
be effectively started using the \fI\%Prequest.Start\fP method, and its
completion can be managed as previously described.
.SS Collective Communications
.sp
Collective communications allow the transmittal of data between
multiple processes of a group simultaneously. The syntax and semantics
of collective functions is consistent with point\-to\-point
communication. Collective functions communicate \fItyped\fP data, but
messages are not paired with an associated \fItag\fP; selectivity of
messages is implied in the calling order. Additionally, collective
functions come in blocking versions only.
.sp
The more commonly used collective communication operations are the
following.
.INDENT 0.0
.IP \(bu 2
Barrier synchronization across all group members.
.IP \(bu 2
Global communication functions
.INDENT 2.0
.IP \(bu 2
Broadcast data from one member to all members of a group.
.IP \(bu 2
Gather data from all members to one member of a group.
.IP \(bu 2
Scatter data from one member to all members of a group.
.UNINDENT
.IP \(bu 2
Global reduction operations such as sum, maximum, minimum, etc.
.UNINDENT
.sp
In \fIMPI for Python\fP, the \fI\%Comm.Bcast\fP, \fI\%Comm.Scatter\fP, \fI\%Comm.Gather\fP,
\fI\%Comm.Allgather\fP, \fI\%Comm.Alltoall\fP methods provide support for
collective communications of memory buffers. The lower\-case variants
\fI\%Comm.bcast\fP, \fI\%Comm.scatter\fP, \fI\%Comm.gather\fP, \fI\%Comm.allgather\fP and
\fI\%Comm.alltoall\fP can communicate general Python objects.  The vector
variants (which can communicate different amounts of data to each
process) \fI\%Comm.Scatterv\fP, \fI\%Comm.Gatherv\fP, \fI\%Comm.Allgatherv\fP,
\fI\%Comm.Alltoallv\fP and \fI\%Comm.Alltoallw\fP are also supported, they can
only communicate objects exposing memory buffers.
.sp
Global reduction operations on memory buffers are accessible through
the \fI\%Comm.Reduce\fP, \fI\%Comm.Reduce_scatter\fP, \fI\%Comm.Allreduce\fP,
\fI\%Intracomm.Scan\fP and \fI\%Intracomm.Exscan\fP methods. The lower\-case
variants \fI\%Comm.reduce\fP, \fI\%Comm.allreduce\fP, \fI\%Intracomm.scan\fP and
\fI\%Intracomm.exscan\fP can communicate general Python objects; however,
the actual required reduction computations are performed sequentially
at some process. All the predefined (i.e., \fI\%SUM\fP, \fI\%PROD\fP, \fI\%MAX\fP, etc.)
reduction operations can be applied.
.SS Support for GPU\-aware MPI
.sp
Several MPI implementations, including Open MPI and MVAPICH, support
passing GPU pointers to MPI calls to avoid explicit data movement
between host and device. On the Python side, support for handling GPU
arrays have been implemented in many libraries related GPU computation
such as \X'tty: link https://cupy.dev/'\fI\%CuPy\fP\X'tty: link', \X'tty: link https://numba.pydata.org/'\fI\%Numba\fP\X'tty: link', \X'tty: link https://pytorch.org/'\fI\%PyTorch\fP\X'tty: link', and \X'tty: link https://arrow.apache.org/docs/python/'\fI\%PyArrow\fP\X'tty: link'\&. To maximize
interoperability across library boundaries, two kinds of zero\-copy
data exchange protocols have been defined and agreed upon: \X'tty: link https://dmlc.github.io/dlpack/latest/python_spec.html#python-spec'\fI\%DLPack\fP\X'tty: link' and \X'tty: link https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html#cuda-array-interface'\fI\%CUDA Array Interface (CAI)\fP\X'tty: link'\&.
.sp
\fIMPI for Python\fP provides an experimental support for GPU\-aware MPI.
This feature requires:
.INDENT 0.0
.IP 1. 3
mpi4py is built against a GPU\-aware MPI library.
.IP 2. 3
The Python GPU arrays are compliant with either of the protocols.
.UNINDENT
.sp
See the \fI\%Tutorial\fP section for further information. We note that
.INDENT 0.0
.IP \(bu 2
Whether or not a MPI call can work for GPU arrays depends on the
underlying MPI implementation, not on mpi4py.
.IP \(bu 2
This support is currently experimental and subject to change in the
future.
.UNINDENT
.SS Dynamic Process Management
.sp
In the context of the MPI\-1 specification, a parallel application is
static; that is, no processes can be added to or deleted from a
running application after it has been started. Fortunately, this
limitation was addressed in MPI\-2. The new specification added a
process management model providing a basic interface between an
application and external resources and process managers.
.sp
This MPI\-2 extension can be really useful, especially for sequential
applications built on top of parallel modules, or parallel
applications with a client/server model. The MPI\-2 process model
provides a mechanism to create new processes and establish
communication between them and the existing MPI application. It also
provides mechanisms to establish communication between two existing
MPI applications, even when one did not \fIstart\fP the other.
.sp
In \fIMPI for Python\fP, new independent process groups can be created by
calling the \fI\%Intracomm.Spawn\fP method within an intracommunicator.
This call returns a new intercommunicator (i.e., an \fI\%Intercomm\fP
instance) at the parent process group. The child process group can
retrieve the matching intercommunicator by calling the
\fI\%Comm.Get_parent\fP class method. At each side, the new
intercommunicator can be used to perform point to point and collective
communications between the parent and child groups of processes.
.sp
Alternatively, disjoint groups of processes can establish
communication using a client/server approach. Any server application
must first call the \fI\%Open_port\fP function to open a \fIport\fP and the
\fI\%Publish_name\fP function to publish a provided \fIservice\fP, and next call
the \fI\%Intracomm.Accept\fP method.  Any client applications can first find
a published \fIservice\fP by calling the \fI\%Lookup_name\fP function, which
returns the \fIport\fP where a server can be contacted; and next call the
\fI\%Intracomm.Connect\fP method. Both \fI\%Intracomm.Accept\fP and
\fI\%Intracomm.Connect\fP methods return an \fI\%Intercomm\fP instance. When
connection between client/server processes is no longer needed, all of
them must cooperatively call the \fI\%Comm.Disconnect\fP
method. Additionally, server applications should release resources by
calling the \fI\%Unpublish_name\fP and \fI\%Close_port\fP functions.
.SS One\-Sided Communications
.sp
One\-sided communications (also called \fIRemote Memory Access\fP, \fIRMA\fP)
supplements the traditional two\-sided, send/receive based MPI
communication model with a one\-sided, put/get based
interface. One\-sided communication that can take advantage of the
capabilities of highly specialized network hardware. Additionally,
this extension lowers latency and software overhead in applications
written using a shared\-memory\-like paradigm.
.sp
The MPI specification revolves around the use of objects called
\fIwindows\fP; they intuitively specify regions of a process\(aqs memory that
have been made available for remote read and write operations.  The
published memory blocks can be accessed through three functions for
put (remote send), get (remote write), and accumulate (remote update
or reduction) data items. A much larger number of functions support
different synchronization styles; the semantics of these
synchronization operations are fairly complex.
.sp
In \fIMPI for Python\fP, one\-sided operations are available by using
instances of the \fI\%Win\fP class. New window objects are created by
calling the \fI\%Win.Create\fP method at all processes within a communicator
and specifying a memory buffer . When a window instance is no longer
needed, the \fI\%Win.Free\fP method should be called.
.sp
The three one\-sided MPI operations for remote write, read and
reduction are available through calling the methods \fI\%Win.Put\fP,
\fI\%Win.Get\fP, and \fI\%Win.Accumulate\fP respectively within a \fI\%Win\fP instance.
These methods need an integer rank identifying the target process and
an integer offset relative the base address of the remote memory block
being accessed.
.sp
The one\-sided operations read, write, and reduction are implicitly
nonblocking, and must be synchronized by using two primary modes.
Active target synchronization requires the origin process to call the
\fI\%Win.Start\fP and \fI\%Win.Complete\fP methods at the origin process, and
target process cooperates by calling the \fI\%Win.Post\fP and \fI\%Win.Wait\fP
methods. There is also a collective variant provided by the
\fI\%Win.Fence\fP method. Passive target synchronization is more lenient,
only the origin process calls the \fI\%Win.Lock\fP and \fI\%Win.Unlock\fP
methods. Locks are used to protect remote accesses to the locked
remote window and to protect local load/store accesses to a locked
local window.
.SS Parallel Input/Output
.sp
The POSIX standard provides a model of a widely portable file
system. However, the optimization needed for parallel input/output
cannot be achieved with this generic interface. In order to ensure
efficiency and scalability, the underlying parallel input/output
system must provide a high\-level interface supporting partitioning of
file data among processes and a collective interface supporting
complete transfers of global data structures between process memories
and files. Additionally, further efficiencies can be gained via
support for asynchronous input/output, strided accesses to data, and
control over physical file layout on storage devices. This scenario
motivated the inclusion in the MPI\-2 standard of a custom interface in
order to support more elaborated parallel input/output operations.
.sp
The MPI specification for parallel input/output revolves around the
use objects called \fIfiles\fP\&. As defined by MPI, files are not just
contiguous byte streams. Instead, they are regarded as ordered
collections of \fItyped\fP data items. MPI supports sequential or random
access to any integral set of these items. Furthermore, files are
opened collectively by a group of processes.
.sp
The common patterns for accessing a shared file (broadcast, scatter,
gather, reduction) is expressed by using user\-defined datatypes.
Compared to the communication patterns of point\-to\-point and
collective communications, this approach has the advantage of added
flexibility and expressiveness. Data access operations (read and
write) are defined for different kinds of positioning (using explicit
offsets, individual file pointers, and shared file pointers),
coordination (non\-collective and collective), and synchronism
(blocking, nonblocking, and split collective with begin/end phases).
.sp
In \fIMPI for Python\fP, all MPI input/output operations are performed
through instances of the \fI\%File\fP class. File handles are obtained by
calling the \fI\%File.Open\fP method at all processes within a communicator
and providing a file name and the intended access mode.  After use,
they must be closed by calling the \fI\%File.Close\fP method.  Files even
can be deleted by calling method \fI\%File.Delete\fP\&.
.sp
After creation, files are typically associated with a per\-process
\fIview\fP\&. The view defines the current set of data visible and
accessible from an open file as an ordered set of elementary
datatypes. This data layout can be set and queried with the
\fI\%File.Set_view\fP and \fI\%File.Get_view\fP methods respectively.
.sp
Actual input/output operations are achieved by many methods combining
read and write calls with different behavior regarding positioning,
coordination, and synchronism. Summing up, \fIMPI for Python\fP provides
the thirty (30) methods defined in MPI\-2 for reading from or writing
to files using explicit offsets or file pointers (individual or
shared), in blocking or nonblocking and collective or noncollective
versions.
.SS Environmental Management
.SS Initialization and Exit
.sp
Module functions \fI\%Init\fP or \fI\%Init_thread\fP and \fI\%Finalize\fP provide MPI
initialization and finalization respectively. Module functions
\fI\%Is_initialized\fP and \fI\%Is_finalized\fP provide the respective tests for
initialization and finalization.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBMPI_Init()\fP or \fBMPI_Init_thread()\fP is actually called
when you import the \fI\%MPI\fP module from the
\fI\%mpi4py\fP package, but only if MPI is not already
initialized. In such case, calling \fI\%Init\fP or \fI\%Init_thread\fP from
Python is expected to generate an MPI error, and in turn an
exception will be raised.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBMPI_Finalize()\fP is registered (by using Python C/API
function \X'tty: link https://docs.python.org/3/c-api/sys.html#c.Py_AtExit'\fI\%Py_AtExit()\fP\X'tty: link') for being automatically called when
Python processes exit, but only if \fI\%mpi4py\fP actually
initialized MPI. Therefore, there is no need to call \fI\%Finalize\fP
from Python to ensure MPI finalization.
.UNINDENT
.UNINDENT
.SS Implementation Information
.INDENT 0.0
.IP \(bu 2
The MPI version number can be retrieved from module function
\fI\%Get_version\fP\&. It returns a two\-integer tuple \fB(version,
subversion)\fP\&.
.IP \(bu 2
The \fI\%Get_processor_name\fP function can be used to access the
processor name.
.IP \(bu 2
The values of predefined attributes attached to the world
communicator can be obtained by calling the \fI\%Comm.Get_attr\fP method
within the \fI\%COMM_WORLD\fP instance.
.UNINDENT
.SS Timers
.sp
MPI timer functionalities are available through the \fI\%Wtime\fP and
\fI\%Wtick\fP functions.
.SS Error Handling
.sp
In order to facilitate handle sharing with other Python modules
interfacing MPI\-based parallel libraries, the predefined MPI error
handlers \fI\%ERRORS_RETURN\fP and \fI\%ERRORS_ARE_FATAL\fP can be assigned to and
retrieved from communicators using methods \fI\%Comm.Set_errhandler\fP and
\fI\%Comm.Get_errhandler\fP, and similarly for windows and files. New custom
error handlers can be created with \fI\%Comm.Create_errhandler\fP\&.
.sp
When the predefined error handler \fI\%ERRORS_RETURN\fP is set, errors
returned from MPI calls within Python code will raise an instance of
the exception class \fI\%Exception\fP, which is a subclass of the standard
Python exception \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
After import, mpi4py overrides the default MPI rules governing
inheritance of error handlers. The \fI\%ERRORS_RETURN\fP error handler is
set in the predefined \fI\%COMM_SELF\fP and \fI\%COMM_WORLD\fP communicators,
as well as any new \fI\%Comm\fP, \fI\%Win\fP, or \fI\%File\fP instance created
through mpi4py. If you ever pass such handles to C/C++/Fortran
library code, it is recommended to set the \fI\%ERRORS_ARE_FATAL\fP error
handler on them to ensure MPI errors do not pass silently.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Importing with \fBfrom mpi4py.MPI import *\fP will cause a name
clashing with the standard Python \X'tty: link https://docs.python.org/3/library/exceptions.html#Exception'\fI\%Exception\fP\X'tty: link' base class.
.UNINDENT
.UNINDENT
.SH TUTORIAL
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Under construction. Contributions very welcome!
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
\X'tty: link https://www.hlrs.de/people/rolf-rabenseifner'\fI\%Rolf Rabenseifner\fP\X'tty: link' at \X'tty: link https://www.hlrs.de/'\fI\%HLRS\fP\X'tty: link' developed a comprehensive
MPI\-3.1/4.0 course with slides and a large set of exercises
including solutions. This material is \X'tty: link https://www.hlrs.de/training/self-study-materials/mpi-course-material'\fI\%available online\fP\X'tty: link' for self\-study. The slides and exercises show the C,
Fortran, and Python (mpi4py) interfaces. For performance reasons,
most Python exercises use NumPy arrays and communication routines
involving buffer\-like objects.
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
\X'tty: link https://tacc.utexas.edu/about/staff-directory/victor-eijkhout'\fI\%Victor Eijkhout\fP\X'tty: link' at \X'tty: link https://tacc.utexas.edu/'\fI\%TACC\fP\X'tty: link' authored the book \fIParallel
Programming for Science and Engineering\fP\&. This book is \X'tty: link https://theartofhpc.com/pcse.html'\fI\%available
online\fP\X'tty: link' in PDF and \X'tty: link https://theartofhpc.com/pcse/index.html'\fI\%HTML\fP\X'tty: link' formats. The
book covers parallel programming with MPI and OpenMP in C/C++ and
Fortran, and MPI in Python using mpi4py.
.UNINDENT
.UNINDENT
.sp
\fIMPI for Python\fP supports convenient, \fIpickle\fP\-based communication of
generic Python object as well as fast, near C\-speed, direct array data
communication of buffer\-provider objects (e.g., NumPy arrays).
.INDENT 0.0
.IP \(bu 2
Communication of generic Python objects
.sp
You have to use methods with \fBall\-lowercase\fP names, like
\fI\%Comm.send\fP, \fI\%Comm.recv\fP, \fI\%Comm.bcast\fP, \fI\%Comm.scatter\fP,
\fI\%Comm.gather\fP . An object to be sent is passed as a parameter to the
communication call, and the received object is simply the return
value.
.sp
The \fI\%Comm.isend\fP and \fI\%Comm.irecv\fP methods return \fI\%Request\fP
instances; completion of these methods can be managed using the
\fI\%Request.test\fP and \fI\%Request.wait\fP methods.
.sp
The \fI\%Comm.recv\fP and \fI\%Comm.irecv\fP methods may be passed a buffer
object that can be repeatedly used to receive messages avoiding
internal memory allocation. This buffer must be sufficiently large
to accommodate the transmitted messages; hence, any buffer passed to
\fI\%Comm.recv\fP or \fI\%Comm.irecv\fP must be at least as long as the
\fIpickled\fP data transmitted to the receiver.
.sp
Collective calls like \fI\%Comm.scatter\fP, \fI\%Comm.gather\fP,
\fI\%Comm.allgather\fP, \fI\%Comm.alltoall\fP expect a single value or a
sequence of \fI\%Comm.size\fP elements at the root or all process. They
return a single value, a list of \fI\%Comm.size\fP elements, or \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\&.
.sp
\fBNOTE:\fP
.INDENT 2.0
.INDENT 3.5
\fIMPI for Python\fP uses the \fBhighest\fP \X'tty: link https://docs.python.org/3/library/pickle.html#pickle-protocols'\fI\%protocol version\fP\X'tty: link' available in the Python runtime (see the
\X'tty: link https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL'\fI\%HIGHEST_PROTOCOL\fP\X'tty: link' constant in the \X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link'
module).  The default protocol can be changed at import time by
setting the \fI\%MPI4PY_PICKLE_PROTOCOL\fP environment
variable, or at runtime by assigning a different value to the
\fI\%PROTOCOL\fP attribute of the
\fI\%pickle\fP object within the \fI\%MPI\fP
module.
.UNINDENT
.UNINDENT
.IP \(bu 2
Communication of buffer\-like objects
.sp
You have to use method names starting with an \fBupper\-case\fP letter,
like \fI\%Comm.Send\fP, \fI\%Comm.Recv\fP, \fI\%Comm.Bcast\fP, \fI\%Comm.Scatter\fP,
\fI\%Comm.Gather\fP\&.
.sp
In general, buffer arguments to these calls must be explicitly
specified by using a 2/3\-list/tuple like \fB[data, MPI.DOUBLE]\fP, or
\fB[data, count, MPI.DOUBLE]\fP (the former one uses the byte\-size of
\fBdata\fP and the extent of the MPI datatype to define \fBcount\fP).
.sp
For vector collectives communication operations like
\fI\%Comm.Scatterv\fP and \fI\%Comm.Gatherv\fP, buffer arguments are
specified as \fB[data, count, displ, datatype]\fP, where \fBcount\fP and
\fBdispl\fP are sequences of integral values.
.sp
Automatic MPI datatype discovery for NumPy/GPU arrays and PEP\-3118
buffers is supported, but limited to basic C types (all C/C99\-native
signed/unsigned integral types and single/double precision
real/complex floating types) and availability of matching datatypes
in the underlying MPI implementation. In this case, the
buffer\-provider object can be passed directly as a buffer argument,
the count and MPI datatype will be inferred.
.sp
If mpi4py is built against a GPU\-aware MPI implementation, GPU
arrays can be passed to upper\-case methods as long as they have
either the \fB__dlpack__\fP and \fB__dlpack_device__\fP methods or the
\fB__cuda_array_interface__\fP attribute that are compliant with the
respective standard specifications. Moreover, only C\-contiguous or
Fortran\-contiguous GPU arrays are supported. It is important to note
that GPU buffers must be fully ready before any MPI routines operate
on them to avoid race conditions. This can be ensured by using the
synchronization API of your array library. mpi4py does not have
access to any GPU\-specific functionality and thus cannot perform
this operation automatically for users.
.UNINDENT
.SS Running Python scripts with MPI
.sp
Most MPI programs can be run with the command \fBmpiexec\fP\&. In
practice, running Python programs looks like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 4 python script.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
to run the program with 4 processors.
.SS Point\-to\-Point Communication
.INDENT 0.0
.IP \(bu 2
Python objects (\X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link' under the hood):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

if rank == 0:
    data = {\(aqa\(aq: 7, \(aqb\(aq: 3.14}
    comm.send(data, dest=1, tag=11)
elif rank == 1:
    data = comm.recv(source=0, tag=11)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Python objects with non\-blocking communication:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

if rank == 0:
    data = {\(aqa\(aq: 7, \(aqb\(aq: 3.14}
    req = comm.isend(data, dest=1, tag=11)
    req.wait()
elif rank == 1:
    req = comm.irecv(source=0, tag=11)
    data = req.wait()
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
NumPy arrays (the fast way!):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

# passing MPI datatypes explicitly
if rank == 0:
    data = numpy.arange(1000, dtype=\(aqi\(aq)
    comm.Send([data, MPI.INT], dest=1, tag=77)
elif rank == 1:
    data = numpy.empty(1000, dtype=\(aqi\(aq)
    comm.Recv([data, MPI.INT], source=0, tag=77)

# automatic MPI datatype discovery
if rank == 0:
    data = numpy.arange(100, dtype=numpy.float64)
    comm.Send(data, dest=1, tag=13)
elif rank == 1:
    data = numpy.empty(100, dtype=numpy.float64)
    comm.Recv(data, source=0, tag=13)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Collective Communication
.INDENT 0.0
.IP \(bu 2
Broadcasting a Python dictionary:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

if rank == 0:
    data = {\(aqkey1\(aq : [7, 2.72, 2+3j],
            \(aqkey2\(aq : ( \(aqabc\(aq, \(aqxyz\(aq)}
else:
    data = None
data = comm.bcast(data, root=0)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Scattering Python objects:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

if rank == 0:
    data = [(i+1)**2 for i in range(size)]
else:
    data = None
data = comm.scatter(data, root=0)
assert data == (rank+1)**2
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Gathering Python objects:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

data = (rank+1)**2
data = comm.gather(data, root=0)
if rank == 0:
    for i in range(size):
        assert data[i] == (i+1)**2
else:
    assert data is None
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Broadcasting a NumPy array:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy as np

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

if rank == 0:
    data = np.arange(100, dtype=\(aqi\(aq)
else:
    data = np.empty(100, dtype=\(aqi\(aq)
comm.Bcast(data, root=0)
for i in range(100):
    assert data[i] == i
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Scattering NumPy arrays:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy as np

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

sendbuf = None
if rank == 0:
    sendbuf = np.empty([size, 100], dtype=\(aqi\(aq)
    sendbuf.T[:,:] = range(size)
recvbuf = np.empty(100, dtype=\(aqi\(aq)
comm.Scatter(sendbuf, recvbuf, root=0)
assert np.allclose(recvbuf, rank)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Gathering NumPy arrays:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy as np

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

sendbuf = np.zeros(100, dtype=\(aqi\(aq) + rank
recvbuf = None
if rank == 0:
    recvbuf = np.empty([size, 100], dtype=\(aqi\(aq)
comm.Gather(sendbuf, recvbuf, root=0)
if rank == 0:
    for i in range(size):
        assert np.allclose(recvbuf[i,:], i)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Parallel matrix\-vector product:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy

def matvec(comm, A, x):
    m = A.shape[0] # local rows
    p = comm.Get_size()
    xg = numpy.zeros(m*p, dtype=\(aqd\(aq)
    comm.Allgather([x,  MPI.DOUBLE],
                   [xg, MPI.DOUBLE])
    y = numpy.dot(A, xg)
    return y
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Input/Output (MPI\-IO)
.INDENT 0.0
.IP \(bu 2
Collective I/O with NumPy arrays:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy as np

amode = MPI.MODE_WRONLY|MPI.MODE_CREATE
comm = MPI.COMM_WORLD
fh = MPI.File.Open(comm, \(dq./datafile.contig\(dq, amode)

buffer = np.empty(10, dtype=np.int)
buffer[:] = comm.Get_rank()

offset = comm.Get_rank()*buffer.nbytes
fh.Write_at_all(offset, buffer)

fh.Close()
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Non\-contiguous Collective I/O with NumPy arrays and datatypes:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import numpy as np

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

amode = MPI.MODE_WRONLY|MPI.MODE_CREATE
fh = MPI.File.Open(comm, \(dq./datafile.noncontig\(dq, amode)

item_count = 10

buffer = np.empty(item_count, dtype=\(aqi\(aq)
buffer[:] = rank

filetype = MPI.INT.Create_vector(item_count, 1, size)
filetype.Commit()

displacement = MPI.INT.Get_size()*rank
fh.Set_view(displacement, filetype=filetype)

fh.Write_all(buffer)
filetype.Free()
fh.Close()
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Dynamic Process Management
.INDENT 0.0
.IP \(bu 2
Compute Pi \- Master (or parent, or client) side:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
#!/usr/bin/env python
from mpi4py import MPI
import numpy
import sys

comm = MPI.COMM_SELF.Spawn(sys.executable,
                           args=[\(aqcpi.py\(aq],
                           maxprocs=5)

N = numpy.array(100, \(aqi\(aq)
comm.Bcast([N, MPI.INT], root=MPI.ROOT)
PI = numpy.array(0.0, \(aqd\(aq)
comm.Reduce(None, [PI, MPI.DOUBLE],
            op=MPI.SUM, root=MPI.ROOT)
print(PI)

comm.Disconnect()
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Compute Pi \- Worker (or child, or server) side:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
#!/usr/bin/env python
from mpi4py import MPI
import numpy

comm = MPI.Comm.Get_parent()
size = comm.Get_size()
rank = comm.Get_rank()

N = numpy.array(0, dtype=\(aqi\(aq)
comm.Bcast([N, MPI.INT], root=0)
h = 1.0 / N; s = 0.0
for i in range(rank, N, size):
    x = h * (i + 0.5)
    s += 4.0 / (1.0 + x**2)
PI = numpy.array(s * h, dtype=\(aqd\(aq)
comm.Reduce([PI, MPI.DOUBLE], None,
            op=MPI.SUM, root=0)

comm.Disconnect()
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS GPU\-aware MPI + Python GPU arrays
.INDENT 0.0
.IP \(bu 2
Reduce\-to\-all CuPy arrays:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
import cupy as cp

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

sendbuf = cp.arange(10, dtype=\(aqi\(aq)
recvbuf = cp.empty_like(sendbuf)
cp.cuda.get_current_stream().synchronize()
comm.Allreduce(sendbuf, recvbuf)

assert cp.allclose(recvbuf, sendbuf*size)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS One\-Sided Communication (RMA)
.INDENT 0.0
.IP \(bu 2
Read from (write to) the entire RMA window:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
import numpy as np
from mpi4py import MPI
from mpi4py.util import dtlib

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

datatype = MPI.FLOAT
np_dtype = dtlib.to_numpy_dtype(datatype)
itemsize = datatype.Get_size()

N = 10
win_size = N * itemsize if rank == 0 else 0
win = MPI.Win.Allocate(win_size, comm=comm)

buf = np.empty(N, dtype=np_dtype)
if rank == 0:
    buf.fill(42)
    win.Lock(rank=0)
    win.Put(buf, target_rank=0)
    win.Unlock(rank=0)
    comm.Barrier()
else:
    comm.Barrier()
    win.Lock(rank=0)
    win.Get(buf, target_rank=0)
    win.Unlock(rank=0)
    assert np.all(buf == 42)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Accessing a part of the RMA window using the \fBtarget\fP argument,
which is defined as \fB(offset, count, datatype)\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
import numpy as np
from mpi4py import MPI
from mpi4py.util import dtlib

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

datatype = MPI.FLOAT
np_dtype = dtlib.to_numpy_dtype(datatype)
itemsize = datatype.Get_size()

N = comm.Get_size() + 1
win_size = N * itemsize if rank == 0 else 0
win = MPI.Win.Allocate(
    size=win_size,
    disp_unit=itemsize,
    comm=comm,
)
if rank == 0:
    mem = np.frombuffer(win, dtype=np_dtype)
    mem[:] = np.arange(len(mem), dtype=np_dtype)
comm.Barrier()

buf = np.zeros(3, dtype=np_dtype)
target = (rank, 2, datatype)
win.Lock(rank=0)
win.Get(buf, target_rank=0, target=target)
win.Unlock(rank=0)
assert np.all(buf == [rank, rank+1, 0])
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Wrapping with SWIG
.INDENT 0.0
.IP \(bu 2
C source:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
/* file: helloworld.c */
void sayhello(MPI_Comm comm)
{
  int size, rank;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  printf(\(dqHello, World! \(dq
         \(dqI am process %d of %d.\en\(dq,
         rank, size);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
SWIG interface file:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
// file: helloworld.i
%module helloworld
%{
#include <mpi.h>
#include \(dqhelloworld.c\(dq
}%

%include mpi4py/mpi4py.i
%mpi4py_typemap(Comm, MPI_Comm);
void sayhello(MPI_Comm comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Try it in the Python prompt:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from mpi4py import MPI
>>> import helloworld
>>> helloworld.sayhello(MPI.COMM_WORLD)
Hello, World! I am process 0 of 1.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Wrapping with F2Py
.INDENT 0.0
.IP \(bu 2
Fortran 90 source:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
! file: helloworld.f90
subroutine sayhello(comm)
  use mpi
  implicit none
  integer :: comm, rank, size, ierr
  call MPI_Comm_size(comm, size, ierr)
  call MPI_Comm_rank(comm, rank, ierr)
  print *, \(aqHello, World! I am process \(aq,rank,\(aq of \(aq,size,\(aq.\(aq
end subroutine sayhello
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Compiling example using f2py
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ f2py \-c \-\-f90exec=mpif90 helloworld.f90 \-m helloworld
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Try it in the Python prompt:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from mpi4py import MPI
>>> import helloworld
>>> fcomm = MPI.COMM_WORLD.py2f()
>>> helloworld.sayhello(fcomm)
Hello, World! I am process 0 of 1.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SH MPI4PY
.sp
The \fBMPI for Python\fP package.
.sp
The \fIMessage Passing Interface\fP (MPI) is a standardized and portable
message\-passing system designed to function on a wide variety of
parallel computers. The MPI standard defines the syntax and semantics
of library routines and allows users to write portable programs in the
main scientific programming languages (Fortran, C, or C++). Since its
release, the MPI specification has become the leading standard for
message\-passing libraries for parallel computers.
.sp
\fIMPI for Python\fP provides MPI bindings for the Python programming
language, allowing any Python program to exploit multiple processors.
This package build on the MPI specification and provides an object
oriented interface which closely follows MPI\-2 C++ bindings.
.SS Runtime configuration options
.INDENT 0.0
.TP
.B mpi4py.rc
This object has attributes exposing runtime configuration options that
become effective at import time of the \fI\%MPI\fP module.
.UNINDENT
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%initialize\fP
T}	T{
Automatic MPI initialization at import
T}
_
T{
\fI\%threads\fP
T}	T{
Request initialization with thread support
T}
_
T{
\fI\%thread_level\fP
T}	T{
Level of thread support to request
T}
_
T{
\fI\%finalize\fP
T}	T{
Automatic MPI finalization at exit
T}
_
T{
\fI\%fast_reduce\fP
T}	T{
Use tree\-based reductions for objects
T}
_
T{
\fI\%recv_mprobe\fP
T}	T{
Use matched probes to receive objects
T}
_
T{
\fI\%irecv_bufsz\fP
T}	T{
Default buffer size in bytes for \fI\%irecv()\fP
T}
_
T{
\fI\%errors\fP
T}	T{
Error handling policy
T}
_
.TE
.sp
Attributes Documentation
.INDENT 0.0
.TP
.B mpi4py.rc.initialize
Automatic MPI initialization at import.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_INITIALIZE\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.threads
Request initialization with thread support.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_THREADS\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.thread_level
Level of thread support to request.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.TP
.B Default
\fB\(dqmultiple\(dq\fP
.TP
.B Choices
\fB\(dqmultiple\(dq\fP, \fB\(dqserialized\(dq\fP, \fB\(dqfunneled\(dq\fP, \fB\(dqsingle\(dq\fP
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_THREAD_LEVEL\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.finalize
Automatic MPI finalization at exit.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' or \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_FINALIZE\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.fast_reduce
Use tree\-based reductions for objects.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_FAST_REDUCE\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.recv_mprobe
Use matched probes to receive objects.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_RECV_MPROBE\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.irecv_bufsz
Default buffer size in bytes for \fI\%irecv()\fP\&.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.TP
.B Default
\fB32768\fP
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_IRECV_BUFSZ\fP
.UNINDENT
.UNINDENT
.sp
Added in version 4.0.0.

.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.rc.errors
Error handling policy.
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.TP
.B Default
\fB\(dqexception\(dq\fP
.TP
.B Choices
\fB\(dqexception\(dq\fP, \fB\(dqdefault\(dq\fP, \fB\(dqabort\(dq\fP, \fB\(dqfatal\(dq\fP
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%MPI4PY_RC_ERRORS\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Example
.sp
MPI for Python features automatic initialization and finalization of the MPI
execution environment. By using the \fI\%mpi4py.rc\fP object, MPI initialization and
finalization can be handled programmatically:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import mpi4py
mpi4py.rc.initialize = False  # do not initialize MPI automatically
mpi4py.rc.finalize = False    # do not finalize MPI automatically

from mpi4py import MPI # import the \(aqMPI\(aq module

MPI.Init()      # manual initialization of the MPI environment
\&...             # your finest code here ...
MPI.Finalize()  # manual finalization of the MPI environment
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Environment variables
.sp
The following environment variables override the corresponding attributes of
the \fI\%mpi4py.rc\fP and \fI\%MPI.pickle\fP objects at import time of the
\fI\%MPI\fP module.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
For variables of boolean type, accepted values are \fB0\fP and \fB1\fP
(interpreted as \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' and \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', respectively), and strings
specifying a \X'tty: link https://yaml.org/type/bool.html'\fI\%YAML boolean\fP\X'tty: link' value (case\-insensitive).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_INITIALIZE
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
Whether to automatically initialize MPI at import time of the
\fI\%mpi4py.MPI\fP module.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.initialize\fP
.UNINDENT
.UNINDENT
.sp
Added in version 4.0.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_FINALIZE
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.TP
.B Choices
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link'
.UNINDENT
.sp
Whether to automatically finalize MPI at exit time of the Python process.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.finalize\fP
.UNINDENT
.UNINDENT
.sp
Added in version 4.0.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_THREADS
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
Whether to initialize MPI with thread support.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.threads\fP
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_THREAD_LEVEL
.INDENT 7.0
.TP
.B Default
\fB\(dqmultiple\(dq\fP
.TP
.B Choices
\fB\(dqsingle\(dq\fP, \fB\(dqfunneled\(dq\fP,
\fB\(dqserialized\(dq\fP, \fB\(dqmultiple\(dq\fP
.UNINDENT
.sp
The level of required thread support.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.thread_level\fP
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_FAST_REDUCE
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
Whether to use tree\-based reductions for objects.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.fast_reduce\fP
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_RECV_MPROBE
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
Whether to use matched probes to receive objects.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.recv_mprobe\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_IRECV_BUFSZ
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'
.UNINDENT
.sp
Default buffer size in bytes for \fI\%irecv()\fP\&.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.irecv_bufsz\fP
.UNINDENT
.UNINDENT
.sp
Added in version 4.0.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_RC_ERRORS
.INDENT 7.0
.TP
.B Default
\fB\(dqexception\(dq\fP
.TP
.B Choices
\fB\(dqexception\(dq\fP, \fB\(dqdefault\(dq\fP, \fB\(dqabort\(dq\fP, \fB\(dqfatal\(dq\fP
.UNINDENT
.sp
Controls default MPI error handling policy.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%mpi4py.rc.errors\fP
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_PICKLE_PROTOCOL
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.TP
.B Default
\X'tty: link https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL'\fI\%pickle.HIGHEST_PROTOCOL\fP\X'tty: link'
.UNINDENT
.sp
Controls the default pickle protocol to use when communicating Python
objects.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%PROTOCOL\fP attribute of the
\fI\%MPI.pickle\fP object within the \fI\%MPI\fP module.
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_PICKLE_THRESHOLD
.INDENT 7.0
.TP
.B Type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.TP
.B Default
\fB262144\fP
.UNINDENT
.sp
Controls the default buffer size threshold for switching from in\-band to
out\-of\-band buffer handling when using pickle protocol version 5 or higher.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%THRESHOLD\fP attribute of the
\fI\%MPI.pickle\fP object within the \fI\%MPI\fP module.
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.2.

.UNINDENT
.SS Miscellaneous functions
.INDENT 0.0
.TP
.B mpi4py.profile(name, *, path=None)
Support for the MPI profiling interface.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link') \-\- Name of the profiler library to load.
.IP \(bu 2
\fBpath\fP (\X'tty: link https://docs.python.org/3/glossary.html#term-sequence'\fI\%sequence\fP\X'tty: link' of \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \fIoptional\fP) \-\- Additional paths to search for the profiler.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.get_include()
Return the directory in the package that contains header files.
.sp
Extension modules that need to compile against mpi4py should use
this function to locate the appropriate include directory. Using
Python distutils (or perhaps NumPy distutils):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
import mpi4py
Extension(\(aqextension_name\(aq, ...
          include_dirs=[..., mpi4py.get_include()])
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.get_config()
Return a dictionary with information about MPI.
.sp
Changed in version 4.0.0: By default, this function returns an empty dictionary. However,
downstream packagers and distributors may alter such behavior.
To that end, MPI information must be provided under an \fBmpi\fP
section within a UTF\-8 encoded INI\-style configuration file
\fBmpi.cfg\fP located at the top\-level package directory.
The configuration file is read and parsed using the
\X'tty: link https://docs.python.org/3/library/configparser.html#module-configparser'\fI\%configparser\fP\X'tty: link' module.

.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']
.UNINDENT
.UNINDENT
.SH MPI4PY.MPI
.SS Classes
.sp
Ancillary
.TS
center;
|l|l|.
_
T{
\fI\%Datatype\fP
T}	T{
Datatype object.
T}
_
T{
\fI\%Status\fP
T}	T{
Status object.
T}
_
T{
\fI\%Request\fP
T}	T{
Request handler.
T}
_
T{
\fI\%Prequest\fP
T}	T{
Persistent request handler.
T}
_
T{
\fI\%Grequest\fP
T}	T{
Generalized request handler.
T}
_
T{
\fI\%Op\fP
T}	T{
Reduction operation.
T}
_
T{
\fI\%Group\fP
T}	T{
Group of processes.
T}
_
T{
\fI\%Info\fP
T}	T{
Info object.
T}
_
T{
\fI\%Session\fP
T}	T{
Session context.
T}
_
.TE
.sp
Communication
.TS
center;
|l|l|.
_
T{
\fI\%Comm\fP
T}	T{
Communication context.
T}
_
T{
\fI\%Intracomm\fP
T}	T{
Intracommunicator.
T}
_
T{
\fI\%Topocomm\fP
T}	T{
Topology intracommunicator.
T}
_
T{
\fI\%Cartcomm\fP
T}	T{
Cartesian topology intracommunicator.
T}
_
T{
\fI\%Graphcomm\fP
T}	T{
General graph topology intracommunicator.
T}
_
T{
\fI\%Distgraphcomm\fP
T}	T{
Distributed graph topology intracommunicator.
T}
_
T{
\fI\%Intercomm\fP
T}	T{
Intercommunicator.
T}
_
T{
\fI\%Message\fP
T}	T{
Matched message.
T}
_
.TE
.sp
One\-sided operations
.TS
center;
|l|l|.
_
T{
\fI\%Win\fP
T}	T{
Remote memory access context.
T}
_
.TE
.sp
Input/Output
.TS
center;
|l|l|.
_
T{
\fI\%File\fP
T}	T{
File I/O context.
T}
_
.TE
.sp
Error handling
.TS
center;
|l|l|.
_
T{
\fI\%Errhandler\fP
T}	T{
Error handler.
T}
_
T{
\fI\%Exception\fP
T}	T{
Exception class.
T}
_
.TE
.sp
Auxiliary
.TS
center;
|l|l|.
_
T{
\fI\%Pickle\fP
T}	T{
Pickle/unpickle Python objects.
T}
_
T{
\fI\%buffer\fP
T}	T{
Buffer.
T}
_
.TE
.SS Functions
.sp
Version inquiry
.TS
center;
|l|l|.
_
T{
\fI\%Get_version\fP()
T}	T{
Obtain the version number of the MPI standard.
T}
_
T{
\fI\%Get_library_version\fP()
T}	T{
Obtain the version string of the MPI library.
T}
_
.TE
.sp
Initialization and finalization
.TS
center;
|l|l|.
_
T{
\fI\%Init\fP()
T}	T{
Initialize the MPI execution environment.
T}
_
T{
\fI\%Init_thread\fP([required])
T}	T{
Initialize the MPI execution environment.
T}
_
T{
\fI\%Finalize\fP()
T}	T{
Terminate the MPI execution environment.
T}
_
T{
\fI\%Is_initialized\fP()
T}	T{
Indicate whether \fI\%Init\fP has been called.
T}
_
T{
\fI\%Is_finalized\fP()
T}	T{
Indicate whether \fI\%Finalize\fP has completed.
T}
_
T{
\fI\%Query_thread\fP()
T}	T{
Return the level of thread support provided by the MPI library.
T}
_
T{
\fI\%Is_thread_main\fP()
T}	T{
Indicate whether this thread called \fI\%Init\fP or \fI\%Init_thread\fP\&.
T}
_
.TE
.sp
Memory allocation
.TS
center;
|l|l|.
_
T{
\fI\%Alloc_mem\fP(size[, info])
T}	T{
Allocate memory for message passing and remote memory access.
T}
_
T{
\fI\%Free_mem\fP(mem)
T}	T{
Free memory allocated with \fI\%Alloc_mem\fP\&.
T}
_
.TE
.sp
Address manipulation
.TS
center;
|l|l|.
_
T{
\fI\%Get_address\fP(location)
T}	T{
Get the address of a location in memory.
T}
_
T{
\fI\%Aint_add\fP(base, disp)
T}	T{
Return the sum of base address and displacement.
T}
_
T{
\fI\%Aint_diff\fP(addr1, addr2)
T}	T{
Return the difference between absolute addresses.
T}
_
.TE
.sp
Timer
.TS
center;
|l|l|.
_
T{
\fI\%Wtick\fP()
T}	T{
Return the resolution of \fI\%Wtime\fP\&.
T}
_
T{
\fI\%Wtime\fP()
T}	T{
Return an elapsed time on the calling processor.
T}
_
.TE
.sp
Error handling
.TS
center;
|l|l|.
_
T{
\fI\%Get_error_class\fP(errorcode)
T}	T{
Convert an \fIerror code\fP into an \fIerror class\fP\&.
T}
_
T{
\fI\%Get_error_string\fP(errorcode)
T}	T{
Return the \fIerror string\fP for a given \fIerror class\fP or \fIerror code\fP\&.
T}
_
T{
\fI\%Add_error_class\fP()
T}	T{
Add an \fIerror class\fP to the known error classes.
T}
_
T{
\fI\%Add_error_code\fP(errorclass)
T}	T{
Add an \fIerror code\fP to an \fIerror class\fP\&.
T}
_
T{
\fI\%Add_error_string\fP(errorcode, string)
T}	T{
Associate an \fIerror string\fP with an \fIerror class\fP or \fIerror code\fP\&.
T}
_
T{
\fI\%Remove_error_class\fP(errorclass)
T}	T{
Remove an \fIerror class\fP from the known error classes.
T}
_
T{
\fI\%Remove_error_code\fP(errorcode)
T}	T{
Remove an \fIerror code\fP from the known error codes.
T}
_
T{
\fI\%Remove_error_string\fP(errorcode)
T}	T{
Remove \fIerror string\fP association from \fIerror class\fP or \fIerror code\fP\&.
T}
_
.TE
.sp
Dynamic process management
.TS
center;
|l|l|.
_
T{
\fI\%Open_port\fP([info])
T}	T{
Return an address used to connect group of processes.
T}
_
T{
\fI\%Close_port\fP(port_name)
T}	T{
Close a port.
T}
_
T{
\fI\%Publish_name\fP(service_name, port_name[, info])
T}	T{
Publish a service name.
T}
_
T{
\fI\%Unpublish_name\fP(service_name, port_name[, info])
T}	T{
Unpublish a service name.
T}
_
T{
\fI\%Lookup_name\fP(service_name[, info])
T}	T{
Lookup a port name given a service name.
T}
_
.TE
.sp
Miscellanea
.TS
center;
|l|l|.
_
T{
\fI\%Attach_buffer\fP(buf)
T}	T{
Attach a user\-provided buffer for sending in buffered mode.
T}
_
T{
\fI\%Detach_buffer\fP()
T}	T{
Remove an existing attached buffer.
T}
_
T{
\fI\%Flush_buffer\fP()
T}	T{
Block until all buffered messages have been transmitted.
T}
_
T{
\fI\%Iflush_buffer\fP()
T}	T{
Nonblocking flush for buffered messages.
T}
_
T{
\fI\%Compute_dims\fP(nnodes, dims)
T}	T{
Return a balanced distribution of processes per coordinate direction.
T}
_
T{
\fI\%Get_processor_name\fP()
T}	T{
Obtain the name of the calling processor.
T}
_
T{
\fI\%Register_datarep\fP(datarep, read_fn, write_fn, ...)
T}	T{
Register user\-defined data representations.
T}
_
T{
\fI\%Pcontrol\fP(level)
T}	T{
Control profiling.
T}
_
.TE
.sp
Utilities
.TS
center;
|l|l|.
_
T{
\fI\%get_vendor\fP()
T}	T{
Information about the underlying MPI implementation.
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%UNDEFINED\fP
T}	T{
Constant \fBUNDEFINED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ANY_SOURCE\fP
T}	T{
Constant \fBANY_SOURCE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ANY_TAG\fP
T}	T{
Constant \fBANY_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%PROC_NULL\fP
T}	T{
Constant \fBPROC_NULL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ROOT\fP
T}	T{
Constant \fBROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%BOTTOM\fP
T}	T{
Constant \fBBOTTOM\fP of type \fI\%BottomType\fP
T}
_
T{
\fI\%IN_PLACE\fP
T}	T{
Constant \fBIN_PLACE\fP of type \fI\%InPlaceType\fP
T}
_
T{
\fI\%BUFFER_AUTOMATIC\fP
T}	T{
Constant \fBBUFFER_AUTOMATIC\fP of type \fI\%BufferAutomaticType\fP
T}
_
T{
\fI\%KEYVAL_INVALID\fP
T}	T{
Constant \fBKEYVAL_INVALID\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TAG_UB\fP
T}	T{
Constant \fBTAG_UB\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%IO\fP
T}	T{
Constant \fBIO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WTIME_IS_GLOBAL\fP
T}	T{
Constant \fBWTIME_IS_GLOBAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNIVERSE_SIZE\fP
T}	T{
Constant \fBUNIVERSE_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%APPNUM\fP
T}	T{
Constant \fBAPPNUM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LASTUSEDCODE\fP
T}	T{
Constant \fBLASTUSEDCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_BASE\fP
T}	T{
Constant \fBWIN_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_SIZE\fP
T}	T{
Constant \fBWIN_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_DISP_UNIT\fP
T}	T{
Constant \fBWIN_DISP_UNIT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_CREATE_FLAVOR\fP
T}	T{
Constant \fBWIN_CREATE_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR\fP
T}	T{
Constant \fBWIN_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_MODEL\fP
T}	T{
Constant \fBWIN_MODEL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SUCCESS\fP
T}	T{
Constant \fBSUCCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_LASTCODE\fP
T}	T{
Constant \fBERR_LASTCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_COMM\fP
T}	T{
Constant \fBERR_COMM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_GROUP\fP
T}	T{
Constant \fBERR_GROUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TYPE\fP
T}	T{
Constant \fBERR_TYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_REQUEST\fP
T}	T{
Constant \fBERR_REQUEST\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_OP\fP
T}	T{
Constant \fBERR_OP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ERRHANDLER\fP
T}	T{
Constant \fBERR_ERRHANDLER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BUFFER\fP
T}	T{
Constant \fBERR_BUFFER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_COUNT\fP
T}	T{
Constant \fBERR_COUNT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TAG\fP
T}	T{
Constant \fBERR_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RANK\fP
T}	T{
Constant \fBERR_RANK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ROOT\fP
T}	T{
Constant \fBERR_ROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TRUNCATE\fP
T}	T{
Constant \fBERR_TRUNCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_IN_STATUS\fP
T}	T{
Constant \fBERR_IN_STATUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PENDING\fP
T}	T{
Constant \fBERR_PENDING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TOPOLOGY\fP
T}	T{
Constant \fBERR_TOPOLOGY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DIMS\fP
T}	T{
Constant \fBERR_DIMS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ARG\fP
T}	T{
Constant \fBERR_ARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_OTHER\fP
T}	T{
Constant \fBERR_OTHER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNKNOWN\fP
T}	T{
Constant \fBERR_UNKNOWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INTERN\fP
T}	T{
Constant \fBERR_INTERN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO\fP
T}	T{
Constant \fBERR_INFO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE\fP
T}	T{
Constant \fBERR_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_WIN\fP
T}	T{
Constant \fBERR_WIN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_KEYVAL\fP
T}	T{
Constant \fBERR_KEYVAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_KEY\fP
T}	T{
Constant \fBERR_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_VALUE\fP
T}	T{
Constant \fBERR_INFO_VALUE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_NOKEY\fP
T}	T{
Constant \fBERR_INFO_NOKEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ACCESS\fP
T}	T{
Constant \fBERR_ACCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_AMODE\fP
T}	T{
Constant \fBERR_AMODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BAD_FILE\fP
T}	T{
Constant \fBERR_BAD_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE_EXISTS\fP
T}	T{
Constant \fBERR_FILE_EXISTS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE_IN_USE\fP
T}	T{
Constant \fBERR_FILE_IN_USE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_SPACE\fP
T}	T{
Constant \fBERR_NO_SPACE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_SUCH_FILE\fP
T}	T{
Constant \fBERR_NO_SUCH_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_IO\fP
T}	T{
Constant \fBERR_IO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_READ_ONLY\fP
T}	T{
Constant \fBERR_READ_ONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_CONVERSION\fP
T}	T{
Constant \fBERR_CONVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DUP_DATAREP\fP
T}	T{
Constant \fBERR_DUP_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNSUPPORTED_DATAREP\fP
T}	T{
Constant \fBERR_UNSUPPORTED_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNSUPPORTED_OPERATION\fP
T}	T{
Constant \fBERR_UNSUPPORTED_OPERATION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NAME\fP
T}	T{
Constant \fBERR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_MEM\fP
T}	T{
Constant \fBERR_NO_MEM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NOT_SAME\fP
T}	T{
Constant \fBERR_NOT_SAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PORT\fP
T}	T{
Constant \fBERR_PORT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_QUOTA\fP
T}	T{
Constant \fBERR_QUOTA\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SERVICE\fP
T}	T{
Constant \fBERR_SERVICE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SPAWN\fP
T}	T{
Constant \fBERR_SPAWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BASE\fP
T}	T{
Constant \fBERR_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SIZE\fP
T}	T{
Constant \fBERR_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DISP\fP
T}	T{
Constant \fBERR_DISP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ASSERT\fP
T}	T{
Constant \fBERR_ASSERT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_LOCKTYPE\fP
T}	T{
Constant \fBERR_LOCKTYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_CONFLICT\fP
T}	T{
Constant \fBERR_RMA_CONFLICT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_SYNC\fP
T}	T{
Constant \fBERR_RMA_SYNC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_RANGE\fP
T}	T{
Constant \fBERR_RMA_RANGE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_ATTACH\fP
T}	T{
Constant \fBERR_RMA_ATTACH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_SHARED\fP
T}	T{
Constant \fBERR_RMA_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_FLAVOR\fP
T}	T{
Constant \fBERR_RMA_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_C\fP
T}	T{
Constant \fBORDER_C\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_F\fP
T}	T{
Constant \fBORDER_F\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_FORTRAN\fP
T}	T{
Constant \fBORDER_FORTRAN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_INTEGER\fP
T}	T{
Constant \fBTYPECLASS_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_REAL\fP
T}	T{
Constant \fBTYPECLASS_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_COMPLEX\fP
T}	T{
Constant \fBTYPECLASS_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_NONE\fP
T}	T{
Constant \fBDISTRIBUTE_NONE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_BLOCK\fP
T}	T{
Constant \fBDISTRIBUTE_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_CYCLIC\fP
T}	T{
Constant \fBDISTRIBUTE_CYCLIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_DFLT_DARG\fP
T}	T{
Constant \fBDISTRIBUTE_DFLT_DARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_NAMED\fP
T}	T{
Constant \fBCOMBINER_NAMED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_DUP\fP
T}	T{
Constant \fBCOMBINER_DUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_CONTIGUOUS\fP
T}	T{
Constant \fBCOMBINER_CONTIGUOUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_VECTOR\fP
T}	T{
Constant \fBCOMBINER_VECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HVECTOR\fP
T}	T{
Constant \fBCOMBINER_HVECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_INDEXED\fP
T}	T{
Constant \fBCOMBINER_INDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HINDEXED\fP
T}	T{
Constant \fBCOMBINER_HINDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_INDEXED_BLOCK\fP
T}	T{
Constant \fBCOMBINER_INDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HINDEXED_BLOCK\fP
T}	T{
Constant \fBCOMBINER_HINDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_STRUCT\fP
T}	T{
Constant \fBCOMBINER_STRUCT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_SUBARRAY\fP
T}	T{
Constant \fBCOMBINER_SUBARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_DARRAY\fP
T}	T{
Constant \fBCOMBINER_DARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_RESIZED\fP
T}	T{
Constant \fBCOMBINER_RESIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_VALUE_INDEX\fP
T}	T{
Constant \fBCOMBINER_VALUE_INDEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_REAL\fP
T}	T{
Constant \fBCOMBINER_F90_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_COMPLEX\fP
T}	T{
Constant \fBCOMBINER_F90_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_INTEGER\fP
T}	T{
Constant \fBCOMBINER_F90_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%IDENT\fP
T}	T{
Constant \fBIDENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%CONGRUENT\fP
T}	T{
Constant \fBCONGRUENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SIMILAR\fP
T}	T{
Constant \fBSIMILAR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNEQUAL\fP
T}	T{
Constant \fBUNEQUAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%CART\fP
T}	T{
Constant \fBCART\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%GRAPH\fP
T}	T{
Constant \fBGRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DIST_GRAPH\fP
T}	T{
Constant \fBDIST_GRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNWEIGHTED\fP
T}	T{
Constant \fBUNWEIGHTED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WEIGHTS_EMPTY\fP
T}	T{
Constant \fBWEIGHTS_EMPTY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMM_TYPE_SHARED\fP
T}	T{
Constant \fBCOMM_TYPE_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%BSEND_OVERHEAD\fP
T}	T{
Constant \fBBSEND_OVERHEAD\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_CREATE\fP
T}	T{
Constant \fBWIN_FLAVOR_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_ALLOCATE\fP
T}	T{
Constant \fBWIN_FLAVOR_ALLOCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_DYNAMIC\fP
T}	T{
Constant \fBWIN_FLAVOR_DYNAMIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_SHARED\fP
T}	T{
Constant \fBWIN_FLAVOR_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_SEPARATE\fP
T}	T{
Constant \fBWIN_SEPARATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_UNIFIED\fP
T}	T{
Constant \fBWIN_UNIFIED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOCHECK\fP
T}	T{
Constant \fBMODE_NOCHECK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOSTORE\fP
T}	T{
Constant \fBMODE_NOSTORE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOPUT\fP
T}	T{
Constant \fBMODE_NOPUT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOPRECEDE\fP
T}	T{
Constant \fBMODE_NOPRECEDE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOSUCCEED\fP
T}	T{
Constant \fBMODE_NOSUCCEED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LOCK_EXCLUSIVE\fP
T}	T{
Constant \fBLOCK_EXCLUSIVE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LOCK_SHARED\fP
T}	T{
Constant \fBLOCK_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_RDONLY\fP
T}	T{
Constant \fBMODE_RDONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_WRONLY\fP
T}	T{
Constant \fBMODE_WRONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_RDWR\fP
T}	T{
Constant \fBMODE_RDWR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_CREATE\fP
T}	T{
Constant \fBMODE_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_EXCL\fP
T}	T{
Constant \fBMODE_EXCL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_DELETE_ON_CLOSE\fP
T}	T{
Constant \fBMODE_DELETE_ON_CLOSE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_UNIQUE_OPEN\fP
T}	T{
Constant \fBMODE_UNIQUE_OPEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_SEQUENTIAL\fP
T}	T{
Constant \fBMODE_SEQUENTIAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_APPEND\fP
T}	T{
Constant \fBMODE_APPEND\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_SET\fP
T}	T{
Constant \fBSEEK_SET\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_CUR\fP
T}	T{
Constant \fBSEEK_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_END\fP
T}	T{
Constant \fBSEEK_END\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISPLACEMENT_CURRENT\fP
T}	T{
Constant \fBDISPLACEMENT_CURRENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISP_CUR\fP
T}	T{
Constant \fBDISP_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_SINGLE\fP
T}	T{
Constant \fBTHREAD_SINGLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_FUNNELED\fP
T}	T{
Constant \fBTHREAD_FUNNELED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_SERIALIZED\fP
T}	T{
Constant \fBTHREAD_SERIALIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_MULTIPLE\fP
T}	T{
Constant \fBTHREAD_MULTIPLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%VERSION\fP
T}	T{
Constant \fBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SUBVERSION\fP
T}	T{
Constant \fBSUBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_PROCESSOR_NAME\fP
T}	T{
Constant \fBMAX_PROCESSOR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_ERROR_STRING\fP
T}	T{
Constant \fBMAX_ERROR_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_PORT_NAME\fP
T}	T{
Constant \fBMAX_PORT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_INFO_KEY\fP
T}	T{
Constant \fBMAX_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_INFO_VAL\fP
T}	T{
Constant \fBMAX_INFO_VAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_OBJECT_NAME\fP
T}	T{
Constant \fBMAX_OBJECT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_DATAREP_STRING\fP
T}	T{
Constant \fBMAX_DATAREP_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_LIBRARY_VERSION_STRING\fP
T}	T{
Constant \fBMAX_LIBRARY_VERSION_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DATATYPE_NULL\fP
T}	T{
Object \fBDATATYPE_NULL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%PACKED\fP
T}	T{
Object \fBPACKED\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%BYTE\fP
T}	T{
Object \fBBYTE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%AINT\fP
T}	T{
Object \fBAINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%OFFSET\fP
T}	T{
Object \fBOFFSET\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COUNT\fP
T}	T{
Object \fBCOUNT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CHAR\fP
T}	T{
Object \fBCHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%WCHAR\fP
T}	T{
Object \fBWCHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_CHAR\fP
T}	T{
Object \fBSIGNED_CHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SHORT\fP
T}	T{
Object \fBSHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT\fP
T}	T{
Object \fBINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG\fP
T}	T{
Object \fBLONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_LONG\fP
T}	T{
Object \fBLONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_CHAR\fP
T}	T{
Object \fBUNSIGNED_CHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_SHORT\fP
T}	T{
Object \fBUNSIGNED_SHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED\fP
T}	T{
Object \fBUNSIGNED\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_LONG\fP
T}	T{
Object \fBUNSIGNED_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_LONG_LONG\fP
T}	T{
Object \fBUNSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%FLOAT\fP
T}	T{
Object \fBFLOAT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE\fP
T}	T{
Object \fBDOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_DOUBLE\fP
T}	T{
Object \fBLONG_DOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_BOOL\fP
T}	T{
Object \fBC_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT8_T\fP
T}	T{
Object \fBINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT16_T\fP
T}	T{
Object \fBINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT32_T\fP
T}	T{
Object \fBINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT64_T\fP
T}	T{
Object \fBINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT8_T\fP
T}	T{
Object \fBUINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT16_T\fP
T}	T{
Object \fBUINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT32_T\fP
T}	T{
Object \fBUINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT64_T\fP
T}	T{
Object \fBUINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_COMPLEX\fP
T}	T{
Object \fBC_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_FLOAT_COMPLEX\fP
T}	T{
Object \fBC_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_DOUBLE_COMPLEX\fP
T}	T{
Object \fBC_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_LONG_DOUBLE_COMPLEX\fP
T}	T{
Object \fBC_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_BOOL\fP
T}	T{
Object \fBCXX_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_FLOAT_COMPLEX\fP
T}	T{
Object \fBCXX_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_DOUBLE_COMPLEX\fP
T}	T{
Object \fBCXX_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_LONG_DOUBLE_COMPLEX\fP
T}	T{
Object \fBCXX_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SHORT_INT\fP
T}	T{
Object \fBSHORT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT_INT\fP
T}	T{
Object \fBINT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%TWOINT\fP
T}	T{
Object \fBTWOINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_INT\fP
T}	T{
Object \fBLONG_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%FLOAT_INT\fP
T}	T{
Object \fBFLOAT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_INT\fP
T}	T{
Object \fBDOUBLE_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_DOUBLE_INT\fP
T}	T{
Object \fBLONG_DOUBLE_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CHARACTER\fP
T}	T{
Object \fBCHARACTER\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL\fP
T}	T{
Object \fBLOGICAL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER\fP
T}	T{
Object \fBINTEGER\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL\fP
T}	T{
Object \fBREAL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_PRECISION\fP
T}	T{
Object \fBDOUBLE_PRECISION\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX\fP
T}	T{
Object \fBCOMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_COMPLEX\fP
T}	T{
Object \fBDOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL1\fP
T}	T{
Object \fBLOGICAL1\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL2\fP
T}	T{
Object \fBLOGICAL2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL4\fP
T}	T{
Object \fBLOGICAL4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL8\fP
T}	T{
Object \fBLOGICAL8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER1\fP
T}	T{
Object \fBINTEGER1\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER2\fP
T}	T{
Object \fBINTEGER2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER4\fP
T}	T{
Object \fBINTEGER4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER8\fP
T}	T{
Object \fBINTEGER8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER16\fP
T}	T{
Object \fBINTEGER16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL2\fP
T}	T{
Object \fBREAL2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL4\fP
T}	T{
Object \fBREAL4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL8\fP
T}	T{
Object \fBREAL8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL16\fP
T}	T{
Object \fBREAL16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX4\fP
T}	T{
Object \fBCOMPLEX4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX8\fP
T}	T{
Object \fBCOMPLEX8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX16\fP
T}	T{
Object \fBCOMPLEX16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX32\fP
T}	T{
Object \fBCOMPLEX32\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_INT\fP
T}	T{
Object \fBUNSIGNED_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_SHORT\fP
T}	T{
Object \fBSIGNED_SHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_INT\fP
T}	T{
Object \fBSIGNED_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_LONG\fP
T}	T{
Object \fBSIGNED_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_LONG_LONG\fP
T}	T{
Object \fBSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%BOOL\fP
T}	T{
Object \fBBOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT8_T\fP
T}	T{
Object \fBSINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT16_T\fP
T}	T{
Object \fBSINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT32_T\fP
T}	T{
Object \fBSINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT64_T\fP
T}	T{
Object \fBSINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_BOOL\fP
T}	T{
Object \fBF_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_INT\fP
T}	T{
Object \fBF_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_FLOAT\fP
T}	T{
Object \fBF_FLOAT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_DOUBLE\fP
T}	T{
Object \fBF_DOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_COMPLEX\fP
T}	T{
Object \fBF_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_FLOAT_COMPLEX\fP
T}	T{
Object \fBF_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_DOUBLE_COMPLEX\fP
T}	T{
Object \fBF_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REQUEST_NULL\fP
T}	T{
Object \fBREQUEST_NULL\fP of type \fI\%Request\fP
T}
_
T{
\fI\%MESSAGE_NULL\fP
T}	T{
Object \fBMESSAGE_NULL\fP of type \fI\%Message\fP
T}
_
T{
\fI\%MESSAGE_NO_PROC\fP
T}	T{
Object \fBMESSAGE_NO_PROC\fP of type \fI\%Message\fP
T}
_
T{
\fI\%OP_NULL\fP
T}	T{
Object \fBOP_NULL\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MAX\fP
T}	T{
Object \fBMAX\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MIN\fP
T}	T{
Object \fBMIN\fP of type \fI\%Op\fP
T}
_
T{
\fI\%SUM\fP
T}	T{
Object \fBSUM\fP of type \fI\%Op\fP
T}
_
T{
\fI\%PROD\fP
T}	T{
Object \fBPROD\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LAND\fP
T}	T{
Object \fBLAND\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BAND\fP
T}	T{
Object \fBBAND\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LOR\fP
T}	T{
Object \fBLOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BOR\fP
T}	T{
Object \fBBOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LXOR\fP
T}	T{
Object \fBLXOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BXOR\fP
T}	T{
Object \fBBXOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MAXLOC\fP
T}	T{
Object \fBMAXLOC\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MINLOC\fP
T}	T{
Object \fBMINLOC\fP of type \fI\%Op\fP
T}
_
T{
\fI\%REPLACE\fP
T}	T{
Object \fBREPLACE\fP of type \fI\%Op\fP
T}
_
T{
\fI\%NO_OP\fP
T}	T{
Object \fBNO_OP\fP of type \fI\%Op\fP
T}
_
T{
\fI\%GROUP_NULL\fP
T}	T{
Object \fBGROUP_NULL\fP of type \fI\%Group\fP
T}
_
T{
\fI\%GROUP_EMPTY\fP
T}	T{
Object \fBGROUP_EMPTY\fP of type \fI\%Group\fP
T}
_
T{
\fI\%INFO_NULL\fP
T}	T{
Object \fBINFO_NULL\fP of type \fI\%Info\fP
T}
_
T{
\fI\%INFO_ENV\fP
T}	T{
Object \fBINFO_ENV\fP of type \fI\%Info\fP
T}
_
T{
\fI\%ERRHANDLER_NULL\fP
T}	T{
Object \fBERRHANDLER_NULL\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%ERRORS_RETURN\fP
T}	T{
Object \fBERRORS_RETURN\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%ERRORS_ARE_FATAL\fP
T}	T{
Object \fBERRORS_ARE_FATAL\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%COMM_NULL\fP
T}	T{
Object \fBCOMM_NULL\fP of type \fI\%Comm\fP
T}
_
T{
\fI\%COMM_SELF\fP
T}	T{
Object \fBCOMM_SELF\fP of type \fI\%Intracomm\fP
T}
_
T{
\fI\%COMM_WORLD\fP
T}	T{
Object \fBCOMM_WORLD\fP of type \fI\%Intracomm\fP
T}
_
T{
\fI\%WIN_NULL\fP
T}	T{
Object \fBWIN_NULL\fP of type \fI\%Win\fP
T}
_
T{
\fI\%FILE_NULL\fP
T}	T{
Object \fBFILE_NULL\fP of type \fI\%File\fP
T}
_
T{
\fI\%pickle\fP
T}	T{
Object \fBpickle\fP of type \fI\%Pickle\fP
T}
_
.TE
.SH MPI4PY.TYPING
.sp
Added in version 4.0.0.

.sp
This module provides \X'tty: link https://docs.python.org/3/glossary.html#term-type-alias'\fI\%type aliases\fP\X'tty: link' used to add
\X'tty: link https://docs.python.org/3/glossary.html#term-type-hint'\fI\%type hints\fP\X'tty: link' to the various functions and methods
within the \fI\%MPI\fP module.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B Module \X'tty: link https://docs.python.org/3/library/typing.html#module-typing'\fI\%typing\fP\X'tty: link'
Documentation of the \X'tty: link https://docs.python.org/3/library/typing.html#module-typing'\fI\%typing\fP\X'tty: link' standard module.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Types Summary
.TS
center;
|l|l|.
_
T{
\fI\%SupportsBuffer\fP
T}	T{
Python buffer protocol.
T}
_
T{
\fI\%SupportsDLPack\fP
T}	T{
DLPack data interchange protocol.
T}
_
T{
\fI\%SupportsCAI\fP
T}	T{
CUDA Array Interface (CAI) protocol.
T}
_
T{
\fI\%Buffer\fP
T}	T{
Buffer\-like object.
T}
_
T{
\fI\%Bottom\fP
T}	T{
Start of the address range.
T}
_
T{
\fI\%InPlace\fP
T}	T{
In\-place buffer argument.
T}
_
T{
\fI\%Aint\fP
T}	T{
Address\-sized integral type.
T}
_
T{
\fI\%Count\fP
T}	T{
Integral type for counts.
T}
_
T{
\fI\%Displ\fP
T}	T{
Integral type for displacements.
T}
_
T{
\fI\%Offset\fP
T}	T{
Integral type for offsets.
T}
_
T{
\fI\%TypeSpec\fP
T}	T{
Datatype specification.
T}
_
T{
\fI\%BufSpec\fP
T}	T{
Buffer specification.
T}
_
T{
\fI\%BufSpecB\fP
T}	T{
Buffer specification (block).
T}
_
T{
\fI\%BufSpecV\fP
T}	T{
Buffer specification (vector).
T}
_
T{
\fI\%BufSpecW\fP
T}	T{
Buffer specification (generalized).
T}
_
T{
\fI\%TargetSpec\fP
T}	T{
Target specification.
T}
_
.TE
.sp
Types Documentation
.INDENT 0.0
.TP
.B mpi4py.typing.SupportsBuffer = <class \(aqmpi4py.typing.SupportsBuffer\(aq>
Python buffer protocol.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\X'tty: link https://docs.python.org/3/c-api/buffer.html#bufferobjects'\fI\%Buffer Protocol\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.SupportsDLPack = <class \(aqmpi4py.typing.SupportsDLPack\(aq>
DLPack data interchange protocol.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\X'tty: link https://dmlc.github.io/dlpack/latest/python_spec.html#python-spec'\fI\%Python Specification for DLPack\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.SupportsCAI = <class \(aqmpi4py.typing.SupportsCAI\(aq>
CUDA Array Interface (CAI) protocol.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\X'tty: link https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html#cuda-array-interface'\fI\%CUDA Array Interface (Version 3)\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Buffer
Buffer\-like object.
.sp
alias of \fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Bottom
Start of the address range.
.sp
alias of \fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.InPlace
In\-place buffer argument.
.sp
alias of \fI\%InPlaceType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Aint = <class \(aqnumbers.Integral\(aq>
Address\-sized integral type.
.sp
alias of \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%numbers.Integral\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Count = <class \(aqnumbers.Integral\(aq>
Integral type for counts.
.sp
alias of \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%numbers.Integral\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Displ = <class \(aqnumbers.Integral\(aq>
Integral type for displacements.
.sp
alias of \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%numbers.Integral\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.Offset = <class \(aqnumbers.Integral\(aq>
Integral type for offsets.
.sp
alias of \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%numbers.Integral\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.TypeSpec
Datatype specification.
.sp
alias of \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.BufSpec
Buffer specification.
.INDENT 7.0
.IP \(bu 2
\fI\%Buffer\fP
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%Count\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%Count\fP, \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Bottom\fP, \fI\%Count\fP, \fI\%Datatype\fP]
.UNINDENT
.sp
alias of \fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \fI\%Datatype\fP] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.List'\fI\%List\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.BufSpecB
Buffer specification (block).
.INDENT 7.0
.IP \(bu 2
\fI\%Buffer\fP
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%Count\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%Count\fP, \fI\%TypeSpec\fP]
.UNINDENT
.sp
alias of \fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.List'\fI\%List\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.BufSpecV
Buffer specification (vector).
.INDENT 7.0
.IP \(bu 2
\fI\%Buffer\fP
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Sequence[\fI\%Count\fP]]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Tuple[Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP]]]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Sequence[\fI\%Count\fP], \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Tuple[Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP]], \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP], \fI\%TypeSpec\fP]
.IP \(bu 2
Tuple[\fI\%Bottom\fP, Tuple[Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP]], \fI\%Datatype\fP]
.IP \(bu 2
Tuple[\fI\%Bottom\fP, Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP], \fI\%Datatype\fP]
.UNINDENT
.sp
alias of \fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']], \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']], \fI\%Datatype\fP] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \fI\%Datatype\fP] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.List'\fI\%List\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.BufSpecW
Buffer specification (generalized).
.INDENT 7.0
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Sequence[\fI\%Datatype\fP]]
.IP \(bu 2
Tuple[\fI\%Buffer\fP,         Tuple[Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP]], Sequence[\fI\%Datatype\fP]]
.IP \(bu 2
Tuple[\fI\%Buffer\fP, Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP], Sequence[\fI\%Datatype\fP]]
.IP \(bu 2
Tuple[\fI\%Bottom\fP,         Tuple[Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP]], Sequence[\fI\%Datatype\fP]]
.IP \(bu 2
Tuple[\fI\%Bottom\fP, Sequence[\fI\%Count\fP], Sequence[\fI\%Displ\fP], Sequence[\fI\%Datatype\fP]]
.UNINDENT
.sp
alias of \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\fI\%Datatype\fP]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\fI\%Datatype\fP]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%SupportsBuffer\fP | \fI\%SupportsDLPack\fP | \fI\%SupportsCAI\fP, \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\fI\%Datatype\fP]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link']], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\fI\%Datatype\fP]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\fI\%BottomType\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'[\fI\%Datatype\fP]] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.List'\fI\%List\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.TargetSpec
Target specification.
.INDENT 7.0
.IP \(bu 2
\fI\%Displ\fP
.IP \(bu 2
Tuple[()]
.IP \(bu 2
Tuple[\fI\%Displ\fP]
.IP \(bu 2
Tuple[\fI\%Displ\fP, \fI\%Count\fP]
.IP \(bu 2
Tuple[\fI\%Displ\fP, \fI\%Count\fP, \fI\%Datatype\fP]
.UNINDENT
.sp
alias of \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Tuple'\fI\%Tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/numbers.html#numbers.Integral'\fI\%Integral\fP\X'tty: link', \fI\%Datatype\fP | \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/typing.html#typing.List'\fI\%List\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.S = TypeVar(\(dqS\(dq)
Invariant \X'tty: link https://docs.python.org/3/library/typing.html#typing.TypeVar'\fI\%TypeVar\fP\X'tty: link'\&.
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.T = TypeVar(\(dqT\(dq)
Invariant \X'tty: link https://docs.python.org/3/library/typing.html#typing.TypeVar'\fI\%TypeVar\fP\X'tty: link'\&.
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.U = TypeVar(\(dqU\(dq)
Invariant \X'tty: link https://docs.python.org/3/library/typing.html#typing.TypeVar'\fI\%TypeVar\fP\X'tty: link'\&.
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.typing.V = TypeVar(\(dqV\(dq)
Invariant \X'tty: link https://docs.python.org/3/library/typing.html#typing.TypeVar'\fI\%TypeVar\fP\X'tty: link'\&.
.UNINDENT
.SH MPI4PY.FUTURES
.sp
Added in version 3.0.0.

.sp
This package provides a high\-level interface for asynchronously executing
callables on a pool of worker processes using MPI for inter\-process
communication.
.sp
The \fI\%mpi4py.futures\fP package is based on \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures'\fI\%concurrent.futures\fP\X'tty: link' from
the Python standard library. More precisely, \fI\%mpi4py.futures\fP provides the
\fI\%MPIPoolExecutor\fP class as a concrete implementation of the abstract
class \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor'\fI\%Executor\fP\X'tty: link'\&.  The
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit'\fI\%submit()\fP\X'tty: link' interface schedules a callable to
be executed asynchronously and returns a \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link'
object representing the execution of the callable.
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' instances can be queried for the call
result or exception. Sets of \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' instances can
be passed to the \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait'\fI\%wait()\fP\X'tty: link' and
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed'\fI\%as_completed()\fP\X'tty: link' functions.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B Module \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures'\fI\%concurrent.futures\fP\X'tty: link'
Documentation of the \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures'\fI\%concurrent.futures\fP\X'tty: link' standard module.
.UNINDENT
.UNINDENT
.UNINDENT
.SS MPIPoolExecutor
.sp
The \fI\%MPIPoolExecutor\fP class uses a pool of MPI processes to execute
calls asynchronously. By performing computations in separate processes, it
allows to side\-step the \X'tty: link https://docs.python.org/3/glossary.html#term-global-interpreter-lock'\fI\%global interpreter lock\fP\X'tty: link' but also means that
only picklable objects can be executed and returned. The \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' module
must be importable by worker processes, thus \fI\%MPIPoolExecutor\fP instances
may not work in the interactive interpreter.
.sp
\fI\%MPIPoolExecutor\fP takes advantage of the dynamic process management
features introduced in the MPI\-2 standard. In particular, the
\fI\%MPI.Intracomm.Spawn\fP method of \fI\%MPI.COMM_SELF\fP is used in the master (or
parent) process to spawn new worker (or child) processes running a Python
interpreter. The master process uses a separate thread (one for each
\fI\%MPIPoolExecutor\fP instance) to communicate back and forth with the
workers.  The worker processes serve the execution of tasks in the main (and
only) thread until they are signaled for completion.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The worker processes must import the main script in order to \fIunpickle\fP any
callable defined in the \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' module and submitted from the master
process. Furthermore, the callables may need access to other global
variables. At the worker processes, \fI\%mpi4py.futures\fP executes the main
script code (using the \X'tty: link https://docs.python.org/3/library/runpy.html#module-runpy'\fI\%runpy\fP\X'tty: link' module) under the \fB__worker__\fP
namespace to define the \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' module. The \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' and
\fB__worker__\fP modules are added to \X'tty: link https://docs.python.org/3/library/sys.html#sys.modules'\fI\%sys.modules\fP\X'tty: link' (both at the
master and worker processes) to ensure proper \fIpickling\fP and \fIunpickling\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
During the initial import phase at the workers, the main script cannot
create and use new \fI\%MPIPoolExecutor\fP instances. Otherwise, each
worker would attempt to spawn a new pool of workers, leading to infinite
recursion. \fI\%mpi4py.futures\fP detects such recursive attempts to spawn
new workers and aborts the MPI execution environment. As the main script
code is run under the \fB__worker__\fP namespace, the easiest way to avoid
spawn recursion is using the idiom \fBif __name__ == \(aq__main__\(aq: ...\fP in
the main script.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.futures.MPIPoolExecutor(max_workers=None, initializer=None, initargs=(), **kwargs)
An \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor'\fI\%Executor\fP\X'tty: link' subclass that executes calls
asynchronously using a pool of at most \fImax_workers\fP processes.  If
\fImax_workers\fP is \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' or not given, its value is determined from the
\fI\%MPI4PY_FUTURES_MAX_WORKERS\fP environment variable if set, or the MPI
universe size if set, otherwise a single worker process is spawned.  If
\fImax_workers\fP is lower than or equal to \fB0\fP, then a \X'tty: link https://docs.python.org/3/library/exceptions.html#ValueError'\fI\%ValueError\fP\X'tty: link' will
be raised.
.sp
\fIinitializer\fP is an optional callable that is called at the start of each
worker process before executing any tasks; \fIinitargs\fP is a tuple of
arguments passed to the initializer. If \fIinitializer\fP raises an exception,
all pending tasks and any attempt to submit new tasks to the pool will raise
a \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.BrokenExecutor'\fI\%BrokenExecutor\fP\X'tty: link' exception.
.sp
Other parameters:
.INDENT 7.0
.IP \(bu 2
\fIpython_exe\fP: Path to the Python interpreter executable used to spawn
worker processes, otherwise \X'tty: link https://docs.python.org/3/library/sys.html#sys.executable'\fI\%sys.executable\fP\X'tty: link' is used.
.IP \(bu 2
\fIpython_args\fP: \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link' or iterable with additional command line
flags to pass to the Python executable. Command line flags determined from
inspection of \X'tty: link https://docs.python.org/3/library/sys.html#sys.flags'\fI\%sys.flags\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/sys.html#sys.warnoptions'\fI\%sys.warnoptions\fP\X'tty: link' and
\X'tty: link https://docs.python.org/3/library/sys.html#sys._xoptions'\fI\%sys._xoptions\fP\X'tty: link' in are passed unconditionally.
.IP \(bu 2
\fImpi_info\fP: \X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link' or iterable yielding \fB(key, value)\fP pairs.
These \fB(key, value)\fP pairs are passed (through an \fI\%MPI.Info\fP object) to
the \fI\%MPI.Intracomm.Spawn\fP call used to spawn worker processes. This
mechanism allows telling the MPI runtime system where and how to start the
processes. Check the documentation of the backend MPI implementation about
the set of keys it interprets and the corresponding format for values.
.IP \(bu 2
\fIglobals\fP: \X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link' or iterable yielding \fB(name, value)\fP pairs to
initialize the main module namespace in worker processes.
.IP \(bu 2
\fImain\fP: If set to \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link', do not import the \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' module in
worker processes. Setting \fImain\fP to \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' prevents worker processes
from accessing definitions in the parent \X'tty: link https://docs.python.org/3/library/__main__.html#module-__main__'\fI\%__main__\fP\X'tty: link' namespace.
.IP \(bu 2
\fIpath\fP: \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link' or iterable with paths to append to \X'tty: link https://docs.python.org/3/library/sys.html#sys.path'\fI\%sys.path\fP\X'tty: link'
in worker processes to extend the \X'tty: link https://docs.python.org/3/tutorial/modules.html#tut-searchpath'\fI\%module search path\fP\X'tty: link'\&.
.IP \(bu 2
\fIwdir\fP: Path to set the current working directory in worker processes
using \X'tty: link https://docs.python.org/3/library/os.html#os.chdir'\fI\%os.chdir()\fP\X'tty: link'\&. The initial working directory is set by the MPI
implementation. Quality MPI implementations should honor a \fBwdir\fP info
key passed through \fImpi_info\fP, although such feature is not mandatory.
.IP \(bu 2
\fIenv\fP: \X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link' or iterable yielding \fB(name, value)\fP pairs with
environment variables to update \X'tty: link https://docs.python.org/3/library/os.html#os.environ'\fI\%os.environ\fP\X'tty: link' in worker processes.
The initial environment is set by the MPI implementation. MPI
implementations may allow setting the initial environment through
\fImpi_info\fP, however such feature is not required nor recommended by the
MPI standard.
.IP \(bu 2
\fIuse_pkl5\fP: If set to \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', use \fBpickle5\fP with out\-of\-band buffers
for interprocess communication. If \fIuse_pkl5\fP is set to \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' or not
given, its value is determined from the \fI\%MPI4PY_FUTURES_USE_PKL5\fP
environment variable. Using \fBpickle5\fP with out\-of\-band buffers may
benefit applications dealing with large buffer\-like objects like NumPy
arrays. See \fI\%mpi4py.util.pkl5\fP for additional information.
.IP \(bu 2
\fIbackoff\fP: \X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link' value specifying the maximum number of seconds a
worker thread or process suspends execution with \X'tty: link https://docs.python.org/3/library/time.html#time.sleep'\fI\%time.sleep()\fP\X'tty: link'
while idle\-waiting. If not set, its value is determined from the
\fI\%MPI4PY_FUTURES_BACKOFF\fP environment variable if set, otherwise
the default value of 0.001 seconds is used. Lower values will reduce
latency and increase execution throughput for very short\-lived tasks,
albeit at the expense of spinning CPU cores and increased energy
consumption.
.UNINDENT
.INDENT 7.0
.TP
.B submit(func, *args, **kwargs)
Schedule the callable, \fIfunc\fP, to be executed as \fBfunc(*args,
**kwargs)\fP and returns a \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' object
representing the execution of the callable.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
executor = MPIPoolExecutor(max_workers=1)
future = executor.submit(pow, 321, 1234)
print(future.result())
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B map(func, *iterables, timeout=None, chunksize=1, **kwargs)
Equivalent to \X'tty: link https://docs.python.org/3/library/functions.html#map'\fI\%map(func, *iterables)\fP\X'tty: link' except \fIfunc\fP is
executed asynchronously and several calls to \fIfunc\fP may be made
concurrently, out\-of\-order, in separate processes.  The returned iterator
raises a \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.TimeoutError'\fI\%TimeoutError\fP\X'tty: link' if
\X'tty: link https://docs.python.org/3/library/stdtypes.html#iterator.__next__'\fI\%__next__()\fP\X'tty: link' is called and the result isn\(aqt available after
\fItimeout\fP seconds from the original call to \fI\%map()\fP\&.
\fItimeout\fP can be an int or a float.  If \fItimeout\fP is not specified or
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', there is no limit to the wait time.  If a call raises an
exception, then that exception will be raised when its value is retrieved
from the iterator. This method chops \fIiterables\fP into a number of chunks
which it submits to the pool as separate tasks. The (approximate) size of
these chunks can be specified by setting \fIchunksize\fP to a positive
integer. For very long iterables, using a large value for \fIchunksize\fP can
significantly improve performance compared to the default size of one. By
default, the returned iterator yields results in\-order, waiting for
successive tasks to complete . This behavior can be changed by passing
the keyword argument \fIunordered\fP as \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', then the result iterator
will yield a result as soon as any of the tasks complete.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
executor = MPIPoolExecutor(max_workers=3)
for result in executor.map(pow, [2]*32, range(32)):
    print(result)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B starmap(func, iterable, timeout=None, chunksize=1, **kwargs)
Equivalent to \X'tty: link https://docs.python.org/3/library/itertools.html#itertools.starmap'\fI\%itertools.starmap(func, iterable)\fP\X'tty: link'\&. Used instead of \fI\%map()\fP when
argument parameters are already grouped in tuples from a single iterable
(the data has been \(dqpre\-zipped\(dq). \fI\%map(func, *iterable)\fP is
equivalent to \fI\%starmap(func, zip(*iterable))\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
executor = MPIPoolExecutor(max_workers=3)
iterable = ((2, n) for n in range(32))
for result in executor.starmap(pow, iterable):
    print(result)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B shutdown(wait=True, cancel_futures=False)
Signal the executor that it should free any resources that it is using
when the currently pending futures are done executing.  Calls to
\fI\%submit()\fP and \fI\%map()\fP made
after \fI\%shutdown()\fP will raise \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'\&.
.sp
If \fIwait\fP is \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link' then this method will not return until all the
pending futures are done executing and the resources associated with the
executor have been freed.  If \fIwait\fP is \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' then this method will
return immediately and the resources associated with the executor will be
freed when all pending futures are done executing.  Regardless of the
value of \fIwait\fP, the entire Python program will not exit until all
pending futures are done executing.
.sp
If \fIcancel_futures\fP is \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', this method will cancel all pending
futures that the executor has not started running. Any futures that
are completed or running won\(aqt be cancelled, regardless of the value
of \fIcancel_futures\fP\&.
.sp
You can avoid having to call this method explicitly if you use the
\X'tty: link https://docs.python.org/3/reference/compound_stmts.html#with'\fI\%with\fP\X'tty: link' statement, which will shutdown the executor instance
(waiting as if \fI\%shutdown()\fP were called with \fIwait\fP
set to \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link').
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
import time
with MPIPoolExecutor(max_workers=1) as executor:
    future = executor.submit(time.sleep, 2)
assert future.done()
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bootup(wait=True)
Signal the executor that it should allocate eagerly any required
resources (in particular, MPI worker processes). If \fIwait\fP is \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link',
then \fI\%bootup()\fP will not return until the executor
resources are ready to process submissions.  Resources are automatically
allocated in the first call to \fI\%submit()\fP, thus
calling \fI\%bootup()\fP explicitly is seldom needed.
.UNINDENT
.INDENT 7.0
.TP
.B num_workers
Number or worker processes in the pool.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_FUTURES_MAX_WORKERS
If the \fImax_workers\fP parameter to \fI\%MPIPoolExecutor\fP is \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' or not
given, the \fI\%MPI4PY_FUTURES_MAX_WORKERS\fP environment variable
provides a fallback value for the maximum number of MPI worker processes to
spawn.
.sp
Added in version 3.1.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_FUTURES_USE_PKL5
If the \fIuse_pkl5\fP keyword argument to \fI\%MPIPoolExecutor\fP is \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' or
not given, the \fI\%MPI4PY_FUTURES_USE_PKL5\fP environment variable
provides a fallback value for whether the executor should use \fBpickle5\fP
with out\-of\-band buffers for interprocess communication. Accepted values are
\fB0\fP and \fB1\fP (interpreted as \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' and \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', respectively), and
strings specifying a \X'tty: link https://yaml.org/type/bool.html'\fI\%YAML boolean\fP\X'tty: link' value (case\-insensitive). Using
\fBpickle5\fP with out\-of\-band buffers may benefit applications dealing
with large buffer\-like objects like NumPy arrays. See
\fI\%mpi4py.util.pkl5\fP for additional information.
.sp
Added in version 4.0.0.

.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_FUTURES_BACKOFF
If the \fIbackoff\fP keyword argument to \fI\%MPIPoolExecutor\fP is not given,
the \fI\%MPI4PY_FUTURES_BACKOFF\fP environment variable can be set to a
\X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link' value specifying the maximum number of seconds a worker
thread or process suspends execution with \X'tty: link https://docs.python.org/3/library/time.html#time.sleep'\fI\%time.sleep()\fP\X'tty: link' while
idle\-waiting. If not set, the default backoff value is 0.001 seconds. Lower
values will reduce latency and increase execution throughput for very
short\-lived tasks, albeit at the expense of spinning CPU cores and increased
energy consumption.
.sp
Added in version 4.0.0.

.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
As the master process uses a separate thread to perform MPI communication
with the workers, the backend MPI implementation should provide support for
\fI\%MPI.THREAD_MULTIPLE\fP\&. However, some popular MPI implementations do not
support yet concurrent MPI calls from multiple threads. Additionally, users
may decide to initialize MPI with a lower level of thread support. If the
level of thread support in the backend MPI is less than
\fI\%MPI.THREAD_MULTIPLE\fP, \fI\%mpi4py.futures\fP will use a global lock to
serialize MPI calls. If the level of thread support is less than
\fI\%MPI.THREAD_SERIALIZED\fP, \fI\%mpi4py.futures\fP will emit a
\X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeWarning'\fI\%RuntimeWarning\fP\X'tty: link'\&.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If the level of thread support in the backend MPI is less than
\fI\%MPI.THREAD_SERIALIZED\fP (i.e, it is either \fI\%MPI.THREAD_SINGLE\fP or
\fI\%MPI.THREAD_FUNNELED\fP), in theory \fI\%mpi4py.futures\fP cannot be
used. Rather than raising an exception, \fI\%mpi4py.futures\fP emits a
warning and takes a \(dqcross\-fingers\(dq attitude to continue execution in the
hope that serializing MPI calls with a global lock will actually work.
.UNINDENT
.UNINDENT
.SS MPICommExecutor
.sp
Legacy MPI\-1 implementations (as well as some vendor MPI\-2 implementations) do
not support the dynamic process management features introduced in the MPI\-2
standard. Additionally, job schedulers and batch systems in supercomputing
facilities may pose additional complications to applications using the
\fBMPI_Comm_spawn()\fP routine.
.sp
With these issues in mind, \fI\%mpi4py.futures\fP supports an additional, more
traditional, SPMD\-like usage pattern requiring MPI\-1 calls only. Python
applications are started the usual way, e.g., using the \fBmpiexec\fP
command. Python code should make a collective call to the
\fI\%MPICommExecutor\fP context manager to partition the set of MPI processes
within a MPI communicator in one master processes and many workers
processes. The master process gets access to an \fI\%MPIPoolExecutor\fP
instance to submit tasks. Meanwhile, the worker process follow a different
execution path and team\-up to execute the tasks submitted from the master.
.sp
Besides alleviating the lack of dynamic process management features in legacy
MPI\-1 or partial MPI\-2 implementations, the \fI\%MPICommExecutor\fP context
manager may be useful in classic MPI\-based Python applications willing to take
advantage of the simple, task\-based, master/worker approach available in the
\fI\%mpi4py.futures\fP package.
.INDENT 0.0
.TP
.B class mpi4py.futures.MPICommExecutor(comm=None, root=0)
Context manager for \fI\%MPIPoolExecutor\fP\&. This context manager splits a
MPI (intra)communicator \fIcomm\fP (defaults to \fI\%MPI.COMM_WORLD\fP if not provided
or \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link') in two disjoint sets: a single master process (with rank \fIroot\fP
in \fIcomm\fP) and the remaining worker processes. These sets are then connected
through an intercommunicator.  The target of the \X'tty: link https://docs.python.org/3/reference/compound_stmts.html#with'\fI\%with\fP\X'tty: link' statement
is assigned either an \fI\%MPIPoolExecutor\fP instance (at the master) or
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' (at the workers).
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
from mpi4py.futures import MPICommExecutor

with MPICommExecutor(MPI.COMM_WORLD, root=0) as executor:
    if executor is not None:
       future = executor.submit(abs, \-42)
       assert future.result() == 42
       answer = set(executor.map(abs, [\-42, 42]))
       assert answer == {42}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If \fI\%MPICommExecutor\fP is passed a communicator of size one (e.g.,
\fI\%MPI.COMM_SELF\fP), then the executor instance assigned to the target of the
\X'tty: link https://docs.python.org/3/reference/compound_stmts.html#with'\fI\%with\fP\X'tty: link' statement will execute all submitted tasks in a single
worker thread, thus ensuring that task execution still progress
asynchronously. However, the \X'tty: link https://docs.python.org/3/glossary.html#term-GIL'\fI\%GIL\fP\X'tty: link' will prevent the main and worker
threads from running concurrently in multicore processors. Moreover, the
thread context switching may harm noticeably the performance of CPU\-bound
tasks. In case of I/O\-bound tasks, the \X'tty: link https://docs.python.org/3/glossary.html#term-GIL'\fI\%GIL\fP\X'tty: link' is not usually an issue,
however, as a single worker thread is used, it progress one task at a
time. We advice against using \fI\%MPICommExecutor\fP with communicators of
size one and suggest refactoring your code to use instead a
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor'\fI\%ThreadPoolExecutor\fP\X'tty: link'\&.
.UNINDENT
.UNINDENT
.SS Command line
.sp
Recalling the issues related to the lack of support for dynamic process
management features in MPI implementations, \fI\%mpi4py.futures\fP supports an
alternative usage pattern where Python code (either from scripts, modules, or
zip files) is run under command line control of the \fI\%mpi4py.futures\fP
package by passing \fB\-m mpi4py.futures\fP to the \fBpython\fP
executable.  The \fBmpi4py.futures\fP invocation should be passed a \fIpyfile\fP path
to a script (or a zipfile/directory containing a \fB__main__.py\fP file).
Additionally, \fBmpi4py.futures\fP accepts \fB\-m \fP\fImod\fP to execute a module
named \fImod\fP, \fB\-c \fP\fIcmd\fP to execute a command string \fIcmd\fP, or even
\fB\-\fP to read commands from standard input (\X'tty: link https://docs.python.org/3/library/sys.html#sys.stdin'\fI\%sys.stdin\fP\X'tty: link').
Summarizing, \fBmpi4py.futures\fP can be invoked in the following ways:
.INDENT 0.0
.IP \(bu 2
\fB$ mpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py.futures \fP\fIpyfile\fP\fB [arg] ...\fP
.IP \(bu 2
\fB$ mpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py.futures \-m \fP\fImod\fP\fB [arg] ...\fP
.IP \(bu 2
\fB$ mpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py.futures \-c \fP\fIcmd\fP\fB [arg] ...\fP
.IP \(bu 2
\fB$ mpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py.futures \- [arg] ...\fP
.UNINDENT
.sp
Before starting the main script execution, \fI\%mpi4py.futures\fP splits
\fI\%MPI.COMM_WORLD\fP in one master (the process with rank 0 in \fI\%MPI.COMM_WORLD\fP) and
\fInumprocs \- 1\fP workers and connects them through an MPI intercommunicator.
Afterwards, the master process proceeds with the execution of the user script
code, which eventually creates \fI\%MPIPoolExecutor\fP instances to submit
tasks. Meanwhile, the worker processes follow a different execution path to
serve the master.  Upon successful termination of the main script at the master,
the entire MPI execution environment exists gracefully. In case of any unhandled
exception in the main script, the master process calls
\fBMPI.COMM_WORLD.Abort(1)\fP to prevent deadlocks and force termination of entire
MPI execution environment.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Running scripts under command line control of \fI\%mpi4py.futures\fP is quite
similar to executing a single\-process application that spawn additional
workers as required. However, there is a very important difference users
should be aware of. All \fI\%MPIPoolExecutor\fP instances created at the
master will share the pool of workers. Tasks submitted at the master from
many different executors will be scheduled for execution in random order as
soon as a worker is idle. Any executor can easily starve all the workers
(e.g., by calling \fI\%MPIPoolExecutor.map()\fP with long iterables). If that
ever happens, submissions from other executors will not be serviced until
free workers are available.
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \X'tty: link https://docs.python.org/3/using/cmdline.html#using-on-cmdline'\fI\%Command line\fP\X'tty: link'
Documentation on Python command line interface.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Parallel tasks
.sp
The \fI\%mpi4py.futures\fP package favors an embarrassingly parallel execution
model involving a series of sequential tasks independent of each other and
executed asynchronously. Albeit unnatural, \fI\%MPIPoolExecutor\fP can still be
used for handling workloads involving parallel tasks, where worker processes
communicate and coordinate each other via MPI.
.INDENT 0.0
.TP
.B mpi4py.futures.get_comm_workers()
Access an intracommunicator grouping MPI worker processes.
.UNINDENT
.sp
Executing parallel tasks with \fI\%mpi4py.futures\fP requires following some
rules, cf. highlighted lines in example \fI\%cpi.py\fP :
.INDENT 0.0
.IP \(bu 2
Use \fI\%MPIPoolExecutor.num_workers\fP to determine the number of worker
processes in the executor and \fBsubmit exactly one callable per worker
process\fP using the \fI\%MPIPoolExecutor.submit()\fP method.
.IP \(bu 2
The submitted callable must use \fI\%get_comm_workers()\fP to access an
intracommunicator grouping MPI worker processes. Afterwards, it is highly
recommended calling the \fI\%Barrier()\fP method on the
communicator. The barrier synchronization ensures that every worker process
is executing the submitted callable exactly once. Afterwards, the parallel
task can safely perform any kind of point\-to\-point or collective operation
using the returned communicator.
.IP \(bu 2
The \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' instances returned by
\fI\%MPIPoolExecutor.submit()\fP should be collected in a sequence.
Use \X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait'\fI\%wait()\fP\X'tty: link' with the sequence of
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' instances to ensure logical completion of
the parallel task.
.UNINDENT
.SS Utilities
.sp
The \fI\%mpi4py.futures\fP package provides additional utilities for handling
\X'tty: link https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future'\fI\%Future\fP\X'tty: link' instances.
.INDENT 0.0
.TP
.B mpi4py.futures.collect(fs)
Gather a collection of futures in a new future.
.INDENT 7.0
.TP
.B Parameters
\fBfs\fP \-\- Collection of futures.
.TP
.B Returns
New future producing as result a list with results from \fIfs\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.futures.compose(future, resulthook=None, excepthook=None)
Compose the completion of a future with result and exception handlers.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfuture\fP \-\- Input future instance.
.IP \(bu 2
\fBresulthook\fP \-\- Function to be called once the input future completes with
success. Once the input future finish running with success, its
result value is the input argument for \fIresulthook\fP\&. The result of
\fIresulthook\fP is set as the result of the output future.
If \fIresulthook\fP is \fBNone\fP, the output future is completed
directly with the result of the input future.
.IP \(bu 2
\fBexcepthook\fP \-\- Function to be called once the input future completes with
failure. Once the input future finish running with failure, its
exception value is the input argument for \fIexcepthook\fP\&.  If
\fIexcepthook\fP returns an \X'tty: link https://docs.python.org/3/library/exceptions.html#Exception'\fI\%Exception\fP\X'tty: link' instance, it is set as
the exception of the output future.  Otherwise, the result of
\fIexcepthook\fP is set as the result of the output future.  If
\fIexcepthook\fP is \fBNone\fP, the output future is set as failed with
the exception from the input future.
.UNINDENT
.TP
.B Returns
Output future instance to be completed once the input future is
completed and either \fIresulthook\fP or \fIexcepthook\fP finish executing.
.UNINDENT
.UNINDENT
.SS Examples
.SS Computing the Julia set
.sp
The following \fI\%julia.py\fP script computes the \X'tty: link https://en.wikipedia.org/wiki/Julia_set'\fI\%Julia set\fP\X'tty: link' and dumps an
image to disk in binary \X'tty: link https://netpbm.sourceforge.net/doc/pgm.html'\fI\%PGM\fP\X'tty: link' format. The code starts by importing
\fI\%MPIPoolExecutor\fP from the \fI\%mpi4py.futures\fP package. Next, some
global constants and functions implement the computation of the Julia set. The
computations are protected with the standard \fBif __name__ == \(aq__main__\(aq:
\&...\fP idiom.  The image is computed by whole scanlines submitting all these
tasks at once using the \fI\%map\fP method. The result
iterator yields scanlines in\-order as the tasks complete. Finally, each
scanline is dumped to disk.
.sp
\fBjulia.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py.futures import MPIPoolExecutor

x0, x1, w = \-2.0, +2.0, 640*2
y0, y1, h = \-1.5, +1.5, 480*2
dx = (x1 \- x0) / w
dy = (y1 \- y0) / h

c = complex(0, 0.65)

def julia(x, y):
    z = complex(x, y)
    n = 255
    while abs(z) < 3 and n > 1:
        z = z**2 + c
        n \-= 1
    return n

def julia_line(k):
    line = bytearray(w)
    y = y1 \- k * dy
    for j in range(w):
        x = x0 + j * dx
        line[j] = julia(x, y)
    return line

if __name__ == \(aq__main__\(aq:

    with MPIPoolExecutor() as executor:
        image = executor.map(julia_line, range(h))
        with open(\(aqjulia.pgm\(aq, \(aqwb\(aq) as f:
            f.write(b\(aqP5 %d %d %d\en\(aq % (w, h, 255))
            for line in image:
                f.write(line)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The recommended way to execute the script is by using the \fBmpiexec\fP
command specifying one MPI process (master) and (optional but recommended) the
desired MPI universe size, which determines the number of additional
dynamically spawned processes (workers). The MPI universe size is provided
either by a batch system or set by the user via command\-line arguments to
\fBmpiexec\fP or environment variables. Below we provide examples for
MPICH and Open MPI implementations [1]\&. In all of these examples, the
\fBmpiexec\fP command launches a single master process running the Python
interpreter and executing the main script. When required, \fI\%mpi4py.futures\fP
spawns the pool of 16 worker processes. The master submits tasks to the workers
and waits for the results. The workers receive incoming tasks, execute them,
and send back the results to the master.
.sp
When using MPICH implementation or its derivatives based on the Hydra process
manager, users can set the MPI universe size via the \fB\-usize\fP argument to
\fBmpiexec\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 1 \-usize 17 python julia.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or, alternatively, by setting the \fBMPIEXEC_UNIVERSE_SIZE\fP environment
variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ env MPIEXEC_UNIVERSE_SIZE=17 mpiexec \-n 1 python julia.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the Open MPI implementation, the MPI universe size can be set via the
\fB\-host\fP argument to \fBmpiexec\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 1 \-host localhost:17 python julia.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Another way to specify the number of workers is to use the
\fI\%mpi4py.futures\fP\-specific environment variable
\fI\%MPI4PY_FUTURES_MAX_WORKERS\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ env MPI4PY_FUTURES_MAX_WORKERS=16 mpiexec \-n 1 python julia.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that in this case, the MPI universe size is ignored.
.sp
Alternatively, users may decide to execute the script in a more traditional
way, that is, all the MPI processes are started at once. The user script is run
under command\-line control of \fI\%mpi4py.futures\fP passing the \X'tty: link https://docs.python.org/3/using/cmdline.html#using-on-cmdline'\fI\%\-m\fP\X'tty: link' flag to the \fBpython\fP executable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 17 python \-m mpi4py.futures julia.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As explained previously, the 17 processes are partitioned in one master and 16
workers. The master process executes the main script while the workers execute
the tasks submitted by the master.
.IP [1] 5
When using an MPI implementation other than MPICH or Open MPI, please
check the documentation of the implementation and/or batch
system for the ways to specify the desired MPI universe size.
.SS Computing Pi (parallel task)
.sp
The number \epi can be approximated via numerical integration with the
simple midpoint rule, that is:
.sp
.ce
\epi = \eint_{0}^{1} \efrac{4}{1+x^2} \e,dx \eapprox
\efrac{1}{n} \esum_{i=1}^{n}
\efrac{4}{1 + \eleft[\efrac{1}{n} \eleft(i\-\efrac{1}{2}\eright) \eright]^2} .
.ce 0
.sp
The following \fI\%cpi.py\fP script computes such approximations using
\fI\%mpi4py.futures\fP with a parallel task involving a collective reduction
operation. Highlighted lines correspond to the rules discussed in \fI\%Parallel
tasks\fP\&.
.sp
\fBcpi.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import math
import sys
from mpi4py.futures import MPIPoolExecutor, wait
from mpi4py.futures import get_comm_workers


def compute_pi(n):
    # Access intracommunicator and synchronize
    comm = get_comm_workers()
    comm.Barrier()

    rank = comm.Get_rank()
    size = comm.Get_size()

    # Local computation
    h = 1.0 / n
    s = 0.0
    for i in range(rank + 1, n + 1, size):
        x = h * (i \- 0.5)
        s += 4.0 / (1.0 + x**2)
    pi_partial = s * h

    # Parallel reduce\-to\-all
    pi = comm.allreduce(pi_partial)

    # All workers return the same value
    return pi


if __name__ == \(aq__main__\(aq:
    n = int(sys.argv[1]) if len(sys.argv) > 1 else 256

    with MPIPoolExecutor() as executor:
        # Submit exactly one callable per worker
        P = executor.num_workers
        fs = [executor.submit(compute_pi, n) for _ in range(P)]

        # Wait for all workers to finish
        wait(fs)

        # Get result from the first future object.
        # In this particular example, due to using reduce\-to\-all,
        # all the other future objects hold the same result value.
        pi = fs[0].result()
        print(
            f\(dqpi: {pi:.16f}, error: {abs(pi \- math.pi):.3e}\(dq,
            f\(dq({n:d} intervals, {P:d} workers)\(dq,
        )
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To run in modern MPI\-2 mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ env MPI4PY_FUTURES_MAX_WORKERS=4 mpiexec \-n 1 python cpi.py 128
pi: 3.1415977398528137, error: 5.086e\-06 (128 intervals, 4 workers)

$ env MPI4PY_FUTURES_MAX_WORKERS=8 mpiexec \-n 1 python cpi.py 512
pi: 3.1415929714812316, error: 3.179e\-07 (512 intervals, 8 workers)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To run in legacy MPI\-1 mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 5 python \-m mpi4py.futures cpi.py 128
pi: 3.1415977398528137, error: 5.086e\-06 (128 intervals, 4 workers)

$ mpiexec \-n 9 python \-m mpi4py.futures cpi.py 512
pi: 3.1415929714812316, error: 3.179e\-07 (512 intervals, 8 workers)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Citation
.sp
If \fI\%mpi4py.futures\fP been significant to a project that leads to an
academic publication, please acknowledge our work by citing the following
article \fI\%[mpi4py\-futures]\fP:
.IP [mpi4py-futures] 5
M. Rogowski, S. Aseeri, D. Keyes, and L. Dalcin,
\fImpi4py.futures: MPI\-Based Asynchronous Task Execution for Python\fP,
IEEE Transactions on Parallel and Distributed Systems, 34(2):611\-622, 2023.
\X'tty: link https://doi.org/10.1109/TPDS.2022.3225481'\fI\%https://doi.org/10.1109/TPDS.2022.3225481\fP\X'tty: link'
.SH MPI4PY.UTIL
.sp
Added in version 3.1.0.

.sp
The \fI\%mpi4py.util\fP package collects miscellaneous utilities
within the intersection of Python and MPI.
.SS mpi4py.util.dtlib
.sp
Added in version 3.1.0.

.sp
The \fI\%mpi4py.util.dtlib\fP module provides converter routines between NumPy
and MPI datatypes.
.INDENT 0.0
.TP
.B mpi4py.util.dtlib.from_numpy_dtype(dtype)
Convert NumPy datatype to MPI datatype.
.INDENT 7.0
.TP
.B Parameters
\fBdtype\fP (\X'tty: link https://numpy.org/doc/stable/reference/typing.html#numpy.typing.DTypeLike'\fI\%DTypeLike\fP\X'tty: link') \-\- NumPy dtype\-like object.
.TP
.B Return type
\fI\%Datatype\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mpi4py.util.dtlib.to_numpy_dtype(datatype)
Convert MPI datatype to NumPy datatype.
.INDENT 7.0
.TP
.B Parameters
\fBdatatype\fP (\fI\%Datatype\fP) \-\- MPI datatype.
.TP
.B Return type
\X'tty: link https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype'\fI\%dtype\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.SS mpi4py.util.pkl5
.sp
Added in version 3.1.0.

.sp
\X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link' protocol 5 (see \X'tty: link https://peps.python.org/pep-0574/'\fI\%PEP 574\fP\X'tty: link') introduced support for out\-of\-band
buffers, allowing for more efficient handling of certain object types with
large memory footprints.
.sp
MPI for Python uses the traditional in\-band handling of buffers. This approach
is appropriate for communicating non\-buffer Python objects, or buffer\-like
objects with small memory footprints. For point\-to\-point communication, in\-band
buffer handling allows for the communication of a pickled stream with a single
MPI message, at the expense of additional CPU and memory overhead in the
pickling and unpickling steps.
.sp
The \fI\%mpi4py.util.pkl5\fP module provides communicator wrapper classes
reimplementing pickle\-based point\-to\-point and collective communication methods
using pickle protocol 5. Handling out\-of\-band buffers necessarily involves
multiple MPI messages, thus increasing latency and hurting performance in case
of small size data. However, in case of large size data, the zero\-copy savings
of out\-of\-band buffer handling more than offset the extra latency costs.
Additionally, these wrapper methods overcome the infamous 2 GiB message count
limit (MPI\-1 to MPI\-3).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Support for pickle protocol 5 is available in the \X'tty: link https://docs.python.org/3/library/pickle.html#module-pickle'\fI\%pickle\fP\X'tty: link' module
within the Python standard library since Python 3.8. Previous Python 3
releases can use the \fBpickle5\fP backport, which is available on \X'tty: link https://pypi.org/project/pickle5/'\fI\%PyPI\fP\X'tty: link' and can be installed with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python \-m pip install pickle5
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pkl5.Request
Request.
.sp
Custom request class for nonblocking communications.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%Request\fP is not a subclass of \fI\%mpi4py.MPI.Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a communication request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Free a communication request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cancel()
Cancel a communication request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_status(status=None)
Non\-destructive test for the completion of a request.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B test(status=None)
Test for the completion of a request.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wait(status=None)
Wait for a request to complete.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod get_status_all(requests, statuses=None)
Non\-destructive test for the completion of all requests.
.INDENT 7.0
.TP
.B Classmethod
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod testall(requests, statuses=None)
Test for the completion of all requests.
.INDENT 7.0
.TP
.B Classmethod
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod waitall(requests, statuses=None)
Wait for all requests to complete.
.INDENT 7.0
.TP
.B Classmethod
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pkl5.Message
Message.
.sp
Custom message class for matching probes.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%Message\fP is not a subclass of \fI\%mpi4py.MPI.Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Do nothing.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B recv(status=None)
Blocking receive of matched message.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B irecv()
Nonblocking receive of matched message.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod probe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Classmethod
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod iprobe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Classmethod
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pkl5.Comm
Communicator.
.sp
Base communicator wrapper class.
.INDENT 7.0
.TP
.B send(obj, dest, tag=0)
Blocking send in standard mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bsend(obj, dest, tag=0)
Blocking send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ssend(obj, dest, tag=0)
Blocking send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B isend(obj, dest, tag=0)
Nonblocking send in standard mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ibsend(obj, dest, tag=0)
Nonblocking send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B issend(obj, dest, tag=0)
Nonblocking send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B recv(buf=None, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B irecv(buf=None, source=ANY_SOURCE, tag=ANY_TAG)
Nonblocking receive.
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
This method cannot be supported reliably
and raises \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B sendrecv(sendobj, dest, sendtag=0, recvbuf=None, source=ANY_SOURCE, recvtag=ANY_TAG, status=None)
Send and receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\fIAny\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mprobe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B improbe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bcast(obj, root=0)
Broadcast.
.sp
Added in version 3.1.0.

.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B gather(sendobj, root=0)
Gather.
.sp
Added in version 4.0.0.

.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B scatter(sendobj, root=0)
Scatter.
.sp
Added in version 4.0.0.

.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B allgather(sendobj)
Gather to All.
.sp
Added in version 4.0.0.

.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B alltoall(sendobj)
All to All Scatter/Gather.
.sp
Added in version 4.0.0.

.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pkl5.Intracomm
Intracommunicator.
.sp
Intracommunicator wrapper class.
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pkl5.Intercomm
Intercommunicator.
.sp
Intercommunicator wrapper class.
.UNINDENT
.SS Examples
.sp
\fBtest\-pkl5\-1.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import numpy as np
from mpi4py import MPI
from mpi4py.util import pkl5

comm = pkl5.Intracomm(MPI.COMM_WORLD)  # comm wrapper
size = comm.Get_size()
rank = comm.Get_rank()
dst = (rank + 1) % size
src = (rank \- 1) % size

sobj = np.full(1024**3, rank, dtype=\(aqi4\(aq)  # > 4 GiB
sreq = comm.isend(sobj, dst, tag=42)
robj = comm.recv (None, src, tag=42)
sreq.Free()

assert np.min(robj) == src
assert np.max(robj) == src
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBtest\-pkl5\-2.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import numpy as np
from mpi4py import MPI
from mpi4py.util import pkl5

comm = pkl5.Intracomm(MPI.COMM_WORLD)  # comm wrapper
size = comm.Get_size()
rank = comm.Get_rank()
dst = (rank + 1) % size
src = (rank \- 1) % size

sobj = np.full(1024**3, rank, dtype=\(aqi4\(aq)  # > 4 GiB
sreq = comm.isend(sobj, dst, tag=42)

status = MPI.Status()
rmsg = comm.mprobe(status=status)
assert status.Get_source() == src
assert status.Get_tag() == 42
rreq = rmsg.irecv()
robj = rreq.wait()

sreq.Free()
assert np.max(robj) == src
assert np.min(robj) == src
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mpi4py.util.pool
.sp
Added in version 4.0.0.

.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
This module intends to be a drop\-in replacement for the
\X'tty: link https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool'\fI\%multiprocessing.pool\fP\X'tty: link' interface from the Python standard library.
The \fI\%Pool\fP class exposed here is implemented as a
thin wrapper around \fI\%MPIPoolExecutor\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fI\%mpi4py.futures\fP package offers a higher level interface
for asynchronously pushing tasks to MPI worker process, allowing
for a clear separation between submitting tasks and waiting for the
results.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pool.Pool
Pool using MPI processes as workers.
.INDENT 7.0
.TP
.B __init__(processes=None, initializer=None, initargs=(), **kwargs)
Initialize a new Pool instance.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBprocesses\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link') \-\- Number of worker processes.
.IP \(bu 2
\fBinitializer\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link') \-\- An callable used to initialize workers processes.
.IP \(bu 2
\fBinitargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP) \-\- A tuple of arguments to pass to the initializer.
.IP \(bu 2
\fBkwargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Additional keyword arguments are passed down to the
\fI\%MPIPoolExecutor\fP constructor.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
The \fImaxtasksperchild\fP and \fIcontext\fP arguments of
\X'tty: link https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool'\fI\%multiprocessing.pool.Pool\fP\X'tty: link' are not supported.  Specifying
\fImaxtasksperchild\fP or \fIcontext\fP with a value other than \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' will
issue a warning of category \X'tty: link https://docs.python.org/3/library/exceptions.html#UserWarning'\fI\%UserWarning\fP\X'tty: link'\&.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(func, args=(), kwds={})
Call \fIfunc\fP with arguments \fIargs\fP and keyword arguments \fIkwds\fP\&.
.sp
Equivalent to \fBfunc(*args, **kwds)\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBkwds\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Mapping'\fI\%Mapping\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\fI\%T\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply_async(func, args=(), kwds={}, callback=None, error_callback=None)
Asynchronous version of \fI\%apply()\fP returning \fI\%ApplyResult\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\fICallable\fP\fI[\fP\fI\&...\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBargs\fP (\fIIterable\fP\fI[\fP\fIAny\fP\fI]\fP)
.IP \(bu 2
\fBkwds\fP (\fIMapping\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\fIAny\fP\fI]\fP)
.IP \(bu 2
\fBcallback\fP (\fICallable\fP\fI[\fP\fI[\fP\fI\%T\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBerror_callback\fP (\fICallable\fP\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/exceptions.html#BaseException'\fI\%BaseException\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%AsyncResult\fP[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B map(func, iterable, chunksize=None)
Apply \fIfunc\fP to each element in \fIiterable\fP\&.
.sp
Equivalent to \fBlist(map(func, iterable))\fP\&.
.sp
Block until all results are ready and return them in a \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\&.
.sp
The \fIiterable\fP is choped into a number of chunks which are submitted as
separate tasks. The (approximate) size of these chunks can be specified
by setting \fIchunksize\fP to a positive integer.
.sp
Consider using \fI\%imap()\fP or \fI\%imap_unordered()\fP with explicit \fIchunksize\fP
for better efficiency.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%S\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\fI\%S\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B map_async(func, iterable, chunksize=None, callback=None, error_callback=None)
Asynchronous version of \fI\%map()\fP returning \fI\%MapResult\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\fICallable\fP\fI[\fP\fI[\fP\fI\%S\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\fIIterable\fP\fI[\fP\fI\%S\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBcallback\fP (\fICallable\fP\fI[\fP\fI[\fP\fI\%T\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBerror_callback\fP (\fICallable\fP\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/exceptions.html#BaseException'\fI\%BaseException\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%MapResult\fP[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B imap(func, iterable, chunksize=1)
Like \fI\%map()\fP but return an \X'tty: link https://docs.python.org/3/glossary.html#term-iterator'\fI\%iterator\fP\X'tty: link'\&.
.sp
Equivalent to \fBmap(func, iterable)\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%S\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\fI\%S\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterator'\fI\%Iterator\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B imap_unordered(func, iterable, chunksize=1)
Like \fI\%imap()\fP but ordering of results is arbitrary.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%S\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\fI\%S\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterator'\fI\%Iterator\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B starmap(func, iterable, chunksize=None)
Apply \fIfunc\fP to each argument tuple in \fIiterable\fP\&.
.sp
Equivalent to \fBlist(itertools.starmap(func, iterable))\fP\&.
.sp
Block until all results are ready and return them in a \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\&.
.sp
The \fIiterable\fP is choped into a number of chunks which are submitted as
separate tasks. The (approximate) size of these chunks can be specified
by setting \fIchunksize\fP to a positive integer.
.sp
Consider using \fI\%istarmap()\fP or \fI\%istarmap_unordered()\fP with explicit
\fIchunksize\fP for better efficiency.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B starmap_async(func, iterable, chunksize=None, callback=None, error_callback=None)
Asynchronous version of \fI\%starmap()\fP returning \fI\%MapResult\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\fICallable\fP\fI[\fP\fI\&...\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\fIIterable\fP\fI[\fP\fIIterable\fP\fI[\fP\fIAny\fP\fI]\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBcallback\fP (\fICallable\fP\fI[\fP\fI[\fP\fI\%T\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBerror_callback\fP (\fICallable\fP\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/exceptions.html#BaseException'\fI\%BaseException\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%MapResult\fP[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B istarmap(func, iterable, chunksize=1)
Like \fI\%starmap()\fP but return an \X'tty: link https://docs.python.org/3/glossary.html#term-iterator'\fI\%iterator\fP\X'tty: link'\&.
.sp
Equivalent to \fBitertools.starmap(func, iterable)\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterator'\fI\%Iterator\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B istarmap_unordered(func, iterable, chunksize=1)
Like \fI\%istarmap()\fP but ordering of results is arbitrary.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunc\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP)
.IP \(bu 2
\fBiterable\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI]\fP)
.IP \(bu 2
\fBchunksize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterator'\fI\%Iterator\fP\X'tty: link'[\fI\%T\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B close()
Prevent any more tasks from being submitted to the pool.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B terminate()
Stop the worker processes without completing pending tasks.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B join()
Wait for the worker processes to exit.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pool.ThreadPool
Bases: \fI\%Pool\fP
.sp
Pool using threads as workers.
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pool.AsyncResult
Asynchronous result.
.INDENT 7.0
.TP
.B get(timeout=None)
Return the result when it arrives.
.sp
If \fItimeout\fP is not \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link' and the result does not arrive within
\fItimeout\fP seconds then raise \X'tty: link https://docs.python.org/3/library/exceptions.html#TimeoutError'\fI\%TimeoutError\fP\X'tty: link'\&.
.sp
If the remote call raised an exception then that exception will be
reraised.
.INDENT 7.0
.TP
.B Parameters
\fBtimeout\fP (\X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\fI\%T\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wait(timeout=None)
Wait until the result is available or \fItimeout\fP seconds pass.
.INDENT 7.0
.TP
.B Parameters
\fBtimeout\fP (\X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ready()
Return whether the call has completed.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B successful()
Return whether the call completed without raising an exception.
.sp
If the result is not ready then raise \X'tty: link https://docs.python.org/3/library/exceptions.html#ValueError'\fI\%ValueError\fP\X'tty: link'\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pool.ApplyResult
Bases: \fI\%AsyncResult\fP
.sp
Result type of \fI\%apply_async()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B class mpi4py.util.pool.MapResult
Bases: \fI\%AsyncResult\fP
.sp
Result type of \fI\%map_async()\fP and \fI\%starmap_async()\fP\&.
.UNINDENT
.SS mpi4py.util.sync
.sp
Added in version 4.0.0.

.sp
The \fI\%mpi4py.util.sync\fP module provides parallel synchronization
utilities.
.SS Sequential execution
.INDENT 0.0
.TP
.B class mpi4py.util.sync.Sequential
Sequential execution.
.sp
Context manager for sequential execution within a group of MPI processes.
.sp
The implementation is based in MPI\-1 point\-to\-point communication. A process
with rank \fIi\fP waits in a blocking receive until the previous process rank
\fIi\-1\fP finish executing and signals the next rank \fIi\fP with a send.
.INDENT 7.0
.TP
.B __init__(comm, tag=0)
Initialize sequential execution.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP) \-\- Intracommunicator context.
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Tag for point\-to\-point communication.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __enter__()
Enter sequential execution.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __exit__(*exc)
Exit sequential execution.
.INDENT 7.0
.TP
.B Parameters
\fBexc\fP (\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B begin()
Begin sequential execution.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B end()
End sequential execution.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS Global counter
.INDENT 0.0
.TP
.B class mpi4py.util.sync.Counter
Global counter.
.sp
Produce consecutive values within a group of MPI processes. The counter
interface is close to that of \X'tty: link https://docs.python.org/3/library/itertools.html#itertools.count'\fI\%itertools.count\fP\X'tty: link'\&.
.sp
The implementation is based in MPI\-3 one\-sided operations. A root process
(typically rank \fB0\fP) holds the counter, and its value is queried and
incremented with an atomic RMA \fIfetch\-and\-add\fP operation.
.INDENT 7.0
.TP
.B __init__(start=0, step=1, *, typecode=\(aqi\(aq, comm=COMM_SELF, info=INFO_NULL, root=0)
Initialize global counter.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstart\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Start value.
.IP \(bu 2
\fBstep\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Increment value.
.IP \(bu 2
\fBtypecode\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link') \-\- Type code as defined in the \X'tty: link https://docs.python.org/3/library/array.html#module-array'\fI\%array\fP\X'tty: link' module.
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP) \-\- Intracommunicator context.
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP) \-\- Info object for RMA context creation.
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Process rank holding the counter memory.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __iter__()
Implement \fBiter(self)\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __next__()
Implement \fBnext(self)\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B next(incr=None)
Return current value and increment.
.INDENT 7.0
.TP
.B Parameters
\fBincr\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link') \-\- Increment value.
.TP
.B Returns
The counter value before incrementing.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Free counter resources.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS Mutual exclusion
.INDENT 0.0
.TP
.B class mpi4py.util.sync.Mutex
Mutual exclusion.
.sp
Establish a critical section or mutual exclusion among MPI processes.
.sp
The mutex interface is close to that of \X'tty: link https://docs.python.org/3/library/threading.html#threading.Lock'\fI\%threading.Lock\fP\X'tty: link' and
\X'tty: link https://docs.python.org/3/library/threading.html#threading.RLock'\fI\%threading.RLock\fP\X'tty: link', allowing the use of either recursive or non\-recursive
mutual exclusion. However, a mutex should be used within a group of MPI
processes, not threads.
.sp
In non\-recursive mode, the semantics of \fI\%Mutex\fP are somewhat different than
these of \X'tty: link https://docs.python.org/3/library/threading.html#threading.Lock'\fI\%threading.Lock\fP\X'tty: link':
.INDENT 7.0
.IP \(bu 2
Once acquired, a mutex is held and owned by a process until released.
.IP \(bu 2
Trying to acquire a mutex already held raises \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'\&.
.IP \(bu 2
Trying to release a mutex not yet held raises \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'\&.
.UNINDENT
.sp
This mutex implementation uses the scalable and fair spinlock algorithm from
\fI\%[mcs\-paper]\fP and took inspiration from the MPI\-3 RMA implementation of
\fI\%[uam\-book]\fP\&.
.INDENT 7.0
.TP
.B __init__(*, recursive=False, comm=COMM_SELF, info=INFO_NULL)
Initialize mutex object.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP) \-\- Intracommunicator context.
.IP \(bu 2
\fBrecursive\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link') \-\- Whether to allow recursive acquisition.
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP) \-\- Info object for RMA context creation.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __enter__()
Acquire mutex.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __exit__(*exc)
Release mutex.
.INDENT 7.0
.TP
.B Parameters
\fBexc\fP (\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B acquire(blocking=True)
Acquire mutex, blocking or non\-blocking.
.INDENT 7.0
.TP
.B Parameters
\fBblocking\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link') \-\- If \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', block until the mutex is held.
.TP
.B Returns
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link' if the mutex is held, \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' otherwise.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B release()
Release mutex.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B locked()
Return whether the mutex is held.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B count()
Return the recursion count.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Free mutex resources.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.IP [mcs-paper] 5
John M. Mellor\-Crummey and Michael L. Scott.
Algorithms for scalable synchronization on shared\-memory multiprocessors.
ACM Transactions on Computer Systems, 9(1):21\-65, February 1991.
\X'tty: link https://doi.org/10.1145/103727.103729'\fI\%https://doi.org/10.1145/103727.103729\fP\X'tty: link'
.IP [uam-book] 5
William Gropp, Torsten Hoefler, Rajeev Thakur, Ewing Lusk.
Using Advanced MPI \- Modern Features of the Message\-Passing Interface.
Chapter 4, Section 4.7, Pages 130\-131. The MIT Press, November 2014.
\X'tty: link https://mitpress.mit.edu/9780262527637/using-advanced-mpi/'\fI\%https://mitpress.mit.edu/9780262527637/using\-advanced\-mpi/\fP\X'tty: link'
.SS Condition variable
.INDENT 0.0
.TP
.B class mpi4py.util.sync.Condition
Condition variable.
.sp
A condition variable allows one or more MPI processes to wait until they are
notified by another processes.
.sp
The condition variable interface is close to that of \X'tty: link https://docs.python.org/3/library/threading.html#threading.Condition'\fI\%threading.Condition\fP\X'tty: link',
allowing the use of either recursive or non\-recursive mutual exclusion.
However, the condition variable should be used within a group of MPI
processes, not threads.
.sp
This condition variable implementation uses a MPI\-3 RMA\-based scalable and
fair circular queue algorithm to track the set of waiting processes.
.INDENT 7.0
.TP
.B __init__(mutex=None, *, recursive=True, comm=COMM_SELF, info=INFO_NULL)
Initialize condition variable.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmutex\fP (\fI\%Mutex\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link') \-\- Mutual exclusion object.
.IP \(bu 2
\fBrecursive\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link') \-\- Whether to allow recursive acquisition.
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP) \-\- Intracommunicator context.
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP) \-\- Info object for RMA context creation.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __enter__()
Acquire the underlying mutex.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __exit__(*exc)
Release the underlying mutex.
.INDENT 7.0
.TP
.B Parameters
\fBexc\fP (\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B acquire(blocking=True)
Acquire the underlying mutex.
.INDENT 7.0
.TP
.B Parameters
\fBblocking\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B release()
Release the underlying mutex.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B locked()
Return whether the underlying mutex is held.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wait()
Wait until notified by another process.
.INDENT 7.0
.TP
.B Returns
Always \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'\&.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wait_for(predicate)
Wait until a predicate evaluates to \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'\&.
.INDENT 7.0
.TP
.B Parameters
\fBpredicate\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI]\fP\fI, \fP\fI\%T\fP\fI]\fP) \-\- callable returning a boolean.
.TP
.B Returns
The result of predicate once it evaluates to \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link'\&.
.TP
.B Return type
\fI\%T\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B notify(n=1)
Wake up one or more processes waiting on this condition.
.INDENT 7.0
.TP
.B Parameters
\fBn\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Maximum number of processes to wake up.
.TP
.B Returns
The actual number of processes woken up.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B notify_all()
Wake up all processes waiting on this condition.
.INDENT 7.0
.TP
.B Returns
The actual number of processes woken up.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Free condition resources.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS Semaphore object
.INDENT 0.0
.TP
.B class mpi4py.util.sync.Semaphore
Semaphore object.
.sp
A semaphore object manages an internal counter which is decremented by each
\fI\%acquire()\fP call and incremented by each \fI\%release()\fP call. The internal
counter never reaches a value below zero; when \fI\%acquire()\fP finds that it is
zero, it blocks and waits until some other process calls \fI\%release()\fP\&.
.sp
The semaphore interface is close to that of \X'tty: link https://docs.python.org/3/library/threading.html#threading.Semaphore'\fI\%threading.Semaphore\fP\X'tty: link' and
\X'tty: link https://docs.python.org/3/library/threading.html#threading.BoundedSemaphore'\fI\%threading.BoundedSemaphore\fP\X'tty: link', allowing the use of either bounded (default)
or unbounded semaphores. With a bounded semaphore, the internal counter
never exceeds its initial value; otherwise \fI\%release()\fP raises \X'tty: link https://docs.python.org/3/library/exceptions.html#ValueError'\fI\%ValueError\fP\X'tty: link'\&.
.sp
This semaphore implementation uses a global \fI\%Counter\fP and a \fI\%Condition\fP
variable to handle waiting and and notification.
.INDENT 7.0
.TP
.B __init__(value=1, *, bounded=True, comm=COMM_SELF, info=INFO_NULL)
Initialize semaphore object.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Initial value for internal counter.
.IP \(bu 2
\fBbounded\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link') \-\- Bound internal counter to initial value.
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP) \-\- Intracommunicator context.
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP) \-\- Info object for RMA context creation.
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __enter__()
Acquire semaphore.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __exit__(*exc)
Release semaphore.
.INDENT 7.0
.TP
.B Parameters
\fBexc\fP (\X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B acquire(blocking=True)
Acquire semaphore, decrementing the internal counter by one.
.INDENT 7.0
.TP
.B Parameters
\fBblocking\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link') \-\- If \X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link', block until the semaphore is acquired.
.TP
.B Returns
\X'tty: link https://docs.python.org/3/library/constants.html#True'\fI\%True\fP\X'tty: link' if the semaphore is acquired, \X'tty: link https://docs.python.org/3/library/constants.html#False'\fI\%False\fP\X'tty: link' otherwise.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B release(n=1)
Release semaphore, incrementing the internal counter by one or more.
.INDENT 7.0
.TP
.B Parameters
\fBn\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link') \-\- Increment for the internal counter.
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Free semaphore resources.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
\fBtest\-sync\-1.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
from mpi4py.util.sync import Counter, Sequential

comm = MPI.COMM_WORLD

counter = Counter(comm)
with Sequential(comm):
   value = next(counter)
counter.free()

assert comm.rank == value
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBtest\-sync\-2.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
from mpi4py.util.sync import Counter, Mutex

comm = MPI.COMM_WORLD

mutex = Mutex(comm)
counter = Counter(comm)
with mutex:
   value = next(counter)
counter.free()
mutex.free()

assert (
   list(range(comm.size)) ==
   sorted(comm.allgather(value))
)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH MPI4PY.RUN
.sp
Added in version 3.0.0.

.sp
At import time, \fI\%mpi4py\fP initializes the MPI execution environment calling
\fBMPI_Init_thread()\fP and installs an exit hook to automatically call
\fBMPI_Finalize()\fP just before the Python process terminates. Additionally,
\fI\%mpi4py\fP overrides the default \fI\%ERRORS_ARE_FATAL\fP error handler in favor
of \fI\%ERRORS_RETURN\fP, which allows translating MPI errors in Python
exceptions. These departures from standard MPI behavior may be controversial,
but are quite convenient within the highly dynamic Python programming
environment. Third\-party code using \fI\%mpi4py\fP can just \fBfrom mpi4py import
MPI\fP and perform MPI calls without the tedious initialization/finalization
handling.  MPI errors, once translated automatically to Python exceptions, can
be dealt with the common \X'tty: link https://docs.python.org/3/reference/compound_stmts.html#try'\fI\%try\fP\X'tty: link'\&...\X'tty: link https://docs.python.org/3/reference/compound_stmts.html#except'\fI\%except\fP\X'tty: link'\&...\X'tty: link https://docs.python.org/3/reference/compound_stmts.html#finally'\fI\%finally\fP\X'tty: link' clauses; unhandled MPI exceptions will print a traceback
which helps in locating problems in source code.
.sp
Unfortunately, the interplay of automatic MPI finalization and unhandled
exceptions may lead to deadlocks. In unattended runs, these deadlocks will
drain the battery of your laptop, or burn precious allocation hours in your
supercomputing facility.
.SS Exceptions and deadlocks
.sp
Consider the following snippet of Python code. Assume this code is stored in a
standard Python script file and run with \fBmpiexec\fP in two or more
processes.
.sp
\fBdeadlock.py\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from mpi4py import MPI
assert MPI.COMM_WORLD.Get_size() > 1
rank = MPI.COMM_WORLD.Get_rank()
if rank == 0:
    1/0
    MPI.COMM_WORLD.send(None, dest=1, tag=42)
elif rank == 1:
    MPI.COMM_WORLD.recv(source=0, tag=42)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process 0 raises \X'tty: link https://docs.python.org/3/library/exceptions.html#ZeroDivisionError'\fI\%ZeroDivisionError\fP\X'tty: link' exception before performing a send call to
process 1. As the exception is not handled, the Python interpreter running in
process 0 will proceed to exit with non\-zero status. However, as \fI\%mpi4py\fP
installed a finalizer hook to call \fBMPI_Finalize()\fP before exit, process
0 will block waiting for other processes to also enter the
\fBMPI_Finalize()\fP call. Meanwhile, process 1 will block waiting for a
message to arrive from process 0, thus never reaching to
\fBMPI_Finalize()\fP\&. The whole MPI execution environment is irremediably in
a deadlock state.
.sp
To alleviate this issue, \fI\%mpi4py\fP offers a simple, alternative command
line execution mechanism based on using the \X'tty: link https://docs.python.org/3/using/cmdline.html#using-on-cmdline'\fI\%\-m\fP\X'tty: link'
flag and implemented with the \X'tty: link https://docs.python.org/3/library/runpy.html#module-runpy'\fI\%runpy\fP\X'tty: link' module. To use this features, Python
code should be run passing \fB\-m mpi4py\fP in the command line invoking the
Python interpreter. In case of unhandled exceptions, the finalizer hook will
call \fBMPI_Abort()\fP on the \fBMPI_COMM_WORLD\fP communicator, thus
effectively aborting the MPI execution environment.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
When a process is forced to abort, resources (e.g. open files) are not
cleaned\-up and any registered finalizers (either with the \X'tty: link https://docs.python.org/3/library/atexit.html#module-atexit'\fI\%atexit\fP\X'tty: link'
module, the Python C/API function \X'tty: link https://docs.python.org/3/c-api/sys.html#c.Py_AtExit'\fI\%Py_AtExit()\fP\X'tty: link', or even the C
standard library function \fBatexit()\fP) will not be executed. Thus,
aborting execution is an extremely impolite way of ensuring process
termination. However, MPI provides no other mechanism to recover from a
deadlock state.
.UNINDENT
.UNINDENT
.SS Command line
.sp
The use of \fB\-m mpi4py\fP to execute Python code on the command line resembles
that of the Python interpreter.
.INDENT 0.0
.IP \(bu 2
\fBmpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py \fP\fIpyfile\fP\fB [arg] ...\fP
.IP \(bu 2
\fBmpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py \-m \fP\fImod\fP\fB [arg] ...\fP
.IP \(bu 2
\fBmpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py \-c \fP\fIcmd\fP\fB [arg] ...\fP
.IP \(bu 2
\fBmpiexec \-n \fP\fInumprocs\fP\fB python \-m mpi4py \- [arg] ...\fP
.UNINDENT
.INDENT 0.0
.TP
.B <pyfile>
Execute the Python code contained in \fIpyfile\fP, which must be a filesystem
path referring to either a Python file, a directory containing a
\fB__main__.py\fP file, or a zipfile containing a \fB__main__.py\fP
file.
.UNINDENT
.INDENT 0.0
.TP
.B \-m <mod>
Search \X'tty: link https://docs.python.org/3/library/sys.html#sys.path'\fI\%sys.path\fP\X'tty: link' for the named module \fImod\fP and execute its contents.
.UNINDENT
.INDENT 0.0
.TP
.B \-c <cmd>
Execute the Python code in the \fIcmd\fP string command.
.UNINDENT
.INDENT 0.0
.TP
.B \-
Read commands from standard input (\X'tty: link https://docs.python.org/3/library/sys.html#sys.stdin'\fI\%sys.stdin\fP\X'tty: link').
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \X'tty: link https://docs.python.org/3/using/cmdline.html#using-on-cmdline'\fI\%Command line\fP\X'tty: link'
Documentation on Python command line interface.
.UNINDENT
.UNINDENT
.UNINDENT
.SH MPI4PY.BENCH
.sp
Added in version 3.0.0.

.SH REFERENCE
.TS
center;
|l|l|.
_
T{
\fI\%mpi4py.MPI\fP
T}	T{
Message Passing Interface.
T}
_
.TE
.SS mpi4py.MPI
.sp
Message Passing Interface.
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%BottomType\fP
T}	T{
Type of \fI\%BOTTOM\fP\&.
T}
_
T{
\fI\%BufferAutomaticType\fP
T}	T{
Type of \fI\%BUFFER_AUTOMATIC\fP\&.
T}
_
T{
\fI\%Cartcomm\fP
T}	T{
Cartesian topology intracommunicator.
T}
_
T{
\fI\%Comm\fP
T}	T{
Communication context.
T}
_
T{
\fI\%Datatype\fP
T}	T{
Datatype object.
T}
_
T{
\fI\%Distgraphcomm\fP
T}	T{
Distributed graph topology intracommunicator.
T}
_
T{
\fI\%Errhandler\fP
T}	T{
Error handler.
T}
_
T{
\fI\%File\fP
T}	T{
File I/O context.
T}
_
T{
\fI\%Graphcomm\fP
T}	T{
General graph topology intracommunicator.
T}
_
T{
\fI\%Grequest\fP
T}	T{
Generalized request handler.
T}
_
T{
\fI\%Group\fP
T}	T{
Group of processes.
T}
_
T{
\fI\%InPlaceType\fP
T}	T{
Type of \fI\%IN_PLACE\fP\&.
T}
_
T{
\fI\%Info\fP
T}	T{
Info object.
T}
_
T{
\fI\%Intercomm\fP
T}	T{
Intercommunicator.
T}
_
T{
\fI\%Intracomm\fP
T}	T{
Intracommunicator.
T}
_
T{
\fI\%Message\fP
T}	T{
Matched message.
T}
_
T{
\fI\%Op\fP
T}	T{
Reduction operation.
T}
_
T{
\fI\%Pickle\fP
T}	T{
Pickle/unpickle Python objects.
T}
_
T{
\fI\%Prequest\fP
T}	T{
Persistent request handler.
T}
_
T{
\fI\%Request\fP
T}	T{
Request handler.
T}
_
T{
\fI\%Session\fP
T}	T{
Session context.
T}
_
T{
\fI\%Status\fP
T}	T{
Status object.
T}
_
T{
\fI\%Topocomm\fP
T}	T{
Topology intracommunicator.
T}
_
T{
\fI\%Win\fP
T}	T{
Remote memory access context.
T}
_
T{
\fI\%buffer\fP
T}	T{
Buffer.
T}
_
T{
\fI\%memory\fP
T}	T{
alias of \fI\%buffer\fP
T}
_
.TE
.SS mpi4py.MPI.BottomType
.INDENT 0.0
.TP
.B class mpi4py.MPI.BottomType
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.sp
Type of \fI\%BOTTOM\fP\&.
.INDENT 7.0
.TP
.B static __new__(cls)
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.BufferAutomaticType
.INDENT 0.0
.TP
.B class mpi4py.MPI.BufferAutomaticType
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.sp
Type of \fI\%BUFFER_AUTOMATIC\fP\&.
.INDENT 7.0
.TP
.B static __new__(cls)
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Cartcomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Cartcomm
Bases: \fI\%Topocomm\fP
.sp
Cartesian topology intracommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Cartcomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Get_cart_rank\fP(coords)
T}	T{
Translate logical coordinates to ranks.
T}
_
T{
\fI\%Get_coords\fP(rank)
T}	T{
Translate ranks to logical coordinates.
T}
_
T{
\fI\%Get_dim\fP()
T}	T{
Return number of dimensions.
T}
_
T{
\fI\%Get_topo\fP()
T}	T{
Return information on the cartesian topology.
T}
_
T{
\fI\%Shift\fP(direction, disp)
T}	T{
Return a process ranks for data shifting with \fI\%Sendrecv\fP\&.
T}
_
T{
\fI\%Sub\fP(remain_dims)
T}	T{
Return a lower\-dimensional Cartesian topology.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%coords\fP
T}	T{
Coordinates.
T}
_
T{
\fI\%dim\fP
T}	T{
Number of dimensions.
T}
_
T{
\fI\%dims\fP
T}	T{
Dimensions.
T}
_
T{
\fI\%ndim\fP
T}	T{
Number of dimensions.
T}
_
T{
\fI\%periods\fP
T}	T{
Periodicity.
T}
_
T{
\fI\%topo\fP
T}	T{
Topology information.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Get_cart_rank(coords)
Translate logical coordinates to ranks.
.INDENT 7.0
.TP
.B Parameters
\fBcoords\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_coords(rank)
Translate ranks to logical coordinates.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_dim()
Return number of dimensions.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_topo()
Return information on the cartesian topology.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Shift(direction, disp)
Return a process ranks for data shifting with \fI\%Sendrecv\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdirection\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Sub(remain_dims)
Return a lower\-dimensional Cartesian topology.
.INDENT 7.0
.TP
.B Parameters
\fBremain_dims\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\fI\%Cartcomm\fP
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B coords
Coordinates.
.UNINDENT
.INDENT 7.0
.TP
.B dim
Number of dimensions.
.UNINDENT
.INDENT 7.0
.TP
.B dims
Dimensions.
.UNINDENT
.INDENT 7.0
.TP
.B ndim
Number of dimensions.
.UNINDENT
.INDENT 7.0
.TP
.B periods
Periodicity.
.UNINDENT
.INDENT 7.0
.TP
.B topo
Topology information.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Comm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Comm
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Communication context.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Comm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Abort\fP([errorcode])
T}	T{
Terminate the MPI execution environment.
T}
_
T{
\fI\%Ack_failed\fP([num_to_ack])
T}	T{
Acknowledge failures on a communicator.
T}
_
T{
\fI\%Agree\fP(flag)
T}	T{
Blocking agreement.
T}
_
T{
\fI\%Allgather\fP(sendbuf, recvbuf)
T}	T{
Gather to All.
T}
_
T{
\fI\%Allgather_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Gather to All.
T}
_
T{
\fI\%Allgatherv\fP(sendbuf, recvbuf)
T}	T{
Gather to All Vector.
T}
_
T{
\fI\%Allgatherv_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Gather to All Vector.
T}
_
T{
\fI\%Allreduce\fP(sendbuf, recvbuf[, op])
T}	T{
Reduce to All.
T}
_
T{
\fI\%Allreduce_init\fP(sendbuf, recvbuf[, op, info])
T}	T{
Persistent Reduce to All.
T}
_
T{
\fI\%Alltoall\fP(sendbuf, recvbuf)
T}	T{
All to All Scatter/Gather.
T}
_
T{
\fI\%Alltoall_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent All to All Scatter/Gather.
T}
_
T{
\fI\%Alltoallv\fP(sendbuf, recvbuf)
T}	T{
All to All Scatter/Gather Vector.
T}
_
T{
\fI\%Alltoallv_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent All to All Scatter/Gather Vector.
T}
_
T{
\fI\%Alltoallw\fP(sendbuf, recvbuf)
T}	T{
All to All Scatter/Gather General.
T}
_
T{
\fI\%Alltoallw_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent All to All Scatter/Gather General.
T}
_
T{
\fI\%Attach_buffer\fP(buf)
T}	T{
Attach a user\-provided buffer for sending in buffered mode.
T}
_
T{
\fI\%Barrier\fP()
T}	T{
Barrier synchronization.
T}
_
T{
\fI\%Barrier_init\fP([info])
T}	T{
Persistent Barrier.
T}
_
T{
\fI\%Bcast\fP(buf[, root])
T}	T{
Broadcast data from one process to all other processes.
T}
_
T{
\fI\%Bcast_init\fP(buf[, root, info])
T}	T{
Persistent Broadcast.
T}
_
T{
\fI\%Bsend\fP(buf, dest[, tag])
T}	T{
Blocking send in buffered mode.
T}
_
T{
\fI\%Bsend_init\fP(buf, dest[, tag])
T}	T{
Persistent request for a send in buffered mode.
T}
_
T{
\fI\%Call_errhandler\fP(errorcode)
T}	T{
Call the error handler installed on a communicator.
T}
_
T{
\fI\%Clone\fP()
T}	T{
Clone an existing communicator.
T}
_
T{
\fI\%Compare\fP(comm)
T}	T{
Compare two communicators.
T}
_
T{
\fI\%Create\fP(group)
T}	T{
Create communicator from group.
T}
_
T{
\fI\%Create_errhandler\fP(errhandler_fn)
T}	T{
Create a new error handler for communicators.
T}
_
T{
\fI\%Create_keyval\fP([copy_fn, delete_fn, nopython])
T}	T{
Create a new attribute key for communicators.
T}
_
T{
\fI\%Delete_attr\fP(keyval)
T}	T{
Delete attribute value associated with a key.
T}
_
T{
\fI\%Detach_buffer\fP()
T}	T{
Remove an existing attached buffer.
T}
_
T{
\fI\%Disconnect\fP()
T}	T{
Disconnect from a communicator.
T}
_
T{
\fI\%Dup\fP([info])
T}	T{
Duplicate a communicator.
T}
_
T{
\fI\%Dup_with_info\fP(info)
T}	T{
Duplicate a communicator with hints.
T}
_
T{
\fI\%Flush_buffer\fP()
T}	T{
Block until all buffered messages have been transmitted.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free a communicator.
T}
_
T{
\fI\%Free_keyval\fP(keyval)
T}	T{
Free an attribute key for communicators.
T}
_
T{
\fI\%Gather\fP(sendbuf, recvbuf[, root])
T}	T{
Gather data to one process from all other processes.
T}
_
T{
\fI\%Gather_init\fP(sendbuf, recvbuf[, root, info])
T}	T{
Persistent Gather.
T}
_
T{
\fI\%Gatherv\fP(sendbuf, recvbuf[, root])
T}	T{
Gather Vector.
T}
_
T{
\fI\%Gatherv_init\fP(sendbuf, recvbuf[, root, info])
T}	T{
Persistent Gather Vector.
T}
_
T{
\fI\%Get_attr\fP(keyval)
T}	T{
Retrieve attribute value by key.
T}
_
T{
\fI\%Get_errhandler\fP()
T}	T{
Get the error handler for a communicator.
T}
_
T{
\fI\%Get_failed\fP()
T}	T{
Extract the group of failed processes.
T}
_
T{
\fI\%Get_group\fP()
T}	T{
Access the group associated with a communicator.
T}
_
T{
\fI\%Get_info\fP()
T}	T{
Return the current hints for a communicator.
T}
_
T{
\fI\%Get_name\fP()
T}	T{
Get the print name for this communicator.
T}
_
T{
\fI\%Get_parent\fP()
T}	T{
Return the parent intercommunicator for this process.
T}
_
T{
\fI\%Get_rank\fP()
T}	T{
Return the rank of this process in a communicator.
T}
_
T{
\fI\%Get_size\fP()
T}	T{
Return the number of processes in a communicator.
T}
_
T{
\fI\%Get_topology\fP()
T}	T{
Return the type of topology (if any) associated with a communicator.
T}
_
T{
\fI\%Iagree\fP(flag)
T}	T{
Nonblocking agreement.
T}
_
T{
\fI\%Iallgather\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Gather to All.
T}
_
T{
\fI\%Iallgatherv\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Gather to All Vector.
T}
_
T{
\fI\%Iallreduce\fP(sendbuf, recvbuf[, op])
T}	T{
Nonblocking Reduce to All.
T}
_
T{
\fI\%Ialltoall\fP(sendbuf, recvbuf)
T}	T{
Nonblocking All to All Scatter/Gather.
T}
_
T{
\fI\%Ialltoallv\fP(sendbuf, recvbuf)
T}	T{
Nonblocking All to All Scatter/Gather Vector.
T}
_
T{
\fI\%Ialltoallw\fP(sendbuf, recvbuf)
T}	T{
Nonblocking All to All Scatter/Gather General.
T}
_
T{
\fI\%Ibarrier\fP()
T}	T{
Nonblocking Barrier.
T}
_
T{
\fI\%Ibcast\fP(buf[, root])
T}	T{
Nonblocking Broadcast.
T}
_
T{
\fI\%Ibsend\fP(buf, dest[, tag])
T}	T{
Nonblocking send in buffered mode.
T}
_
T{
\fI\%Idup\fP([info])
T}	T{
Nonblocking duplicate a communicator.
T}
_
T{
\fI\%Idup_with_info\fP(info)
T}	T{
Nonblocking duplicate a communicator with hints.
T}
_
T{
\fI\%Iflush_buffer\fP()
T}	T{
Nonblocking flush for buffered messages.
T}
_
T{
\fI\%Igather\fP(sendbuf, recvbuf[, root])
T}	T{
Nonblocking Gather.
T}
_
T{
\fI\%Igatherv\fP(sendbuf, recvbuf[, root])
T}	T{
Nonblocking Gather Vector.
T}
_
T{
\fI\%Improbe\fP([source, tag, status])
T}	T{
Nonblocking test for a matched message.
T}
_
T{
\fI\%Iprobe\fP([source, tag, status])
T}	T{
Nonblocking test for a message.
T}
_
T{
\fI\%Irecv\fP(buf[, source, tag])
T}	T{
Nonblocking receive.
T}
_
T{
\fI\%Ireduce\fP(sendbuf, recvbuf[, op, root])
T}	T{
Nonblocking Reduce to Root.
T}
_
T{
\fI\%Ireduce_scatter\fP(sendbuf, recvbuf[, ...])
T}	T{
Nonblocking Reduce\-Scatter (vector version).
T}
_
T{
\fI\%Ireduce_scatter_block\fP(sendbuf, recvbuf[, op])
T}	T{
Nonblocking Reduce\-Scatter Block (regular, non\-vector version).
T}
_
T{
\fI\%Irsend\fP(buf, dest[, tag])
T}	T{
Nonblocking send in ready mode.
T}
_
T{
\fI\%Is_inter\fP()
T}	T{
Return whether the communicator is an intercommunicator.
T}
_
T{
\fI\%Is_intra\fP()
T}	T{
Return whether the communicator is an intracommunicator.
T}
_
T{
\fI\%Is_revoked\fP()
T}	T{
Indicate whether the communicator has been revoked.
T}
_
T{
\fI\%Iscatter\fP(sendbuf, recvbuf[, root])
T}	T{
Nonblocking Scatter.
T}
_
T{
\fI\%Iscatterv\fP(sendbuf, recvbuf[, root])
T}	T{
Nonblocking Scatter Vector.
T}
_
T{
\fI\%Isend\fP(buf, dest[, tag])
T}	T{
Nonblocking send.
T}
_
T{
\fI\%Isendrecv\fP(sendbuf, dest[, sendtag, recvbuf, ...])
T}	T{
Nonblocking send and receive.
T}
_
T{
\fI\%Isendrecv_replace\fP(buf, dest[, sendtag, ...])
T}	T{
Send and receive a message.
T}
_
T{
\fI\%Ishrink\fP()
T}	T{
Nonblocking shrink a communicator to remove all failed processes.
T}
_
T{
\fI\%Issend\fP(buf, dest[, tag])
T}	T{
Nonblocking send in synchronous mode.
T}
_
T{
\fI\%Join\fP(fd)
T}	T{
Interconnect two processes connected by a socket.
T}
_
T{
\fI\%Mprobe\fP([source, tag, status])
T}	T{
Blocking test for a matched message.
T}
_
T{
\fI\%Precv_init\fP(buf, partitions[, source, tag, info])
T}	T{
Create request for a partitioned recv operation.
T}
_
T{
\fI\%Probe\fP([source, tag, status])
T}	T{
Blocking test for a message.
T}
_
T{
\fI\%Psend_init\fP(buf, partitions, dest[, tag, info])
T}	T{
Create request for a partitioned send operation.
T}
_
T{
\fI\%Recv\fP(buf[, source, tag, status])
T}	T{
Blocking receive.
T}
_
T{
\fI\%Recv_init\fP(buf[, source, tag])
T}	T{
Create a persistent request for a receive.
T}
_
T{
\fI\%Reduce\fP(sendbuf, recvbuf[, op, root])
T}	T{
Reduce to Root.
T}
_
T{
\fI\%Reduce_init\fP(sendbuf, recvbuf[, op, root, info])
T}	T{
Persistent Reduce to Root.
T}
_
T{
\fI\%Reduce_scatter\fP(sendbuf, recvbuf[, ...])
T}	T{
Reduce\-Scatter (vector version).
T}
_
T{
\fI\%Reduce_scatter_block\fP(sendbuf, recvbuf[, op])
T}	T{
Reduce\-Scatter Block (regular, non\-vector version).
T}
_
T{
\fI\%Reduce_scatter_block_init\fP(sendbuf, recvbuf)
T}	T{
Persistent Reduce\-Scatter Block (regular, non\-vector version).
T}
_
T{
\fI\%Reduce_scatter_init\fP(sendbuf, recvbuf[, ...])
T}	T{
Persistent Reduce\-Scatter (vector version).
T}
_
T{
\fI\%Revoke\fP()
T}	T{
Revoke a communicator.
T}
_
T{
\fI\%Rsend\fP(buf, dest[, tag])
T}	T{
Blocking send in ready mode.
T}
_
T{
\fI\%Rsend_init\fP(buf, dest[, tag])
T}	T{
Persistent request for a send in ready mode.
T}
_
T{
\fI\%Scatter\fP(sendbuf, recvbuf[, root])
T}	T{
Scatter data from one process to all other processes.
T}
_
T{
\fI\%Scatter_init\fP(sendbuf, recvbuf[, root, info])
T}	T{
Persistent Scatter.
T}
_
T{
\fI\%Scatterv\fP(sendbuf, recvbuf[, root])
T}	T{
Scatter Vector.
T}
_
T{
\fI\%Scatterv_init\fP(sendbuf, recvbuf[, root, info])
T}	T{
Persistent Scatter Vector.
T}
_
T{
\fI\%Send\fP(buf, dest[, tag])
T}	T{
Blocking send.
T}
_
T{
\fI\%Send_init\fP(buf, dest[, tag])
T}	T{
Create a persistent request for a standard send.
T}
_
T{
\fI\%Sendrecv\fP(sendbuf, dest[, sendtag, recvbuf, ...])
T}	T{
Send and receive a message.
T}
_
T{
\fI\%Sendrecv_replace\fP(buf, dest[, sendtag, ...])
T}	T{
Send and receive a message.
T}
_
T{
\fI\%Set_attr\fP(keyval, attrval)
T}	T{
Store attribute value associated with a key.
T}
_
T{
\fI\%Set_errhandler\fP(errhandler)
T}	T{
Set the error handler for a communicator.
T}
_
T{
\fI\%Set_info\fP(info)
T}	T{
Set new values for the hints associated with a communicator.
T}
_
T{
\fI\%Set_name\fP(name)
T}	T{
Set the print name for this communicator.
T}
_
T{
\fI\%Shrink\fP()
T}	T{
Shrink a communicator to remove all failed processes.
T}
_
T{
\fI\%Split\fP([color, key])
T}	T{
Split communicator by color and key.
T}
_
T{
\fI\%Split_type\fP(split_type[, key, info])
T}	T{
Split communicator by split type.
T}
_
T{
\fI\%Ssend\fP(buf, dest[, tag])
T}	T{
Blocking send in synchronous mode.
T}
_
T{
\fI\%Ssend_init\fP(buf, dest[, tag])
T}	T{
Persistent request for a send in synchronous mode.
T}
_
T{
\fI\%allgather\fP(sendobj)
T}	T{
Gather to All.
T}
_
T{
\fI\%allreduce\fP(sendobj[, op])
T}	T{
Reduce to All.
T}
_
T{
\fI\%alltoall\fP(sendobj)
T}	T{
All to All Scatter/Gather.
T}
_
T{
\fI\%barrier\fP()
T}	T{
Barrier synchronization.
T}
_
T{
\fI\%bcast\fP(obj[, root])
T}	T{
Broadcast.
T}
_
T{
\fI\%bsend\fP(obj, dest[, tag])
T}	T{
Send in buffered mode.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null or predefined.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%gather\fP(sendobj[, root])
T}	T{
Gather.
T}
_
T{
\fI\%ibsend\fP(obj, dest[, tag])
T}	T{
Nonblocking send in buffered mode.
T}
_
T{
\fI\%improbe\fP([source, tag, status])
T}	T{
Nonblocking test for a matched message.
T}
_
T{
\fI\%iprobe\fP([source, tag, status])
T}	T{
Nonblocking test for a message.
T}
_
T{
\fI\%irecv\fP([buf, source, tag])
T}	T{
Nonblocking receive.
T}
_
T{
\fI\%isend\fP(obj, dest[, tag])
T}	T{
Nonblocking send.
T}
_
T{
\fI\%issend\fP(obj, dest[, tag])
T}	T{
Nonblocking send in synchronous mode.
T}
_
T{
\fI\%mprobe\fP([source, tag, status])
T}	T{
Blocking test for a matched message.
T}
_
T{
\fI\%probe\fP([source, tag, status])
T}	T{
Blocking test for a message.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%recv\fP([buf, source, tag, status])
T}	T{
Receive.
T}
_
T{
\fI\%reduce\fP(sendobj[, op, root])
T}	T{
Reduce to Root.
T}
_
T{
\fI\%scatter\fP(sendobj[, root])
T}	T{
Scatter.
T}
_
T{
\fI\%send\fP(obj, dest[, tag])
T}	T{
Send in standard mode.
T}
_
T{
\fI\%sendrecv\fP(sendobj, dest[, sendtag, recvbuf, ...])
T}	T{
Send and Receive.
T}
_
T{
\fI\%ssend\fP(obj, dest[, tag])
T}	T{
Send in synchronous mode.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%group\fP
T}	T{
Group.
T}
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%info\fP
T}	T{
Info hints.
T}
_
T{
\fI\%is_inter\fP
T}	T{
Is intercommunicator.
T}
_
T{
\fI\%is_intra\fP
T}	T{
Is intracommunicator.
T}
_
T{
\fI\%is_topo\fP
T}	T{
Is a topology.
T}
_
T{
\fI\%name\fP
T}	T{
Print name.
T}
_
T{
\fI\%rank\fP
T}	T{
Rank of this process.
T}
_
T{
\fI\%size\fP
T}	T{
Number of processes.
T}
_
T{
\fI\%topology\fP
T}	T{
Topology type.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Abort(errorcode=0)
Terminate the MPI execution environment.
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
The invocation of this method prevents the execution of
various Python exit and cleanup mechanisms. Use this method as a
last resort to prevent parallel deadlocks in case of unrecoverable
errors.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.NoReturn'\fI\%NoReturn\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ack_failed(num_to_ack=None)
Acknowledge failures on a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBnum_to_ack\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Agree(flag)
Blocking agreement.
.INDENT 7.0
.TP
.B Parameters
\fBflag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allgather(sendbuf, recvbuf)
Gather to All.
.sp
Gather data from all processes and broadcast the combined data to all
other processes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allgather_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Gather to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allgatherv(sendbuf, recvbuf)
Gather to All Vector.
.sp
Gather data from all processes and send it to all other processes
providing different amounts of data and displacements.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allgatherv_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Gather to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allreduce(sendbuf, recvbuf, op=SUM)
Reduce to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Allreduce_init(sendbuf, recvbuf, op=SUM, info=INFO_NULL)
Persistent Reduce to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoall(sendbuf, recvbuf)
All to All Scatter/Gather.
.sp
Send data to all processes and recv data from all processes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoall_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent All to All Scatter/Gather.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoallv(sendbuf, recvbuf)
All to All Scatter/Gather Vector.
.sp
Send data to all processes and recv data from all processes
providing different amounts of data and displacements.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoallv_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent All to All Scatter/Gather Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoallw(sendbuf, recvbuf)
All to All Scatter/Gather General.
.sp
Send/recv data to/from all processes allowing the specification of
different counts, displacements, and datatypes for each dest/source.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Alltoallw_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent All to All Scatter/Gather General.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Attach_buffer(buf)
Attach a user\-provided buffer for sending in buffered mode.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Barrier()
Barrier synchronization.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Barrier_init(info=INFO_NULL)
Persistent Barrier.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Bcast(buf, root=0)
Broadcast data from one process to all other processes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Bcast_init(buf, root=0, info=INFO_NULL)
Persistent Broadcast.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Bsend(buf, dest, tag=0)
Blocking send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Bsend_init(buf, dest, tag=0)
Persistent request for a send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Call_errhandler(errorcode)
Call the error handler installed on a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Clone()
Clone an existing communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Compare(comm)
Compare two communicators.
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Comm\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create(group)
Create communicator from group.
.INDENT 7.0
.TP
.B Parameters
\fBgroup\fP (\fI\%Group\fP)
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_errhandler(errhandler_fn)
Create a new error handler for communicators.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Comm\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_keyval(copy_fn=None, delete_fn=None, nopython=False)
Create a new attribute key for communicators.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcopy_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Comm\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBdelete_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Comm\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBnopython\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Delete_attr(keyval)
Delete attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Detach_buffer()
Remove an existing attached buffer.
.INDENT 7.0
.TP
.B Return type
\fI\%Buffer\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Disconnect()
Disconnect from a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Dup(info=None)
Duplicate a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Dup_with_info(info)
Duplicate a communicator with hints.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush_buffer()
Block until all buffered messages have been transmitted.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Free_keyval(keyval)
Free an attribute key for communicators.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Gather(sendbuf, recvbuf, root=0)
Gather data to one process from all other processes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Gather_init(sendbuf, recvbuf, root=0, info=INFO_NULL)
Persistent Gather.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Gatherv(sendbuf, recvbuf, root=0)
Gather Vector.
.sp
Gather data to one process from all other processes
providing different amounts of data and displacements.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Gatherv_init(sendbuf, recvbuf, root=0, info=INFO_NULL)
Persistent Gather Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_attr(keyval)
Retrieve attribute value by key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_errhandler()
Get the error handler for a communicator.
.INDENT 7.0
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_failed()
Extract the group of failed processes.
.INDENT 7.0
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_group()
Access the group associated with a communicator.
.INDENT 7.0
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_info()
Return the current hints for a communicator.
.INDENT 7.0
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_name()
Get the print name for this communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Get_parent()
Return the parent intercommunicator for this process.
.INDENT 7.0
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_rank()
Return the rank of this process in a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_size()
Return the number of processes in a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_topology()
Return the type of topology (if any) associated with a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iagree(flag)
Nonblocking agreement.
.INDENT 7.0
.TP
.B Parameters
\fBflag\fP (\fI\%Buffer\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iallgather(sendbuf, recvbuf)
Nonblocking Gather to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iallgatherv(sendbuf, recvbuf)
Nonblocking Gather to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iallreduce(sendbuf, recvbuf, op=SUM)
Nonblocking Reduce to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ialltoall(sendbuf, recvbuf)
Nonblocking All to All Scatter/Gather.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ialltoallv(sendbuf, recvbuf)
Nonblocking All to All Scatter/Gather Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ialltoallw(sendbuf, recvbuf)
Nonblocking All to All Scatter/Gather General.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ibarrier()
Nonblocking Barrier.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ibcast(buf, root=0)
Nonblocking Broadcast.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ibsend(buf, dest, tag=0)
Nonblocking send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Idup(info=None)
Nonblocking duplicate a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link', \fI\%Request\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Idup_with_info(info)
Nonblocking duplicate a communicator with hints.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link', \fI\%Request\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iflush_buffer()
Nonblocking flush for buffered messages.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Igather(sendbuf, recvbuf, root=0)
Nonblocking Gather.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Igatherv(sendbuf, recvbuf, root=0)
Nonblocking Gather Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Improbe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iprobe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Irecv(buf, source=ANY_SOURCE, tag=ANY_TAG)
Nonblocking receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ireduce(sendbuf, recvbuf, op=SUM, root=0)
Nonblocking Reduce to Root.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ireduce_scatter(sendbuf, recvbuf, recvcounts=None, op=SUM)
Nonblocking Reduce\-Scatter (vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvcounts\fP (\fISequence\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ireduce_scatter_block(sendbuf, recvbuf, op=SUM)
Nonblocking Reduce\-Scatter Block (regular, non\-vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%BufSpecB\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Irsend(buf, dest, tag=0)
Nonblocking send in ready mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Is_inter()
Return whether the communicator is an intercommunicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Is_intra()
Return whether the communicator is an intracommunicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Is_revoked()
Indicate whether the communicator has been revoked.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iscatter(sendbuf, recvbuf, root=0)
Nonblocking Scatter.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iscatterv(sendbuf, recvbuf, root=0)
Nonblocking Scatter Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Isend(buf, dest, tag=0)
Nonblocking send.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Isendrecv(sendbuf, dest, sendtag=0, recvbuf=None, source=ANY_SOURCE, recvtag=ANY_TAG)
Nonblocking send and receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Isendrecv_replace(buf, dest, sendtag=0, source=ANY_SOURCE, recvtag=ANY_TAG)
Send and receive a message.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function is guaranteed not to deadlock in situations
where pairs of blocking sends and receives may deadlock.
.UNINDENT
.UNINDENT
.sp
\fBCAUTION:\fP
.INDENT 7.0
.INDENT 3.5
A common mistake when using this function is to mismatch
the tags with the source and destination ranks, which can result in
deadlock.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ishrink()
Nonblocking shrink a communicator to remove all failed processes.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\fI\%Comm\fP, \fI\%Request\fP]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Issend(buf, dest, tag=0)
Nonblocking send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Join(fd)
Interconnect two processes connected by a socket.
.INDENT 7.0
.TP
.B Parameters
\fBfd\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Mprobe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Precv_init(buf, partitions, source=ANY_SOURCE, tag=ANY_TAG, info=INFO_NULL)
Create request for a partitioned recv operation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBpartitions\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Probe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a message.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function blocks until the message arrives.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Psend_init(buf, partitions, dest, tag=0, info=INFO_NULL)
Create request for a partitioned send operation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBpartitions\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Recv(buf, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking receive.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function blocks until the message is received.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Recv_init(buf, source=ANY_SOURCE, tag=ANY_TAG)
Create a persistent request for a receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce(sendbuf, recvbuf, op=SUM, root=0)
Reduce to Root.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_init(sendbuf, recvbuf, op=SUM, root=0, info=INFO_NULL)
Persistent Reduce to Root.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_scatter(sendbuf, recvbuf, recvcounts=None, op=SUM)
Reduce\-Scatter (vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvcounts\fP (\fISequence\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_scatter_block(sendbuf, recvbuf, op=SUM)
Reduce\-Scatter Block (regular, non\-vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%BufSpecB\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_scatter_block_init(sendbuf, recvbuf, op=SUM, info=INFO_NULL)
Persistent Reduce\-Scatter Block (regular, non\-vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%BufSpecB\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_scatter_init(sendbuf, recvbuf, recvcounts=None, op=SUM, info=INFO_NULL)
Persistent Reduce\-Scatter (vector version).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvcounts\fP (\fISequence\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Revoke()
Revoke a communicator.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Rsend(buf, dest, tag=0)
Blocking send in ready mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Rsend_init(buf, dest, tag=0)
Persistent request for a send in ready mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scatter(sendbuf, recvbuf, root=0)
Scatter data from one process to all other processes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scatter_init(sendbuf, recvbuf, root=0, info=INFO_NULL)
Persistent Scatter.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scatterv(sendbuf, recvbuf, root=0)
Scatter Vector.
.sp
Scatter data from one process to all other processes
providing different amounts of data and displacements.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scatterv_init(sendbuf, recvbuf, root=0, info=INFO_NULL)
Persistent Scatter Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Send(buf, dest, tag=0)
Blocking send.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function may block until the message is received.
Whether \fI\%Send\fP blocks or not depends on several factors and is
implementation dependent.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Send_init(buf, dest, tag=0)
Create a persistent request for a standard send.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Sendrecv(sendbuf, dest, sendtag=0, recvbuf=None, source=ANY_SOURCE, recvtag=ANY_TAG, status=None)
Send and receive a message.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function is guaranteed not to deadlock in situations
where pairs of blocking sends and receives may deadlock.
.UNINDENT
.UNINDENT
.sp
\fBCAUTION:\fP
.INDENT 7.0
.INDENT 3.5
A common mistake when using this function is to mismatch
the tags with the source and destination ranks, which can result in
deadlock.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Sendrecv_replace(buf, dest, sendtag=0, source=ANY_SOURCE, recvtag=ANY_TAG, status=None)
Send and receive a message.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This function is guaranteed not to deadlock in situations
where pairs of blocking sends and receives may deadlock.
.UNINDENT
.UNINDENT
.sp
\fBCAUTION:\fP
.INDENT 7.0
.INDENT 3.5
A common mistake when using this function is to mismatch
the tags with the source and destination ranks, which can result in
deadlock.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_attr(keyval, attrval)
Store attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBattrval\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_errhandler(errhandler)
Set the error handler for a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler\fP (\fI\%Errhandler\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_info(info)
Set new values for the hints associated with a communicator.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_name(name)
Set the print name for this communicator.
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Shrink()
Shrink a communicator to remove all failed processes.
.INDENT 7.0
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Split(color=0, key=0)
Split communicator by color and key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcolor\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Split_type(split_type, key=0, info=INFO_NULL)
Split communicator by split type.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsplit_type\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ssend(buf, dest, tag=0)
Blocking send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ssend_init(buf, dest, tag=0)
Persistent request for a send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B allgather(sendobj)
Gather to All.
.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B allreduce(sendobj, op=SUM)
Reduce to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B alltoall(sendobj)
All to All Scatter/Gather.
.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B barrier()
Barrier synchronization.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This method is equivalent to \fI\%Barrier\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bcast(obj, root=0)
Broadcast.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bsend(obj, dest, tag=0)
Send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null or predefined.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Comm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B gather(sendobj, root=0)
Gather.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ibsend(obj, dest, tag=0)
Nonblocking send in buffered mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B improbe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B iprobe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B irecv(buf=None, source=ANY_SOURCE, tag=ANY_TAG)
Nonblocking receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B isend(obj, dest, tag=0)
Nonblocking send.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B issend(obj, dest, tag=0)
Nonblocking send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mprobe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B probe(source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B recv(buf=None, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B reduce(sendobj, op=SUM, root=0)
Reduce to Root.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B scatter(sendobj, root=0)
Scatter.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B send(obj, dest, tag=0)
Send in standard mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B sendrecv(sendobj, dest, sendtag=0, recvbuf=None, source=ANY_SOURCE, recvtag=ANY_TAG, status=None)
Send and Receive.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\fIAny\fP)
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsendtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrecvtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ssend(obj, dest, tag=0)
Send in synchronous mode.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBdest\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B group
Group.
.UNINDENT
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B info
Info hints.
.UNINDENT
.INDENT 7.0
.TP
.B is_inter
Is intercommunicator.
.UNINDENT
.INDENT 7.0
.TP
.B is_intra
Is intracommunicator.
.UNINDENT
.INDENT 7.0
.TP
.B is_topo
Is a topology.
.UNINDENT
.INDENT 7.0
.TP
.B name
Print name.
.UNINDENT
.INDENT 7.0
.TP
.B rank
Rank of this process.
.UNINDENT
.INDENT 7.0
.TP
.B size
Number of processes.
.UNINDENT
.INDENT 7.0
.TP
.B topology
Topology type.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Datatype
.INDENT 0.0
.TP
.B class mpi4py.MPI.Datatype
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Datatype object.
.INDENT 7.0
.TP
.B static __new__(cls, datatype=None)
.INDENT 7.0
.TP
.B Parameters
\fBdatatype\fP (\fI\%Datatype\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Commit\fP()
T}	T{
Commit the datatype.
T}
_
T{
\fI\%Create_contiguous\fP(count)
T}	T{
Create a contiguous datatype.
T}
_
T{
\fI\%Create_darray\fP(size, rank, gsizes, distribs, ...)
T}	T{
Create a datatype for a distributed array on Cartesian process grids.
T}
_
T{
\fI\%Create_f90_complex\fP(p, r)
T}	T{
Return a bounded complex datatype.
T}
_
T{
\fI\%Create_f90_integer\fP(r)
T}	T{
Return a bounded integer datatype.
T}
_
T{
\fI\%Create_f90_real\fP(p, r)
T}	T{
Return a bounded real datatype.
T}
_
T{
\fI\%Create_hindexed\fP(blocklengths, displacements)
T}	T{
Create an indexed datatype.
T}
_
T{
\fI\%Create_hindexed_block\fP(blocklength, displacements)
T}	T{
Create an indexed datatype with constant\-sized blocks.
T}
_
T{
\fI\%Create_hvector\fP(count, blocklength, stride)
T}	T{
Create a vector (strided) datatype with stride in bytes.
T}
_
T{
\fI\%Create_indexed\fP(blocklengths, displacements)
T}	T{
Create an indexed datatype.
T}
_
T{
\fI\%Create_indexed_block\fP(blocklength, displacements)
T}	T{
Create an indexed datatype with constant\-sized blocks.
T}
_
T{
\fI\%Create_keyval\fP([copy_fn, delete_fn, nopython])
T}	T{
Create a new attribute key for datatypes.
T}
_
T{
\fI\%Create_resized\fP(lb, extent)
T}	T{
Create a datatype with a new lower bound and extent.
T}
_
T{
\fI\%Create_struct\fP(blocklengths, displacements, ...)
T}	T{
Create a general composite (struct) datatype.
T}
_
T{
\fI\%Create_subarray\fP(sizes, subsizes, starts[, order])
T}	T{
Create a datatype for a subarray of a multidimensional array.
T}
_
T{
\fI\%Create_vector\fP(count, blocklength, stride)
T}	T{
Create a vector (strided) datatype.
T}
_
T{
\fI\%Delete_attr\fP(keyval)
T}	T{
Delete attribute value associated with a key.
T}
_
T{
\fI\%Dup\fP()
T}	T{
Duplicate a datatype.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free the datatype.
T}
_
T{
\fI\%Free_keyval\fP(keyval)
T}	T{
Free an attribute key for datatypes.
T}
_
T{
\fI\%Get_attr\fP(keyval)
T}	T{
Retrieve attribute value by key.
T}
_
T{
\fI\%Get_contents\fP()
T}	T{
Return the input arguments used to create a datatype.
T}
_
T{
\fI\%Get_envelope\fP()
T}	T{
Return the number of input arguments used to create a datatype.
T}
_
T{
\fI\%Get_extent\fP()
T}	T{
Return lower bound and extent of datatype.
T}
_
T{
\fI\%Get_name\fP()
T}	T{
Get the print name for this datatype.
T}
_
T{
\fI\%Get_size\fP()
T}	T{
Return the number of bytes occupied by entries in the datatype.
T}
_
T{
\fI\%Get_true_extent\fP()
T}	T{
Return the true lower bound and extent of a datatype.
T}
_
T{
\fI\%Get_value_index\fP(value, index)
T}	T{
Return a predefined pair datatype.
T}
_
T{
\fI\%Match_size\fP(typeclass, size)
T}	T{
Find a datatype matching a specified size in bytes.
T}
_
T{
\fI\%Pack\fP(inbuf, outbuf, position, comm)
T}	T{
Pack into contiguous memory according to datatype.
T}
_
T{
\fI\%Pack_external\fP(datarep, inbuf, outbuf, position)
T}	T{
Pack into contiguous memory according to datatype.
T}
_
T{
\fI\%Pack_external_size\fP(datarep, count)
T}	T{
Determine the amount of space needed to pack a message.
T}
_
T{
\fI\%Pack_size\fP(count, comm)
T}	T{
Determine the amount of space needed to pack a message.
T}
_
T{
\fI\%Set_attr\fP(keyval, attrval)
T}	T{
Store attribute value associated with a key.
T}
_
T{
\fI\%Set_name\fP(name)
T}	T{
Set the print name for this datatype.
T}
_
T{
\fI\%Unpack\fP(inbuf, position, outbuf, comm)
T}	T{
Unpack from contiguous memory according to datatype.
T}
_
T{
\fI\%Unpack_external\fP(datarep, inbuf, position, outbuf)
T}	T{
Unpack from contiguous memory according to datatype.
T}
_
T{
\fI\%decode\fP()
T}	T{
Convenience method for decoding a datatype.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null or predefined.
T}
_
T{
\fI\%fromcode\fP(code)
T}	T{
Get predefined MPI datatype from character code or type string.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%tocode\fP()
T}	T{
Get character code or type string from predefined MPI datatype.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%combiner\fP
T}	T{
Combiner.
T}
_
T{
\fI\%contents\fP
T}	T{
Contents.
T}
_
T{
\fI\%envelope\fP
T}	T{
Envelope.
T}
_
T{
\fI\%extent\fP
T}	T{
Extent.
T}
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%is_named\fP
T}	T{
Is a named datatype.
T}
_
T{
\fI\%is_predefined\fP
T}	T{
Is a predefined datatype.
T}
_
T{
\fI\%lb\fP
T}	T{
Lower bound.
T}
_
T{
\fI\%name\fP
T}	T{
Print name.
T}
_
T{
\fI\%size\fP
T}	T{
Size (in bytes).
T}
_
T{
\fI\%true_extent\fP
T}	T{
True extent.
T}
_
T{
\fI\%true_lb\fP
T}	T{
True lower bound.
T}
_
T{
\fI\%true_ub\fP
T}	T{
True upper bound.
T}
_
T{
\fI\%typechar\fP
T}	T{
Character code.
T}
_
T{
\fI\%typestr\fP
T}	T{
Type string.
T}
_
T{
\fI\%ub\fP
T}	T{
Upper bound.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Commit()
Commit the datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_contiguous(count)
Create a contiguous datatype.
.INDENT 7.0
.TP
.B Parameters
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_darray(size, rank, gsizes, distribs, dargs, psizes, order=ORDER_C)
Create a datatype for a distributed array on Cartesian process grids.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBgsizes\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdistribs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBpsizes\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_f90_complex(p, r)
Return a bounded complex datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBr\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_f90_integer(r)
Return a bounded integer datatype.
.INDENT 7.0
.TP
.B Parameters
\fBr\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_f90_real(p, r)
Return a bounded real datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBr\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_hindexed(blocklengths, displacements)
Create an indexed datatype.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Displacements are measured in bytes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBblocklengths\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdisplacements\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_hindexed_block(blocklength, displacements)
Create an indexed datatype with constant\-sized blocks.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Displacements are measured in bytes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBblocklength\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisplacements\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_hvector(count, blocklength, stride)
Create a vector (strided) datatype with stride in bytes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBblocklength\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstride\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_indexed(blocklengths, displacements)
Create an indexed datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBblocklengths\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdisplacements\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_indexed_block(blocklength, displacements)
Create an indexed datatype with constant\-sized blocks.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBblocklength\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisplacements\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_keyval(copy_fn=None, delete_fn=None, nopython=False)
Create a new attribute key for datatypes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcopy_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Datatype\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBdelete_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Datatype\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBnopython\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_resized(lb, extent)
Create a datatype with a new lower bound and extent.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlb\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBextent\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_struct(blocklengths, displacements, datatypes)
Create a general composite (struct) datatype.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Displacements are measured in bytes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBblocklengths\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdisplacements\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdatatypes\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Datatype\fP\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_subarray(sizes, subsizes, starts, order=ORDER_C)
Create a datatype for a subarray of a multidimensional array.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsizes\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBsubsizes\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBstarts\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_vector(count, blocklength, stride)
Create a vector (strided) datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBblocklength\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstride\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Delete_attr(keyval)
Delete attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Dup()
Duplicate a datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free the datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Free_keyval(keyval)
Free an attribute key for datatypes.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_attr(keyval)
Retrieve attribute value by key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_contents()
Return the input arguments used to create a datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\fI\%Datatype\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_envelope()
Return the number of input arguments used to create a datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_extent()
Return lower bound and extent of datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_name()
Get the print name for this datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_size()
Return the number of bytes occupied by entries in the datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_true_extent()
Return the true lower bound and extent of a datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Get_value_index(value, index)
Return a predefined pair datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fI\%Datatype\fP)
.IP \(bu 2
\fBindex\fP (\fI\%Datatype\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Match_size(typeclass, size)
Find a datatype matching a specified size in bytes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtypeclass\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pack(inbuf, outbuf, position, comm)
Pack into contiguous memory according to datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBoutbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBposition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pack_external(datarep, inbuf, outbuf, position)
Pack into contiguous memory according to datatype.
.sp
Uses the portable data representation \fBexternal32\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdatarep\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBoutbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBposition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pack_external_size(datarep, count)
Determine the amount of space needed to pack a message.
.sp
Uses the portable data representation \fBexternal32\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Returns an upper bound measured in bytes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdatarep\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pack_size(count, comm)
Determine the amount of space needed to pack a message.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Returns an upper bound measured in bytes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_attr(keyval, attrval)
Store attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBattrval\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_name(name)
Set the print name for this datatype.
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unpack(inbuf, position, outbuf, comm)
Unpack from contiguous memory according to datatype.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBposition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBoutbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unpack_external(datarep, inbuf, position, outbuf)
Unpack from contiguous memory according to datatype.
.sp
Uses the portable data representation \fBexternal32\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdatarep\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBposition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBoutbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B decode()
Convenience method for decoding a datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\fI\%Datatype\fP, \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Datatype\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null or predefined.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromcode(code)
Get predefined MPI datatype from character code or type string.
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\fI\%Datatype\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Datatype\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tocode()
Get character code or type string from predefined MPI datatype.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B combiner
Combiner.
.UNINDENT
.INDENT 7.0
.TP
.B contents
Contents.
.UNINDENT
.INDENT 7.0
.TP
.B envelope
Envelope.
.UNINDENT
.INDENT 7.0
.TP
.B extent
Extent.
.UNINDENT
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B is_named
Is a named datatype.
.UNINDENT
.INDENT 7.0
.TP
.B is_predefined
Is a predefined datatype.
.UNINDENT
.INDENT 7.0
.TP
.B lb
Lower bound.
.UNINDENT
.INDENT 7.0
.TP
.B name
Print name.
.UNINDENT
.INDENT 7.0
.TP
.B size
Size (in bytes).
.UNINDENT
.INDENT 7.0
.TP
.B true_extent
True extent.
.UNINDENT
.INDENT 7.0
.TP
.B true_lb
True lower bound.
.UNINDENT
.INDENT 7.0
.TP
.B true_ub
True upper bound.
.UNINDENT
.INDENT 7.0
.TP
.B typechar
Character code.
.UNINDENT
.INDENT 7.0
.TP
.B typestr
Type string.
.UNINDENT
.INDENT 7.0
.TP
.B ub
Upper bound.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Distgraphcomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Distgraphcomm
Bases: \fI\%Topocomm\fP
.sp
Distributed graph topology intracommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Distgraphcomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Get_dist_neighbors\fP()
T}	T{
Return adjacency information for a distributed graph topology.
T}
_
T{
\fI\%Get_dist_neighbors_count\fP()
T}	T{
Return adjacency information for a distributed graph topology.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Get_dist_neighbors()
Return adjacency information for a distributed graph topology.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_dist_neighbors_count()
Return adjacency information for a distributed graph topology.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Errhandler
.INDENT 0.0
.TP
.B class mpi4py.MPI.Errhandler
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Error handler.
.INDENT 7.0
.TP
.B static __new__(cls, errhandler=None)
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler\fP (\fI\%Errhandler\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Free\fP()
T}	T{
Free an error handler.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Free()
Free an error handler.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.File
.INDENT 0.0
.TP
.B class mpi4py.MPI.File
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
File I/O context.
.INDENT 7.0
.TP
.B static __new__(cls, file=None)
.INDENT 7.0
.TP
.B Parameters
\fBfile\fP (\fI\%File\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Call_errhandler\fP(errorcode)
T}	T{
Call the error handler installed on a file.
T}
_
T{
\fI\%Close\fP()
T}	T{
Close a file.
T}
_
T{
\fI\%Create_errhandler\fP(errhandler_fn)
T}	T{
Create a new error handler for files.
T}
_
T{
\fI\%Delete\fP(filename[, info])
T}	T{
Delete a file.
T}
_
T{
\fI\%Get_amode\fP()
T}	T{
Return the file access mode.
T}
_
T{
\fI\%Get_atomicity\fP()
T}	T{
Return the atomicity mode.
T}
_
T{
\fI\%Get_byte_offset\fP(offset)
T}	T{
Return the absolute byte position in the file.
T}
_
T{
\fI\%Get_errhandler\fP()
T}	T{
Get the error handler for a file.
T}
_
T{
\fI\%Get_group\fP()
T}	T{
Access the group of processes that opened the file.
T}
_
T{
\fI\%Get_info\fP()
T}	T{
Return the current hints for a file.
T}
_
T{
\fI\%Get_position\fP()
T}	T{
Return the current position of the individual file pointer.
T}
_
T{
\fI\%Get_position_shared\fP()
T}	T{
Return the current position of the shared file pointer.
T}
_
T{
\fI\%Get_size\fP()
T}	T{
Return the file size.
T}
_
T{
\fI\%Get_type_extent\fP(datatype)
T}	T{
Return the extent of datatype in the file.
T}
_
T{
\fI\%Get_view\fP()
T}	T{
Return the file view.
T}
_
T{
\fI\%Iread\fP(buf)
T}	T{
Nonblocking read using individual file pointer.
T}
_
T{
\fI\%Iread_all\fP(buf)
T}	T{
Nonblocking collective read using individual file pointer.
T}
_
T{
\fI\%Iread_at\fP(offset, buf)
T}	T{
Nonblocking read using explicit offset.
T}
_
T{
\fI\%Iread_at_all\fP(offset, buf)
T}	T{
Nonblocking collective read using explicit offset.
T}
_
T{
\fI\%Iread_shared\fP(buf)
T}	T{
Nonblocking read using shared file pointer.
T}
_
T{
\fI\%Iwrite\fP(buf)
T}	T{
Nonblocking write using individual file pointer.
T}
_
T{
\fI\%Iwrite_all\fP(buf)
T}	T{
Nonblocking collective write using individual file pointer.
T}
_
T{
\fI\%Iwrite_at\fP(offset, buf)
T}	T{
Nonblocking write using explicit offset.
T}
_
T{
\fI\%Iwrite_at_all\fP(offset, buf)
T}	T{
Nonblocking collective write using explicit offset.
T}
_
T{
\fI\%Iwrite_shared\fP(buf)
T}	T{
Nonblocking write using shared file pointer.
T}
_
T{
\fI\%Open\fP(comm, filename[, amode, info])
T}	T{
Open a file.
T}
_
T{
\fI\%Preallocate\fP(size)
T}	T{
Preallocate storage space for a file.
T}
_
T{
\fI\%Read\fP(buf[, status])
T}	T{
Read using individual file pointer.
T}
_
T{
\fI\%Read_all\fP(buf[, status])
T}	T{
Collective read using individual file pointer.
T}
_
T{
\fI\%Read_all_begin\fP(buf)
T}	T{
Start a split collective read using individual file pointer.
T}
_
T{
\fI\%Read_all_end\fP(buf[, status])
T}	T{
Complete a split collective read using individual file pointer.
T}
_
T{
\fI\%Read_at\fP(offset, buf[, status])
T}	T{
Read using explicit offset.
T}
_
T{
\fI\%Read_at_all\fP(offset, buf[, status])
T}	T{
Collective read using explicit offset.
T}
_
T{
\fI\%Read_at_all_begin\fP(offset, buf)
T}	T{
Start a split collective read using explicit offset.
T}
_
T{
\fI\%Read_at_all_end\fP(buf[, status])
T}	T{
Complete a split collective read using explicit offset.
T}
_
T{
\fI\%Read_ordered\fP(buf[, status])
T}	T{
Collective read using shared file pointer.
T}
_
T{
\fI\%Read_ordered_begin\fP(buf)
T}	T{
Start a split collective read using shared file pointer.
T}
_
T{
\fI\%Read_ordered_end\fP(buf[, status])
T}	T{
Complete a split collective read using shared file pointer.
T}
_
T{
\fI\%Read_shared\fP(buf[, status])
T}	T{
Read using shared file pointer.
T}
_
T{
\fI\%Seek\fP(offset[, whence])
T}	T{
Update the individual file pointer.
T}
_
T{
\fI\%Seek_shared\fP(offset[, whence])
T}	T{
Update the shared file pointer.
T}
_
T{
\fI\%Set_atomicity\fP(flag)
T}	T{
Set the atomicity mode.
T}
_
T{
\fI\%Set_errhandler\fP(errhandler)
T}	T{
Set the error handler for a file.
T}
_
T{
\fI\%Set_info\fP(info)
T}	T{
Set new values for the hints associated with a file.
T}
_
T{
\fI\%Set_size\fP(size)
T}	T{
Set the file size.
T}
_
T{
\fI\%Set_view\fP([disp, etype, filetype, datarep, info])
T}	T{
Set the file view.
T}
_
T{
\fI\%Sync\fP()
T}	T{
Causes all previous writes to be transferred to the storage device.
T}
_
T{
\fI\%Write\fP(buf[, status])
T}	T{
Write using individual file pointer.
T}
_
T{
\fI\%Write_all\fP(buf[, status])
T}	T{
Collective write using individual file pointer.
T}
_
T{
\fI\%Write_all_begin\fP(buf)
T}	T{
Start a split collective write using individual file pointer.
T}
_
T{
\fI\%Write_all_end\fP(buf[, status])
T}	T{
Complete a split collective write using individual file pointer.
T}
_
T{
\fI\%Write_at\fP(offset, buf[, status])
T}	T{
Write using explicit offset.
T}
_
T{
\fI\%Write_at_all\fP(offset, buf[, status])
T}	T{
Collective write using explicit offset.
T}
_
T{
\fI\%Write_at_all_begin\fP(offset, buf)
T}	T{
Start a split collective write using explicit offset.
T}
_
T{
\fI\%Write_at_all_end\fP(buf[, status])
T}	T{
Complete a split collective write using explicit offset.
T}
_
T{
\fI\%Write_ordered\fP(buf[, status])
T}	T{
Collective write using shared file pointer.
T}
_
T{
\fI\%Write_ordered_begin\fP(buf)
T}	T{
Start a split collective write using shared file pointer.
T}
_
T{
\fI\%Write_ordered_end\fP(buf[, status])
T}	T{
Complete a split collective write using shared file pointer.
T}
_
T{
\fI\%Write_shared\fP(buf[, status])
T}	T{
Write using shared file pointer.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Close\fP if not null.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%amode\fP
T}	T{
Access mode.
T}
_
T{
\fI\%atomicity\fP
T}	T{
Atomicity mode.
T}
_
T{
\fI\%group\fP
T}	T{
Group.
T}
_
T{
\fI\%group_rank\fP
T}	T{
Group rank.
T}
_
T{
\fI\%group_size\fP
T}	T{
Group size.
T}
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%info\fP
T}	T{
Info hints.
T}
_
T{
\fI\%size\fP
T}	T{
Size (in bytes).
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Call_errhandler(errorcode)
Call the error handler installed on a file.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Close()
Close a file.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_errhandler(errhandler_fn)
Create a new error handler for files.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%File\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Delete(filename, info=INFO_NULL)
Delete a file.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfilename\fP (\X'tty: link https://docs.python.org/3/library/os.html#os.PathLike'\fI\%PathLike\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#bytes'\fI\%bytes\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_amode()
Return the file access mode.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_atomicity()
Return the atomicity mode.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_byte_offset(offset)
Return the absolute byte position in the file.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Input \fIoffset\fP is measured in etype units
relative to the current file view.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_errhandler()
Get the error handler for a file.
.INDENT 7.0
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_group()
Access the group of processes that opened the file.
.INDENT 7.0
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_info()
Return the current hints for a file.
.INDENT 7.0
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_position()
Return the current position of the individual file pointer.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Position is measured in etype units
relative to the current file view.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_position_shared()
Return the current position of the shared file pointer.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Position is measured in etype units
relative to the current view.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_size()
Return the file size.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_type_extent(datatype)
Return the extent of datatype in the file.
.INDENT 7.0
.TP
.B Parameters
\fBdatatype\fP (\fI\%Datatype\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_view()
Return the file view.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \fI\%Datatype\fP, \fI\%Datatype\fP, \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iread(buf)
Nonblocking read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iread_all(buf)
Nonblocking collective read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iread_at(offset, buf)
Nonblocking read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iread_at_all(offset, buf)
Nonblocking collective read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iread_shared(buf)
Nonblocking read using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iwrite(buf)
Nonblocking write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iwrite_all(buf)
Nonblocking collective write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iwrite_at(offset, buf)
Nonblocking write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iwrite_at_all(offset, buf)
Nonblocking collective write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iwrite_shared(buf)
Nonblocking write using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Open(comm, filename, amode=MODE_RDONLY, info=INFO_NULL)
Open a file.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP)
.IP \(bu 2
\fBfilename\fP (\X'tty: link https://docs.python.org/3/library/os.html#os.PathLike'\fI\%PathLike\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#bytes'\fI\%bytes\fP\X'tty: link')
.IP \(bu 2
\fBamode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Preallocate(size)
Preallocate storage space for a file.
.INDENT 7.0
.TP
.B Parameters
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read(buf, status=None)
Read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_all(buf, status=None)
Collective read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_all_begin(buf)
Start a split collective read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_all_end(buf, status=None)
Complete a split collective read using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_at(offset, buf, status=None)
Read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_at_all(offset, buf, status=None)
Collective read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_at_all_begin(offset, buf)
Start a split collective read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_at_all_end(buf, status=None)
Complete a split collective read using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_ordered(buf, status=None)
Collective read using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_ordered_begin(buf)
Start a split collective read using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_ordered_end(buf, status=None)
Complete a split collective read using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Read_shared(buf, status=None)
Read using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Seek(offset, whence=SEEK_SET)
Update the individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBwhence\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Seek_shared(offset, whence=SEEK_SET)
Update the shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBwhence\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_atomicity(flag)
Set the atomicity mode.
.INDENT 7.0
.TP
.B Parameters
\fBflag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_errhandler(errhandler)
Set the error handler for a file.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler\fP (\fI\%Errhandler\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_info(info)
Set new values for the hints associated with a file.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_size(size)
Set the file size.
.INDENT 7.0
.TP
.B Parameters
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_view(disp=0, etype=BYTE, filetype=None, datarep=\(aqnative\(aq, info=INFO_NULL)
Set the file view.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdisp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBetype\fP (\fI\%Datatype\fP)
.IP \(bu 2
\fBfiletype\fP (\fI\%Datatype\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBdatarep\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Sync()
Causes all previous writes to be transferred to the storage device.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write(buf, status=None)
Write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_all(buf, status=None)
Collective write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_all_begin(buf)
Start a split collective write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_all_end(buf, status=None)
Complete a split collective write using individual file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_at(offset, buf, status=None)
Write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_at_all(offset, buf, status=None)
Collective write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_at_all_begin(offset, buf)
Start a split collective write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBoffset\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_at_all_end(buf, status=None)
Complete a split collective write using explicit offset.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_ordered(buf, status=None)
Collective write using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_ordered_begin(buf)
Start a split collective write using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_ordered_end(buf, status=None)
Complete a split collective write using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Write_shared(buf, status=None)
Write using shared file pointer.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%File\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Close\fP if not null.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%File\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B amode
Access mode.
.UNINDENT
.INDENT 7.0
.TP
.B atomicity
Atomicity mode.
.UNINDENT
.INDENT 7.0
.TP
.B group
Group.
.UNINDENT
.INDENT 7.0
.TP
.B group_rank
Group rank.
.UNINDENT
.INDENT 7.0
.TP
.B group_size
Group size.
.UNINDENT
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B info
Info hints.
.UNINDENT
.INDENT 7.0
.TP
.B size
Size (in bytes).
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Graphcomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Graphcomm
Bases: \fI\%Topocomm\fP
.sp
General graph topology intracommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Graphcomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Get_dims\fP()
T}	T{
Return the number of nodes and edges.
T}
_
T{
\fI\%Get_neighbors\fP(rank)
T}	T{
Return list of neighbors of a process.
T}
_
T{
\fI\%Get_neighbors_count\fP(rank)
T}	T{
Return number of neighbors of a process.
T}
_
T{
\fI\%Get_topo\fP()
T}	T{
Return index and edges.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%dims\fP
T}	T{
Number of nodes and edges.
T}
_
T{
\fI\%edges\fP
T}	T{
Edges.
T}
_
T{
\fI\%index\fP
T}	T{
Index.
T}
_
T{
\fI\%nedges\fP
T}	T{
Number of edges.
T}
_
T{
\fI\%neighbors\fP
T}	T{
Neighbors.
T}
_
T{
\fI\%nneighbors\fP
T}	T{
Number of neighbors.
T}
_
T{
\fI\%nnodes\fP
T}	T{
Number of nodes.
T}
_
T{
\fI\%topo\fP
T}	T{
Topology information.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Get_dims()
Return the number of nodes and edges.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_neighbors(rank)
Return list of neighbors of a process.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_neighbors_count(rank)
Return number of neighbors of a process.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_topo()
Return index and edges.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'], \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']]
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B dims
Number of nodes and edges.
.UNINDENT
.INDENT 7.0
.TP
.B edges
Edges.
.UNINDENT
.INDENT 7.0
.TP
.B index
Index.
.UNINDENT
.INDENT 7.0
.TP
.B nedges
Number of edges.
.UNINDENT
.INDENT 7.0
.TP
.B neighbors
Neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B nneighbors
Number of neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B nnodes
Number of nodes.
.UNINDENT
.INDENT 7.0
.TP
.B topo
Topology information.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Grequest
.INDENT 0.0
.TP
.B class mpi4py.MPI.Grequest
Bases: \fI\%Request\fP
.sp
Generalized request handler.
.INDENT 7.0
.TP
.B static __new__(cls, request=None)
.INDENT 7.0
.TP
.B Parameters
\fBrequest\fP (\fI\%Grequest\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Complete\fP()
T}	T{
Notify that a user\-defined request is complete.
T}
_
T{
\fI\%Start\fP([query_fn, free_fn, cancel_fn, args, ...])
T}	T{
Create and return a user\-defined request.
T}
_
T{
\fI\%complete\fP([obj])
T}	T{
Notify that a user\-defined request is complete.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Complete()
Notify that a user\-defined request is complete.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Start(query_fn=None, free_fn=None, cancel_fn=None, args=None, kwargs=None)
Create and return a user\-defined request.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBquery_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBfree_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBcancel_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\&...\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBargs\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBkwargs\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#dict'\fI\%dict\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Grequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B complete(obj=None)
Notify that a user\-defined request is complete.
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Group
.INDENT 0.0
.TP
.B class mpi4py.MPI.Group
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Group of processes.
.INDENT 7.0
.TP
.B static __new__(cls, group=None)
.INDENT 7.0
.TP
.B Parameters
\fBgroup\fP (\fI\%Group\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Compare\fP(group)
T}	T{
Compare two groups.
T}
_
T{
\fI\%Create_from_session_pset\fP(session, pset_name)
T}	T{
Create a new group from session and process set.
T}
_
T{
\fI\%Difference\fP(group1, group2)
T}	T{
Create a new group from the difference of two existing groups.
T}
_
T{
\fI\%Dup\fP()
T}	T{
Duplicate a group.
T}
_
T{
\fI\%Excl\fP(ranks)
T}	T{
Create a new group by excluding listed members.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free a group.
T}
_
T{
\fI\%Get_rank\fP()
T}	T{
Return the rank of this process in a group.
T}
_
T{
\fI\%Get_size\fP()
T}	T{
Return the number of processes in a group.
T}
_
T{
\fI\%Incl\fP(ranks)
T}	T{
Create a new group by including listed members.
T}
_
T{
\fI\%Intersection\fP(group1, group2)
T}	T{
Create a new group from the intersection of two existing groups.
T}
_
T{
\fI\%Range_excl\fP(ranks)
T}	T{
Create a new group by excluding ranges of members.
T}
_
T{
\fI\%Range_incl\fP(ranks)
T}	T{
Create a new group by including ranges of members.
T}
_
T{
\fI\%Translate_ranks\fP([ranks, group])
T}	T{
Translate ranks in a group to those in another group.
T}
_
T{
\fI\%Union\fP(group1, group2)
T}	T{
Create a new group from the union of two existing groups.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null or predefined.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%rank\fP
T}	T{
Rank of this process.
T}
_
T{
\fI\%size\fP
T}	T{
Number of processes.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Compare(group)
Compare two groups.
.INDENT 7.0
.TP
.B Parameters
\fBgroup\fP (\fI\%Group\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_from_session_pset(session, pset_name)
Create a new group from session and process set.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsession\fP (\fI\%Session\fP)
.IP \(bu 2
\fBpset_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Difference(group1, group2)
Create a new group from the difference of two existing groups.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup1\fP (\fI\%Group\fP)
.IP \(bu 2
\fBgroup2\fP (\fI\%Group\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Dup()
Duplicate a group.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Excl(ranks)
Create a new group by excluding listed members.
.INDENT 7.0
.TP
.B Parameters
\fBranks\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a group.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_rank()
Return the rank of this process in a group.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_size()
Return the number of processes in a group.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Incl(ranks)
Create a new group by including listed members.
.INDENT 7.0
.TP
.B Parameters
\fBranks\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Intersection(group1, group2)
Create a new group from the intersection of two existing groups.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup1\fP (\fI\%Group\fP)
.IP \(bu 2
\fBgroup2\fP (\fI\%Group\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Range_excl(ranks)
Create a new group by excluding ranges of members.
.INDENT 7.0
.TP
.B Parameters
\fBranks\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Range_incl(ranks)
Create a new group by including ranges of members.
.INDENT 7.0
.TP
.B Parameters
\fBranks\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Translate_ranks(ranks=None, group=None)
Translate ranks in a group to those in another group.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBranks\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBgroup\fP (\fI\%Group\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Union(group1, group2)
Create a new group from the union of two existing groups.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup1\fP (\fI\%Group\fP)
.IP \(bu 2
\fBgroup2\fP (\fI\%Group\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null or predefined.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B rank
Rank of this process.
.UNINDENT
.INDENT 7.0
.TP
.B size
Number of processes.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.InPlaceType
.INDENT 0.0
.TP
.B class mpi4py.MPI.InPlaceType
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.sp
Type of \fI\%IN_PLACE\fP\&.
.INDENT 7.0
.TP
.B static __new__(cls)
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Info
.INDENT 0.0
.TP
.B class mpi4py.MPI.Info
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Info object.
.INDENT 7.0
.TP
.B static __new__(cls, info=None)
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Create\fP([items])
T}	T{
Create a new info object.
T}
_
T{
\fI\%Create_env\fP([args])
T}	T{
Create a new environment info object.
T}
_
T{
\fI\%Delete\fP(key)
T}	T{
Remove a (key, value) pair from info.
T}
_
T{
\fI\%Dup\fP()
T}	T{
Duplicate an existing info object.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free an info object.
T}
_
T{
\fI\%Get\fP(key)
T}	T{
Retrieve the value associated with a key.
T}
_
T{
\fI\%Get_nkeys\fP()
T}	T{
Return the number of currently defined keys in info.
T}
_
T{
\fI\%Get_nthkey\fP(n)
T}	T{
Return the \fIn\fP\-th defined key in info.
T}
_
T{
\fI\%Set\fP(key, value)
T}	T{
Store a value associated with a key.
T}
_
T{
\fI\%clear\fP()
T}	T{
Clear contents.
T}
_
T{
\fI\%copy\fP()
T}	T{
Copy contents.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null or predefined.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%get\fP(key[, default])
T}	T{
Retrieve value by key.
T}
_
T{
\fI\%items\fP()
T}	T{
Return list of items.
T}
_
T{
\fI\%keys\fP()
T}	T{
Return list of keys.
T}
_
T{
\fI\%pop\fP(key, *default)
T}	T{
Pop value by key.
T}
_
T{
\fI\%popitem\fP()
T}	T{
Pop first item.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%update\fP([items])
T}	T{
Update contents.
T}
_
T{
\fI\%values\fP()
T}	T{
Return list of values.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B classmethod Create(items=None)
Create a new info object.
.INDENT 7.0
.TP
.B Parameters
\fBitems\fP (\fI\%Info\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Mapping'\fI\%Mapping\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI]\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_env(args=None)
Create a new environment info object.
.INDENT 7.0
.TP
.B Parameters
\fBargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Delete(key)
Remove a (key, value) pair from info.
.INDENT 7.0
.TP
.B Parameters
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Dup()
Duplicate an existing info object.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free an info object.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get(key)
Retrieve the value associated with a key.
.INDENT 7.0
.TP
.B Parameters
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_nkeys()
Return the number of currently defined keys in info.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_nthkey(n)
Return the \fIn\fP\-th defined key in info.
.INDENT 7.0
.TP
.B Parameters
\fBn\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set(key, value)
Store a value associated with a key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBvalue\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clear()
Clear contents.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B copy()
Copy contents.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null or predefined.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get(key, default=None)
Retrieve value by key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBdefault\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B items()
Return list of items.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B keys()
Return list of keys.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B pop(key, *default)
Pop value by key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkey\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBdefault\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B popitem()
Pop first item.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B update(items=(), **kwds)
Update contents.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBitems\fP (\fI\%Info\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Mapping'\fI\%Mapping\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI]\fP\fI]\fP)
.IP \(bu 2
\fBkwds\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B values()
Return list of values.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link']
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Intercomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Intercomm
Bases: \fI\%Comm\fP
.sp
Intercommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Intercomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Create_from_groups\fP(local_group, ...[, ...])
T}	T{
Create communicator from group.
T}
_
T{
\fI\%Get_remote_group\fP()
T}	T{
Access the remote group associated with the inter\-communicator.
T}
_
T{
\fI\%Get_remote_size\fP()
T}	T{
Intercommunicator remote size.
T}
_
T{
\fI\%Merge\fP([high])
T}	T{
Merge intercommunicator into an intracommunicator.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%remote_group\fP
T}	T{
Remote group.
T}
_
T{
\fI\%remote_size\fP
T}	T{
Number of remote processes.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B classmethod Create_from_groups(local_group, local_leader, remote_group, remote_leader, stringtag=\(aqorg.mpi4py\(aq, info=INFO_NULL, errhandler=None)
Create communicator from group.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlocal_group\fP (\fI\%Group\fP)
.IP \(bu 2
\fBlocal_leader\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBremote_group\fP (\fI\%Group\fP)
.IP \(bu 2
\fBremote_leader\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstringtag\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBerrhandler\fP (\fI\%Errhandler\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intracomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_remote_group()
Access the remote group associated with the inter\-communicator.
.INDENT 7.0
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_remote_size()
Intercommunicator remote size.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Merge(high=False)
Merge intercommunicator into an intracommunicator.
.INDENT 7.0
.TP
.B Parameters
\fBhigh\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.TP
.B Return type
\fI\%Intracomm\fP
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B remote_group
Remote group.
.UNINDENT
.INDENT 7.0
.TP
.B remote_size
Number of remote processes.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Intracomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Intracomm
Bases: \fI\%Comm\fP
.sp
Intracommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Intracomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Accept\fP(port_name[, info, root])
T}	T{
Accept a request to form a new intercommunicator.
T}
_
T{
\fI\%Cart_map\fP(dims[, periods])
T}	T{
Determine optimal process placement on a Cartesian topology.
T}
_
T{
\fI\%Connect\fP(port_name[, info, root])
T}	T{
Make a request to form a new intercommunicator.
T}
_
T{
\fI\%Create_cart\fP(dims[, periods, reorder])
T}	T{
Create cartesian communicator.
T}
_
T{
\fI\%Create_dist_graph\fP(sources, degrees, destinations)
T}	T{
Create distributed graph communicator.
T}
_
T{
\fI\%Create_dist_graph_adjacent\fP(sources, destinations)
T}	T{
Create distributed graph communicator.
T}
_
T{
\fI\%Create_from_group\fP(group[, stringtag, info, ...])
T}	T{
Create communicator from group.
T}
_
T{
\fI\%Create_graph\fP(index, edges[, reorder])
T}	T{
Create graph communicator.
T}
_
T{
\fI\%Create_group\fP(group[, tag])
T}	T{
Create communicator from group.
T}
_
T{
\fI\%Create_intercomm\fP(local_leader, peer_comm, ...)
T}	T{
Create intercommunicator.
T}
_
T{
\fI\%Exscan\fP(sendbuf, recvbuf[, op])
T}	T{
Exclusive Scan.
T}
_
T{
\fI\%Exscan_init\fP(sendbuf, recvbuf[, op, info])
T}	T{
Persistent Exclusive Scan.
T}
_
T{
\fI\%Graph_map\fP(index, edges)
T}	T{
Determine optimal process placement on a graph topology.
T}
_
T{
\fI\%Iexscan\fP(sendbuf, recvbuf[, op])
T}	T{
Inclusive Scan.
T}
_
T{
\fI\%Iscan\fP(sendbuf, recvbuf[, op])
T}	T{
Inclusive Scan.
T}
_
T{
\fI\%Scan\fP(sendbuf, recvbuf[, op])
T}	T{
Inclusive Scan.
T}
_
T{
\fI\%Scan_init\fP(sendbuf, recvbuf[, op, info])
T}	T{
Persistent Inclusive Scan.
T}
_
T{
\fI\%Spawn\fP(command[, args, maxprocs, info, root, ...])
T}	T{
Spawn instances of a single MPI application.
T}
_
T{
\fI\%Spawn_multiple\fP(command[, args, maxprocs, ...])
T}	T{
Spawn instances of multiple MPI applications.
T}
_
T{
\fI\%exscan\fP(sendobj[, op])
T}	T{
Exclusive Scan.
T}
_
T{
\fI\%scan\fP(sendobj[, op])
T}	T{
Inclusive Scan.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Accept(port_name, info=INFO_NULL, root=0)
Accept a request to form a new intercommunicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBport_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Cart_map(dims, periods=None)
Determine optimal process placement on a Cartesian topology.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdims\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBperiods\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Connect(port_name, info=INFO_NULL, root=0)
Make a request to form a new intercommunicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBport_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_cart(dims, periods=None, reorder=False)
Create cartesian communicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdims\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBperiods\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBreorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Cartcomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_dist_graph(sources, degrees, destinations, weights=None, info=INFO_NULL, reorder=False)
Create distributed graph communicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsources\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdegrees\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdestinations\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBweights\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBreorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Distgraphcomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_dist_graph_adjacent(sources, destinations, sourceweights=None, destweights=None, info=INFO_NULL, reorder=False)
Create distributed graph communicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsources\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBdestinations\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBsourceweights\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBdestweights\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBreorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Distgraphcomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_from_group(group, stringtag=\(aqorg.mpi4py\(aq, info=INFO_NULL, errhandler=None)
Create communicator from group.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup\fP (\fI\%Group\fP)
.IP \(bu 2
\fBstringtag\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBerrhandler\fP (\fI\%Errhandler\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intracomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_graph(index, edges, reorder=False)
Create graph communicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBedges\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBreorder\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Graphcomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_group(group, tag=0)
Create communicator from group.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup\fP (\fI\%Group\fP)
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intracomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_intercomm(local_leader, peer_comm, remote_leader, tag=0)
Create intercommunicator.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlocal_leader\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBpeer_comm\fP (\fI\%Intracomm\fP)
.IP \(bu 2
\fBremote_leader\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Exscan(sendbuf, recvbuf, op=SUM)
Exclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Exscan_init(sendbuf, recvbuf, op=SUM, info=INFO_NULL)
Persistent Exclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Graph_map(index, edges)
Determine optimal process placement on a graph topology.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBedges\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iexscan(sendbuf, recvbuf, op=SUM)
Inclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iscan(sendbuf, recvbuf, op=SUM)
Inclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scan(sendbuf, recvbuf, op=SUM)
Inclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Scan_init(sendbuf, recvbuf, op=SUM, info=INFO_NULL)
Persistent Inclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP\fI | \fP\fI\%InPlace\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Spawn(command, args=None, maxprocs=1, info=INFO_NULL, root=0, errcodes=None)
Spawn instances of a single MPI application.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcommand\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBmaxprocs\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBerrcodes\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Spawn_multiple(command, args=None, maxprocs=None, info=INFO_NULL, root=0, errcodes=None)
Spawn instances of multiple MPI applications.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcommand\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBargs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI]\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBmaxprocs\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Info\fP\fI] \fP\fI| \fP\fI\%Info\fP)
.IP \(bu 2
\fBroot\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBerrcodes\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Intercomm\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B exscan(sendobj, op=SUM)
Exclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B scan(sendobj, op=SUM)
Inclusive Scan.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Message
.INDENT 0.0
.TP
.B class mpi4py.MPI.Message
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Matched message.
.INDENT 7.0
.TP
.B static __new__(cls, message=None)
.INDENT 7.0
.TP
.B Parameters
\fBmessage\fP (\fI\%Message\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Iprobe\fP(comm[, source, tag, status])
T}	T{
Nonblocking test for a matched message.
T}
_
T{
\fI\%Irecv\fP(buf)
T}	T{
Nonblocking receive of matched message.
T}
_
T{
\fI\%Probe\fP(comm[, source, tag, status])
T}	T{
Blocking test for a matched message.
T}
_
T{
\fI\%Recv\fP(buf[, status])
T}	T{
Blocking receive of matched message.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Do nothing.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%iprobe\fP(comm[, source, tag, status])
T}	T{
Nonblocking test for a matched message.
T}
_
T{
\fI\%irecv\fP()
T}	T{
Nonblocking receive of matched message.
T}
_
T{
\fI\%probe\fP(comm[, source, tag, status])
T}	T{
Blocking test for a matched message.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%recv\fP([status])
T}	T{
Blocking receive of matched message.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B classmethod Iprobe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Irecv(buf)
Nonblocking receive of matched message.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%BufSpec\fP)
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Probe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Recv(buf, status=None)
Blocking receive of matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Do nothing.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Message\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod iprobe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Nonblocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B irecv()
Nonblocking receive of matched message.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod probe(comm, source=ANY_SOURCE, tag=ANY_TAG, status=None)
Blocking test for a matched message.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcomm\fP (\fI\%Comm\fP)
.IP \(bu 2
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B recv(status=None)
Blocking receive of matched message.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Op
.INDENT 0.0
.TP
.B class mpi4py.MPI.Op
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Reduction operation.
.INDENT 7.0
.TP
.B static __new__(cls, op=None)
.INDENT 7.0
.TP
.B Parameters
\fBop\fP (\fI\%Op\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Create\fP(function[, commute])
T}	T{
Create a user\-defined reduction operation.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free a user\-defined reduction operation.
T}
_
T{
\fI\%Is_commutative\fP()
T}	T{
Query reduction operations for their commutativity.
T}
_
T{
\fI\%Reduce_local\fP(inbuf, inoutbuf)
T}	T{
Apply a reduction operation to local data.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null or predefined.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%is_commutative\fP
T}	T{
Is a commutative operation.
T}
_
T{
\fI\%is_predefined\fP
T}	T{
Is a predefined operation.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B classmethod Create(function, commute=False)
Create a user\-defined reduction operation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfunction\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Buffer\fP\fI, \fP\fI\%Buffer\fP\fI, \fP\fI\%Datatype\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBcommute\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a user\-defined reduction operation.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Is_commutative()
Query reduction operations for their commutativity.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Reduce_local(inbuf, inoutbuf)
Apply a reduction operation to local data.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBinoutbuf\fP (\fI\%BufSpec\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Op\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null or predefined.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Op\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B is_commutative
Is a commutative operation.
.UNINDENT
.INDENT 7.0
.TP
.B is_predefined
Is a predefined operation.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Pickle
.INDENT 0.0
.TP
.B class mpi4py.MPI.Pickle
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Pickle/unpickle Python objects.
.INDENT 7.0
.TP
.B static __new__(cls, pickle=None)
.INDENT 7.0
.TP
.B Parameters
\fBpickle\fP (\fI\%Pickle\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%dumps\fP(obj)
T}	T{
Serialize object to pickle data stream.
T}
_
T{
\fI\%dumps_oob\fP(obj)
T}	T{
Serialize object to pickle data stream and out\-of\-band buffers.
T}
_
T{
\fI\%loads\fP(data)
T}	T{
Deserialize object from pickle data stream.
T}
_
T{
\fI\%loads_oob\fP(data, buffers)
T}	T{
Deserialize object from pickle data stream and out\-of\-band buffers.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%PROTOCOL\fP
T}	T{
Protocol version.
T}
_
T{
\fI\%THRESHOLD\fP
T}	T{
Out\-of\-band threshold.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B dumps(obj)
Serialize object to pickle data stream.
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#bytes'\fI\%bytes\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B dumps_oob(obj)
Serialize object to pickle data stream and out\-of\-band buffers.
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#bytes'\fI\%bytes\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\fI\%buffer\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B loads(data)
Deserialize object from pickle data stream.
.INDENT 7.0
.TP
.B Parameters
\fBdata\fP (\fI\%Buffer\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B loads_oob(data, buffers)
Deserialize object from pickle data stream and out\-of\-band buffers.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdata\fP (\fI\%Buffer\fP)
.IP \(bu 2
\fBbuffers\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Iterable'\fI\%Iterable\fP\X'tty: link'\fI[\fP\fI\%Buffer\fP\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B PROTOCOL
Protocol version.
.UNINDENT
.INDENT 7.0
.TP
.B THRESHOLD
Out\-of\-band threshold.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Prequest
.INDENT 0.0
.TP
.B class mpi4py.MPI.Prequest
Bases: \fI\%Request\fP
.sp
Persistent request handler.
.INDENT 7.0
.TP
.B static __new__(cls, request=None)
.INDENT 7.0
.TP
.B Parameters
\fBrequest\fP (\fI\%Prequest\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Parrived\fP(partition)
T}	T{
Test partial completion of a partitioned receive operation.
T}
_
T{
\fI\%Pready\fP(partition)
T}	T{
Mark a given partition as ready.
T}
_
T{
\fI\%Pready_list\fP(partitions)
T}	T{
Mark a sequence of partitions as ready.
T}
_
T{
\fI\%Pready_range\fP(partition_low, partition_high)
T}	T{
Mark a range of partitions as ready.
T}
_
T{
\fI\%Start\fP()
T}	T{
Initiate a communication with a persistent request.
T}
_
T{
\fI\%Startall\fP(requests)
T}	T{
Start a collection of persistent requests.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Parrived(partition)
Test partial completion of a partitioned receive operation.
.INDENT 7.0
.TP
.B Parameters
\fBpartition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pready(partition)
Mark a given partition as ready.
.INDENT 7.0
.TP
.B Parameters
\fBpartition\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pready_list(partitions)
Mark a sequence of partitions as ready.
.INDENT 7.0
.TP
.B Parameters
\fBpartitions\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Pready_range(partition_low, partition_high)
Mark a range of partitions as ready.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpartition_low\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBpartition_high\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Start()
Initiate a communication with a persistent request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Startall(requests)
Start a collection of persistent requests.
.INDENT 7.0
.TP
.B Parameters
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Prequest\fP\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Request
.INDENT 0.0
.TP
.B class mpi4py.MPI.Request
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Request handler.
.INDENT 7.0
.TP
.B static __new__(cls, request=None)
.INDENT 7.0
.TP
.B Parameters
\fBrequest\fP (\fI\%Request\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Cancel\fP()
T}	T{
Cancel a request.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free a communication request.
T}
_
T{
\fI\%Get_status\fP([status])
T}	T{
Non\-destructive test for the completion of a request.
T}
_
T{
\fI\%Get_status_all\fP(requests[, statuses])
T}	T{
Non\-destructive test for the completion of all requests.
T}
_
T{
\fI\%Get_status_any\fP(requests[, status])
T}	T{
Non\-destructive test for the completion of any requests.
T}
_
T{
\fI\%Get_status_some\fP(requests[, statuses])
T}	T{
Non\-destructive test for completion of some requests.
T}
_
T{
\fI\%Test\fP([status])
T}	T{
Test for the completion of a non\-blocking operation.
T}
_
T{
\fI\%Testall\fP(requests[, statuses])
T}	T{
Test for completion of all previously initiated requests.
T}
_
T{
\fI\%Testany\fP(requests[, status])
T}	T{
Test for completion of any previously initiated request.
T}
_
T{
\fI\%Testsome\fP(requests[, statuses])
T}	T{
Test for completion of some previously initiated requests.
T}
_
T{
\fI\%Wait\fP([status])
T}	T{
Wait for a non\-blocking operation to complete.
T}
_
T{
\fI\%Waitall\fP(requests[, statuses])
T}	T{
Wait for all previously initiated requests to complete.
T}
_
T{
\fI\%Waitany\fP(requests[, status])
T}	T{
Wait for any previously initiated request to complete.
T}
_
T{
\fI\%Waitsome\fP(requests[, statuses])
T}	T{
Wait for some previously initiated requests to complete.
T}
_
T{
\fI\%cancel\fP()
T}	T{
Cancel a request.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%get_status\fP([status])
T}	T{
Non\-destructive test for the completion of a request.
T}
_
T{
\fI\%get_status_all\fP(requests[, statuses])
T}	T{
Non\-destructive test for the completion of all requests.
T}
_
T{
\fI\%get_status_any\fP(requests[, status])
T}	T{
Non\-destructive test for the completion of any requests.
T}
_
T{
\fI\%get_status_some\fP(requests[, statuses])
T}	T{
Non\-destructive test for completion of some requests.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%test\fP([status])
T}	T{
Test for the completion of a non\-blocking operation.
T}
_
T{
\fI\%testall\fP(requests[, statuses])
T}	T{
Test for completion of all previously initiated requests.
T}
_
T{
\fI\%testany\fP(requests[, status])
T}	T{
Test for completion of any previously initiated request.
T}
_
T{
\fI\%testsome\fP(requests[, statuses])
T}	T{
Test for completion of some previously initiated requests.
T}
_
T{
\fI\%wait\fP([status])
T}	T{
Wait for a non\-blocking operation to complete.
T}
_
T{
\fI\%waitall\fP(requests[, statuses])
T}	T{
Wait for all previously initiated requests to complete.
T}
_
T{
\fI\%waitany\fP(requests[, status])
T}	T{
Wait for any previously initiated request to complete.
T}
_
T{
\fI\%waitsome\fP(requests[, statuses])
T}	T{
Wait for some previously initiated requests to complete.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Cancel()
Cancel a request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a communication request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_status(status=None)
Non\-destructive test for the completion of a request.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Get_status_all(requests, statuses=None)
Non\-destructive test for the completion of all requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Get_status_any(requests, status=None)
Non\-destructive test for the completion of any requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Get_status_some(requests, statuses=None)
Non\-destructive test for completion of some requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Test(status=None)
Test for the completion of a non\-blocking operation.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Testall(requests, statuses=None)
Test for completion of all previously initiated requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Testany(requests, status=None)
Test for completion of any previously initiated request.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Testsome(requests, statuses=None)
Test for completion of some previously initiated requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Wait(status=None)
Wait for a non\-blocking operation to complete.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Waitall(requests, statuses=None)
Wait for all previously initiated requests to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Waitany(requests, status=None)
Wait for any previously initiated request to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Waitsome(requests, statuses=None)
Wait for some previously initiated requests to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cancel()
Cancel a request.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_status(status=None)
Non\-destructive test for the completion of a request.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod get_status_all(requests, statuses=None)
Non\-destructive test for the completion of all requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod get_status_any(requests, status=None)
Non\-destructive test for the completion of any requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod get_status_some(requests, statuses=None)
Non\-destructive test for completion of some requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B test(status=None)
Test for the completion of a non\-blocking operation.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod testall(requests, statuses=None)
Test for completion of all previously initiated requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod testany(requests, status=None)
Test for completion of any previously initiated request.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod testsome(requests, statuses=None)
Test for completion of some previously initiated requests.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wait(status=None)
Wait for a non\-blocking operation to complete.
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod waitall(requests, statuses=None)
Wait for all previously initiated requests to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod waitany(requests, status=None)
Wait for any previously initiated request to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod waitsome(requests, statuses=None)
Wait for some previously initiated requests to complete.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequests\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\fI\%Request\fP\fI]\fP)
.IP \(bu 2
\fBstatuses\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\fI\%Status\fP\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'] | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link']
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Session
.INDENT 0.0
.TP
.B class mpi4py.MPI.Session
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Session context.
.INDENT 7.0
.TP
.B static __new__(cls, session=None)
.INDENT 7.0
.TP
.B Parameters
\fBsession\fP (\fI\%Session\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Attach_buffer\fP(buf)
T}	T{
Attach a user\-provided buffer for sending in buffered mode.
T}
_
T{
\fI\%Call_errhandler\fP(errorcode)
T}	T{
Call the error handler installed on a session.
T}
_
T{
\fI\%Create_errhandler\fP(errhandler_fn)
T}	T{
Create a new error handler for sessions.
T}
_
T{
\fI\%Create_group\fP(pset_name)
T}	T{
Create a new group from session and process set.
T}
_
T{
\fI\%Detach_buffer\fP()
T}	T{
Remove an existing attached buffer.
T}
_
T{
\fI\%Finalize\fP()
T}	T{
Finalize a session.
T}
_
T{
\fI\%Flush_buffer\fP()
T}	T{
Block until all buffered messages have been transmitted.
T}
_
T{
\fI\%Get_errhandler\fP()
T}	T{
Get the error handler for a session.
T}
_
T{
\fI\%Get_info\fP()
T}	T{
Return the current hints for a session.
T}
_
T{
\fI\%Get_nth_pset\fP(n[, info])
T}	T{
Name of the \fIn\fP\-th process set.
T}
_
T{
\fI\%Get_num_psets\fP([info])
T}	T{
Number of available process sets.
T}
_
T{
\fI\%Get_pset_info\fP(pset_name)
T}	T{
Return the current hints for a session and process set.
T}
_
T{
\fI\%Iflush_buffer\fP()
T}	T{
Nonblocking flush for buffered messages.
T}
_
T{
\fI\%Init\fP([info, errhandler])
T}	T{
Create a new session.
T}
_
T{
\fI\%Set_errhandler\fP(errhandler)
T}	T{
Set the error handler for a session.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Finalize\fP if not null.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Attach_buffer(buf)
Attach a user\-provided buffer for sending in buffered mode.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Call_errhandler(errorcode)
Call the error handler installed on a session.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_errhandler(errhandler_fn)
Create a new error handler for sessions.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Session\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Create_group(pset_name)
Create a new group from session and process set.
.INDENT 7.0
.TP
.B Parameters
\fBpset_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Detach_buffer()
Remove an existing attached buffer.
.INDENT 7.0
.TP
.B Return type
\fI\%Buffer\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Finalize()
Finalize a session.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush_buffer()
Block until all buffered messages have been transmitted.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_errhandler()
Get the error handler for a session.
.INDENT 7.0
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_info()
Return the current hints for a session.
.INDENT 7.0
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_nth_pset(n, info=INFO_NULL)
Name of the \fIn\fP\-th process set.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBn\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_num_psets(info=INFO_NULL)
Number of available process sets.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_pset_info(pset_name)
Return the current hints for a session and process set.
.INDENT 7.0
.TP
.B Parameters
\fBpset_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Iflush_buffer()
Nonblocking flush for buffered messages.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Init(info=INFO_NULL, errhandler=None)
Create a new session.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBerrhandler\fP (\fI\%Errhandler\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_errhandler(errhandler)
Set the error handler for a session.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler\fP (\fI\%Errhandler\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Session\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Finalize\fP if not null.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Session\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Status
.INDENT 0.0
.TP
.B class mpi4py.MPI.Status
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Status object.
.INDENT 7.0
.TP
.B static __new__(cls, status=None)
.INDENT 7.0
.TP
.B Parameters
\fBstatus\fP (\fI\%Status\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Get_count\fP([datatype])
T}	T{
Get the number of \fItop level\fP elements.
T}
_
T{
\fI\%Get_elements\fP(datatype)
T}	T{
Get the number of basic elements in a datatype.
T}
_
T{
\fI\%Get_error\fP()
T}	T{
Get message error.
T}
_
T{
\fI\%Get_source\fP()
T}	T{
Get message source.
T}
_
T{
\fI\%Get_tag\fP()
T}	T{
Get message tag.
T}
_
T{
\fI\%Is_cancelled\fP()
T}	T{
Test to see if a request was cancelled.
T}
_
T{
\fI\%Set_cancelled\fP(flag)
T}	T{
Set the cancelled state associated with a status.
T}
_
T{
\fI\%Set_elements\fP(datatype, count)
T}	T{
Set the number of elements in a status.
T}
_
T{
\fI\%Set_error\fP(error)
T}	T{
Set message error.
T}
_
T{
\fI\%Set_source\fP(source)
T}	T{
Set message source.
T}
_
T{
\fI\%Set_tag\fP(tag)
T}	T{
Set message tag.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%cancelled\fP
T}	T{
Cancelled state.
T}
_
T{
\fI\%count\fP
T}	T{
Byte count.
T}
_
T{
\fI\%error\fP
T}	T{
Message error.
T}
_
T{
\fI\%source\fP
T}	T{
Message source.
T}
_
T{
\fI\%tag\fP
T}	T{
Message tag.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Get_count(datatype=BYTE)
Get the number of \fItop level\fP elements.
.INDENT 7.0
.TP
.B Parameters
\fBdatatype\fP (\fI\%Datatype\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_elements(datatype)
Get the number of basic elements in a datatype.
.INDENT 7.0
.TP
.B Parameters
\fBdatatype\fP (\fI\%Datatype\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_error()
Get message error.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_source()
Get message source.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_tag()
Get message tag.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Is_cancelled()
Test to see if a request was cancelled.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_cancelled(flag)
Set the cancelled state associated with a status.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This method should be used only when implementing
query callback functions for generalized requests.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBflag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_elements(datatype, count)
Set the number of elements in a status.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This method should be only used when implementing
query callback functions for generalized requests.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdatatype\fP (\fI\%Datatype\fP)
.IP \(bu 2
\fBcount\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_error(error)
Set message error.
.INDENT 7.0
.TP
.B Parameters
\fBerror\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_source(source)
Set message source.
.INDENT 7.0
.TP
.B Parameters
\fBsource\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_tag(tag)
Set message tag.
.INDENT 7.0
.TP
.B Parameters
\fBtag\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B cancelled
Cancelled state.
.UNINDENT
.INDENT 7.0
.TP
.B count
Byte count.
.UNINDENT
.INDENT 7.0
.TP
.B error
Message error.
.UNINDENT
.INDENT 7.0
.TP
.B source
Message source.
.UNINDENT
.INDENT 7.0
.TP
.B tag
Message tag.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Topocomm
.INDENT 0.0
.TP
.B class mpi4py.MPI.Topocomm
Bases: \fI\%Intracomm\fP
.sp
Topology intracommunicator.
.INDENT 7.0
.TP
.B static __new__(cls, comm=None)
.INDENT 7.0
.TP
.B Parameters
\fBcomm\fP (\fI\%Topocomm\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Ineighbor_allgather\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Neighbor Gather to All.
T}
_
T{
\fI\%Ineighbor_allgatherv\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Neighbor Gather to All Vector.
T}
_
T{
\fI\%Ineighbor_alltoall\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Neighbor All to All.
T}
_
T{
\fI\%Ineighbor_alltoallv\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Neighbor All to All Vector.
T}
_
T{
\fI\%Ineighbor_alltoallw\fP(sendbuf, recvbuf)
T}	T{
Nonblocking Neighbor All to All General.
T}
_
T{
\fI\%Neighbor_allgather\fP(sendbuf, recvbuf)
T}	T{
Neighbor Gather to All.
T}
_
T{
\fI\%Neighbor_allgather_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Neighbor Gather to All.
T}
_
T{
\fI\%Neighbor_allgatherv\fP(sendbuf, recvbuf)
T}	T{
Neighbor Gather to All Vector.
T}
_
T{
\fI\%Neighbor_allgatherv_init\fP(sendbuf, recvbuf[, ...])
T}	T{
Persistent Neighbor Gather to All Vector.
T}
_
T{
\fI\%Neighbor_alltoall\fP(sendbuf, recvbuf)
T}	T{
Neighbor All to All.
T}
_
T{
\fI\%Neighbor_alltoall_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Neighbor All to All.
T}
_
T{
\fI\%Neighbor_alltoallv\fP(sendbuf, recvbuf)
T}	T{
Neighbor All to All Vector.
T}
_
T{
\fI\%Neighbor_alltoallv_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Neighbor All to All Vector.
T}
_
T{
\fI\%Neighbor_alltoallw\fP(sendbuf, recvbuf)
T}	T{
Neighbor All to All General.
T}
_
T{
\fI\%Neighbor_alltoallw_init\fP(sendbuf, recvbuf[, info])
T}	T{
Persistent Neighbor All to All General.
T}
_
T{
\fI\%neighbor_allgather\fP(sendobj)
T}	T{
Neighbor Gather to All.
T}
_
T{
\fI\%neighbor_alltoall\fP(sendobj)
T}	T{
Neighbor All to All.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%degrees\fP
T}	T{
Number of incoming and outgoing neighbors.
T}
_
T{
\fI\%indegree\fP
T}	T{
Number of incoming neighbors.
T}
_
T{
\fI\%inedges\fP
T}	T{
Incoming neighbors.
T}
_
T{
\fI\%inoutedges\fP
T}	T{
Incoming and outgoing neighbors.
T}
_
T{
\fI\%outdegree\fP
T}	T{
Number of outgoing neighbors.
T}
_
T{
\fI\%outedges\fP
T}	T{
Outgoing neighbors.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Ineighbor_allgather(sendbuf, recvbuf)
Nonblocking Neighbor Gather to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ineighbor_allgatherv(sendbuf, recvbuf)
Nonblocking Neighbor Gather to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ineighbor_alltoall(sendbuf, recvbuf)
Nonblocking Neighbor All to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ineighbor_alltoallv(sendbuf, recvbuf)
Nonblocking Neighbor All to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Ineighbor_alltoallw(sendbuf, recvbuf)
Nonblocking Neighbor All to All General.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_allgather(sendbuf, recvbuf)
Neighbor Gather to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_allgather_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Neighbor Gather to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_allgatherv(sendbuf, recvbuf)
Neighbor Gather to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_allgatherv_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Neighbor Gather to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoall(sendbuf, recvbuf)
Neighbor All to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoall_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Neighbor All to All.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecB\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoallv(sendbuf, recvbuf)
Neighbor All to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoallv_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Neighbor All to All Vector.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecV\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoallw(sendbuf, recvbuf)
Neighbor All to All General.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Neighbor_alltoallw_init(sendbuf, recvbuf, info=INFO_NULL)
Persistent Neighbor All to All General.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsendbuf\fP (\fI\%BufSpecW\fP)
.IP \(bu 2
\fBrecvbuf\fP (\fI\%BufSpecW\fP)
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%Prequest\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B neighbor_allgather(sendobj)
Neighbor Gather to All.
.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B neighbor_alltoall(sendobj)
Neighbor All to All.
.INDENT 7.0
.TP
.B Parameters
\fBsendobj\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link']
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B degrees
Number of incoming and outgoing neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B indegree
Number of incoming neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B inedges
Incoming neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B inoutedges
Incoming and outgoing neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B outdegree
Number of outgoing neighbors.
.UNINDENT
.INDENT 7.0
.TP
.B outedges
Outgoing neighbors.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Win
.INDENT 0.0
.TP
.B class mpi4py.MPI.Win
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Remote memory access context.
.INDENT 7.0
.TP
.B static __new__(cls, win=None)
.INDENT 7.0
.TP
.B Parameters
\fBwin\fP (\fI\%Win\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Accumulate\fP(origin, target_rank[, target, op])
T}	T{
Accumulate data into the target process.
T}
_
T{
\fI\%Allocate\fP(size[, disp_unit, info, comm])
T}	T{
Create an window object for one\-sided communication.
T}
_
T{
\fI\%Allocate_shared\fP(size[, disp_unit, info, comm])
T}	T{
Create an window object for one\-sided communication.
T}
_
T{
\fI\%Attach\fP(memory)
T}	T{
Attach a local memory region.
T}
_
T{
\fI\%Call_errhandler\fP(errorcode)
T}	T{
Call the error handler installed on a window.
T}
_
T{
\fI\%Compare_and_swap\fP(origin, compare, result, ...)
T}	T{
Perform one\-sided atomic compare\-and\-swap.
T}
_
T{
\fI\%Complete\fP()
T}	T{
Complete an RMA operation begun after an \fI\%Start\fP\&.
T}
_
T{
\fI\%Create\fP(memory[, disp_unit, info, comm])
T}	T{
Create an window object for one\-sided communication.
T}
_
T{
\fI\%Create_dynamic\fP([info, comm])
T}	T{
Create an window object for one\-sided communication.
T}
_
T{
\fI\%Create_errhandler\fP(errhandler_fn)
T}	T{
Create a new error handler for windows.
T}
_
T{
\fI\%Create_keyval\fP([copy_fn, delete_fn, nopython])
T}	T{
Create a new attribute key for windows.
T}
_
T{
\fI\%Delete_attr\fP(keyval)
T}	T{
Delete attribute value associated with a key.
T}
_
T{
\fI\%Detach\fP(memory)
T}	T{
Detach a local memory region.
T}
_
T{
\fI\%Fence\fP([assertion])
T}	T{
Perform an MPI fence synchronization on a window.
T}
_
T{
\fI\%Fetch_and_op\fP(origin, result, target_rank[, ...])
T}	T{
Perform one\-sided read\-modify\-write.
T}
_
T{
\fI\%Flush\fP(rank)
T}	T{
Complete all outstanding RMA operations at a target.
T}
_
T{
\fI\%Flush_all\fP()
T}	T{
Complete all outstanding RMA operations at all targets.
T}
_
T{
\fI\%Flush_local\fP(rank)
T}	T{
Complete locally all outstanding RMA operations at a target.
T}
_
T{
\fI\%Flush_local_all\fP()
T}	T{
Complete locally all outstanding RMA operations at all targets.
T}
_
T{
\fI\%Free\fP()
T}	T{
Free a window.
T}
_
T{
\fI\%Free_keyval\fP(keyval)
T}	T{
Free an attribute key for windows.
T}
_
T{
\fI\%Get\fP(origin, target_rank[, target])
T}	T{
Get data from a memory window on a remote process.
T}
_
T{
\fI\%Get_accumulate\fP(origin, result, target_rank)
T}	T{
Fetch\-and\-accumulate data into the target process.
T}
_
T{
\fI\%Get_attr\fP(keyval)
T}	T{
Retrieve attribute value by key.
T}
_
T{
\fI\%Get_errhandler\fP()
T}	T{
Get the error handler for a window.
T}
_
T{
\fI\%Get_group\fP()
T}	T{
Access the group of processes that created the window.
T}
_
T{
\fI\%Get_info\fP()
T}	T{
Return the current hints for a window.
T}
_
T{
\fI\%Get_name\fP()
T}	T{
Get the print name for this window.
T}
_
T{
\fI\%Lock\fP(rank[, lock_type, assertion])
T}	T{
Begin an RMA access epoch at the target process.
T}
_
T{
\fI\%Lock_all\fP([assertion])
T}	T{
Begin an RMA access epoch at all processes.
T}
_
T{
\fI\%Post\fP(group[, assertion])
T}	T{
Start an RMA exposure epoch.
T}
_
T{
\fI\%Put\fP(origin, target_rank[, target])
T}	T{
Put data into a memory window on a remote process.
T}
_
T{
\fI\%Raccumulate\fP(origin, target_rank[, target, op])
T}	T{
Fetch\-and\-accumulate data into the target process.
T}
_
T{
\fI\%Rget\fP(origin, target_rank[, target])
T}	T{
Get data from a memory window on a remote process.
T}
_
T{
\fI\%Rget_accumulate\fP(origin, result, target_rank)
T}	T{
Accumulate data into the target process using remote memory access.
T}
_
T{
\fI\%Rput\fP(origin, target_rank[, target])
T}	T{
Put data into a memory window on a remote process.
T}
_
T{
\fI\%Set_attr\fP(keyval, attrval)
T}	T{
Store attribute value associated with a key.
T}
_
T{
\fI\%Set_errhandler\fP(errhandler)
T}	T{
Set the error handler for a window.
T}
_
T{
\fI\%Set_info\fP(info)
T}	T{
Set new values for the hints associated with a window.
T}
_
T{
\fI\%Set_name\fP(name)
T}	T{
Set the print name for this window.
T}
_
T{
\fI\%Shared_query\fP(rank)
T}	T{
Query the process\-local address for remote memory segments.
T}
_
T{
\fI\%Start\fP(group[, assertion])
T}	T{
Start an RMA access epoch for MPI.
T}
_
T{
\fI\%Sync\fP()
T}	T{
Synchronize public and private copies of the window.
T}
_
T{
\fI\%Test\fP()
T}	T{
Test whether an RMA exposure epoch has completed.
T}
_
T{
\fI\%Unlock\fP(rank)
T}	T{
Complete an RMA access epoch at the target process.
T}
_
T{
\fI\%Unlock_all\fP()
T}	T{
Complete an RMA access epoch at all processes.
T}
_
T{
\fI\%Wait\fP()
T}	T{
Complete an RMA exposure epoch begun with \fI\%Post\fP\&.
T}
_
T{
\fI\%f2py\fP(arg)
T}	T{
T}
_
T{
\fI\%free\fP()
T}	T{
Call \fI\%Free\fP if not null.
T}
_
T{
\fI\%fromhandle\fP(handle)
T}	T{
Create object from MPI handle.
T}
_
T{
\fI\%py2f\fP()
T}	T{
T}
_
T{
\fI\%tomemory\fP()
T}	T{
Return window memory buffer.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%attrs\fP
T}	T{
Attributes.
T}
_
T{
\fI\%flavor\fP
T}	T{
Create flavor.
T}
_
T{
\fI\%group\fP
T}	T{
Group.
T}
_
T{
\fI\%group_rank\fP
T}	T{
Group rank.
T}
_
T{
\fI\%group_size\fP
T}	T{
Group size.
T}
_
T{
\fI\%handle\fP
T}	T{
MPI handle.
T}
_
T{
\fI\%info\fP
T}	T{
Info hints.
T}
_
T{
\fI\%model\fP
T}	T{
Memory model.
T}
_
T{
\fI\%name\fP
T}	T{
Print name.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Accumulate(origin, target_rank, target=None, op=SUM)
Accumulate data into the target process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Allocate(size, disp_unit=1, info=INFO_NULL, comm=COMM_SELF)
Create an window object for one\-sided communication.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisp_unit\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Allocate_shared(size, disp_unit=1, info=INFO_NULL, comm=COMM_SELF)
Create an window object for one\-sided communication.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisp_unit\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Attach(memory)
Attach a local memory region.
.INDENT 7.0
.TP
.B Parameters
\fBmemory\fP (\fI\%Buffer\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Call_errhandler(errorcode)
Call the error handler installed on a window.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Compare_and_swap(origin, compare, result, target_rank, target_disp=0)
Perform one\-sided atomic compare\-and\-swap.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBcompare\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBresult\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget_disp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Complete()
Complete an RMA operation begun after an \fI\%Start\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create(memory, disp_unit=1, info=INFO_NULL, comm=COMM_SELF)
Create an window object for one\-sided communication.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmemory\fP (\fI\%Buffer\fP\fI | \fP\fI\%Bottom\fP)
.IP \(bu 2
\fBdisp_unit\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP)
.UNINDENT
.TP
.B Return type
Self
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_dynamic(info=INFO_NULL, comm=COMM_SELF)
Create an window object for one\-sided communication.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.IP \(bu 2
\fBcomm\fP (\fI\%Intracomm\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_errhandler(errhandler_fn)
Create a new error handler for windows.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Win\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Create_keyval(copy_fn=None, delete_fn=None, nopython=False)
Create a new attribute key for windows.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcopy_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Win\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBdelete_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Win\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBnopython\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Delete_attr(keyval)
Delete attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Detach(memory)
Detach a local memory region.
.INDENT 7.0
.TP
.B Parameters
\fBmemory\fP (\fI\%Buffer\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Fence(assertion=0)
Perform an MPI fence synchronization on a window.
.INDENT 7.0
.TP
.B Parameters
\fBassertion\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Fetch_and_op(origin, result, target_rank, target_disp=0, op=SUM)
Perform one\-sided read\-modify\-write.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBresult\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget_disp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush(rank)
Complete all outstanding RMA operations at a target.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush_all()
Complete all outstanding RMA operations at all targets.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush_local(rank)
Complete locally all outstanding RMA operations at a target.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Flush_local_all()
Complete locally all outstanding RMA operations at all targets.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Free()
Free a window.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod Free_keyval(keyval)
Free an attribute key for windows.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get(origin, target_rank, target=None)
Get data from a memory window on a remote process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_accumulate(origin, result, target_rank, target=None, op=SUM)
Fetch\-and\-accumulate data into the target process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBresult\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_attr(keyval)
Retrieve attribute value by key.
.INDENT 7.0
.TP
.B Parameters
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link' | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_errhandler()
Get the error handler for a window.
.INDENT 7.0
.TP
.B Return type
\fI\%Errhandler\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_group()
Access the group of processes that created the window.
.INDENT 7.0
.TP
.B Return type
\fI\%Group\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_info()
Return the current hints for a window.
.INDENT 7.0
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_name()
Get the print name for this window.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Lock(rank, lock_type=LOCK_EXCLUSIVE, assertion=0)
Begin an RMA access epoch at the target process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBlock_type\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBassertion\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Lock_all(assertion=0)
Begin an RMA access epoch at all processes.
.INDENT 7.0
.TP
.B Parameters
\fBassertion\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Post(group, assertion=0)
Start an RMA exposure epoch.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup\fP (\fI\%Group\fP)
.IP \(bu 2
\fBassertion\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Put(origin, target_rank, target=None)
Put data into a memory window on a remote process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Raccumulate(origin, target_rank, target=None, op=SUM)
Fetch\-and\-accumulate data into the target process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Rget(origin, target_rank, target=None)
Get data from a memory window on a remote process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Rget_accumulate(origin, result, target_rank, target=None, op=SUM)
Accumulate data into the target process using remote memory access.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBresult\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.IP \(bu 2
\fBop\fP (\fI\%Op\fP)
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Rput(origin, target_rank, target=None)
Put data into a memory window on a remote process.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBorigin\fP (\fI\%BufSpec\fP)
.IP \(bu 2
\fBtarget_rank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBtarget\fP (\fI\%TargetSpec\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_attr(keyval, attrval)
Store attribute value associated with a key.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBkeyval\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBattrval\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Any'\fI\%Any\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_errhandler(errhandler)
Set the error handler for a window.
.INDENT 7.0
.TP
.B Parameters
\fBerrhandler\fP (\fI\%Errhandler\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_info(info)
Set new values for the hints associated with a window.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Set_name(name)
Set the print name for this window.
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Shared_query(rank)
Query the process\-local address for remote memory segments.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\fI\%buffer\fP, \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Start(group, assertion=0)
Start an RMA access epoch for MPI.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgroup\fP (\fI\%Group\fP)
.IP \(bu 2
\fBassertion\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Sync()
Synchronize public and private copies of the window.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Test()
Test whether an RMA exposure epoch has completed.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unlock(rank)
Complete an RMA access epoch at the target process.
.INDENT 7.0
.TP
.B Parameters
\fBrank\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unlock_all()
Complete an RMA access epoch at all processes.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Wait()
Complete an RMA exposure epoch begun with \fI\%Post\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Literal'\fI\%Literal\fP\X'tty: link'[True]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod f2py(arg)
.INDENT 7.0
.TP
.B Parameters
\fBarg\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Win\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B free()
Call \fI\%Free\fP if not null.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod fromhandle(handle)
Create object from MPI handle.
.INDENT 7.0
.TP
.B Parameters
\fBhandle\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\fI\%Win\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B py2f()
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tomemory()
Return window memory buffer.
.INDENT 7.0
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B attrs
Attributes.
.UNINDENT
.INDENT 7.0
.TP
.B flavor
Create flavor.
.UNINDENT
.INDENT 7.0
.TP
.B group
Group.
.UNINDENT
.INDENT 7.0
.TP
.B group_rank
Group rank.
.UNINDENT
.INDENT 7.0
.TP
.B group_size
Group size.
.UNINDENT
.INDENT 7.0
.TP
.B handle
MPI handle.
.UNINDENT
.INDENT 7.0
.TP
.B info
Info hints.
.UNINDENT
.INDENT 7.0
.TP
.B model
Memory model.
.UNINDENT
.INDENT 7.0
.TP
.B name
Print name.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.buffer
.INDENT 0.0
.TP
.B class mpi4py.MPI.buffer
Bases: \X'tty: link https://docs.python.org/3/library/functions.html#object'\fI\%object\fP\X'tty: link'
.sp
Buffer.
.INDENT 7.0
.TP
.B static __new__(cls, buf)
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%Buffer\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%allocate\fP(nbytes[, clear])
T}	T{
Buffer allocation.
T}
_
T{
\fI\%cast\fP(format[, shape])
T}	T{
Cast to a \X'tty: link https://docs.python.org/3/library/stdtypes.html#memoryview'\fI\%memoryview\fP\X'tty: link' with new format or shape.
T}
_
T{
\fI\%fromaddress\fP(address, nbytes[, readonly])
T}	T{
Buffer from address and size in bytes.
T}
_
T{
\fI\%frombuffer\fP(obj[, readonly])
T}	T{
Buffer from buffer\-like object.
T}
_
T{
\fI\%release\fP()
T}	T{
Release the underlying buffer exposed by the buffer object.
T}
_
T{
\fI\%tobytes\fP([order])
T}	T{
Return the data in the buffer as a byte string.
T}
_
T{
\fI\%toreadonly\fP()
T}	T{
Return a readonly version of the buffer object.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%address\fP
T}	T{
Buffer address.
T}
_
T{
\fI\%format\fP
T}	T{
Format of each element.
T}
_
T{
\fI\%itemsize\fP
T}	T{
Size (in bytes) of each element.
T}
_
T{
\fI\%nbytes\fP
T}	T{
Buffer size (in bytes).
T}
_
T{
\fI\%obj\fP
T}	T{
Object exposing buffer.
T}
_
T{
\fI\%readonly\fP
T}	T{
Buffer is read\-only.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B static allocate(nbytes, clear=False)
Buffer allocation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnbytes\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBclear\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cast(format, shape=Ellipsis)
Cast to a \X'tty: link https://docs.python.org/3/library/stdtypes.html#memoryview'\fI\%memoryview\fP\X'tty: link' with new format or shape.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBformat\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBshape\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI] \fP\fI| \fP\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\fI\&...\fP\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#memoryview'\fI\%memoryview\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static fromaddress(address, nbytes, readonly=False)
Buffer from address and size in bytes.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBaddress\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBnbytes\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBreadonly\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static frombuffer(obj, readonly=False)
Buffer from buffer\-like object.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBobj\fP (\fI\%Buffer\fP)
.IP \(bu 2
\fBreadonly\fP (\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B release()
Release the underlying buffer exposed by the buffer object.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tobytes(order=None)
Return the data in the buffer as a byte string.
.INDENT 7.0
.TP
.B Parameters
\fBorder\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#bytes'\fI\%bytes\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B toreadonly()
Return a readonly version of the buffer object.
.INDENT 7.0
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B address
Buffer address.
.UNINDENT
.INDENT 7.0
.TP
.B format
Format of each element.
.UNINDENT
.INDENT 7.0
.TP
.B itemsize
Size (in bytes) of each element.
.UNINDENT
.INDENT 7.0
.TP
.B nbytes
Buffer size (in bytes).
.UNINDENT
.INDENT 7.0
.TP
.B obj
Object exposing buffer.
.UNINDENT
.INDENT 7.0
.TP
.B readonly
Buffer is read\-only.
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.memory
.INDENT 0.0
.TP
.B mpi4py.MPI.memory
alias of \fI\%buffer\fP
.UNINDENT
.sp
Exceptions
.TS
center;
|l|l|.
_
T{
\fI\%Exception\fP
T}	T{
Exception class.
T}
_
.TE
.SS mpi4py.MPI.Exception
.INDENT 0.0
.TP
.B exception mpi4py.MPI.Exception
Bases: \X'tty: link https://docs.python.org/3/library/exceptions.html#RuntimeError'\fI\%RuntimeError\fP\X'tty: link'
.sp
Exception class.
.INDENT 7.0
.TP
.B static __new__(cls, ierr=SUCCESS)
.INDENT 7.0
.TP
.B Parameters
\fBierr\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/typing.html#typing.Self'\fI\%Self\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Methods Summary
.TS
center;
|l|l|.
_
T{
\fI\%Get_error_class\fP()
T}	T{
Error class.
T}
_
T{
\fI\%Get_error_code\fP()
T}	T{
Error code.
T}
_
T{
\fI\%Get_error_string\fP()
T}	T{
Error string.
T}
_
.TE
.sp
Attributes Summary
.TS
center;
|l|l|.
_
T{
\fI\%error_class\fP
T}	T{
Error class.
T}
_
T{
\fI\%error_code\fP
T}	T{
Error code.
T}
_
T{
\fI\%error_string\fP
T}	T{
Error string.
T}
_
.TE
.sp
Methods Documentation
.INDENT 7.0
.TP
.B Get_error_class()
Error class.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_error_code()
Error code.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Get_error_string()
Error string.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.sp
Attributes Documentation
.INDENT 7.0
.TP
.B error_class
Error class.
.UNINDENT
.INDENT 7.0
.TP
.B error_code
Error code.
.UNINDENT
.INDENT 7.0
.TP
.B error_string
Error string.
.UNINDENT
.UNINDENT
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%Add_error_class\fP()
T}	T{
Add an \fIerror class\fP to the known error classes.
T}
_
T{
\fI\%Add_error_code\fP(errorclass)
T}	T{
Add an \fIerror code\fP to an \fIerror class\fP\&.
T}
_
T{
\fI\%Add_error_string\fP(errorcode, string)
T}	T{
Associate an \fIerror string\fP with an \fIerror class\fP or \fIerror code\fP\&.
T}
_
T{
\fI\%Aint_add\fP(base, disp)
T}	T{
Return the sum of base address and displacement.
T}
_
T{
\fI\%Aint_diff\fP(addr1, addr2)
T}	T{
Return the difference between absolute addresses.
T}
_
T{
\fI\%Alloc_mem\fP(size[, info])
T}	T{
Allocate memory for message passing and remote memory access.
T}
_
T{
\fI\%Attach_buffer\fP(buf)
T}	T{
Attach a user\-provided buffer for sending in buffered mode.
T}
_
T{
\fI\%Close_port\fP(port_name)
T}	T{
Close a port.
T}
_
T{
\fI\%Compute_dims\fP(nnodes, dims)
T}	T{
Return a balanced distribution of processes per coordinate direction.
T}
_
T{
\fI\%Detach_buffer\fP()
T}	T{
Remove an existing attached buffer.
T}
_
T{
\fI\%Finalize\fP()
T}	T{
Terminate the MPI execution environment.
T}
_
T{
\fI\%Flush_buffer\fP()
T}	T{
Block until all buffered messages have been transmitted.
T}
_
T{
\fI\%Free_mem\fP(mem)
T}	T{
Free memory allocated with \fI\%Alloc_mem\fP\&.
T}
_
T{
\fI\%Get_address\fP(location)
T}	T{
Get the address of a location in memory.
T}
_
T{
\fI\%Get_error_class\fP(errorcode)
T}	T{
Convert an \fIerror code\fP into an \fIerror class\fP\&.
T}
_
T{
\fI\%Get_error_string\fP(errorcode)
T}	T{
Return the \fIerror string\fP for a given \fIerror class\fP or \fIerror code\fP\&.
T}
_
T{
\fI\%Get_hw_resource_info\fP()
T}	T{
Obtain information about the hardware platform of the calling processor.
T}
_
T{
\fI\%Get_library_version\fP()
T}	T{
Obtain the version string of the MPI library.
T}
_
T{
\fI\%Get_processor_name\fP()
T}	T{
Obtain the name of the calling processor.
T}
_
T{
\fI\%Get_version\fP()
T}	T{
Obtain the version number of the MPI standard.
T}
_
T{
\fI\%Iflush_buffer\fP()
T}	T{
Nonblocking flush for buffered messages.
T}
_
T{
\fI\%Init\fP()
T}	T{
Initialize the MPI execution environment.
T}
_
T{
\fI\%Init_thread\fP([required])
T}	T{
Initialize the MPI execution environment.
T}
_
T{
\fI\%Is_finalized\fP()
T}	T{
Indicate whether \fI\%Finalize\fP has completed.
T}
_
T{
\fI\%Is_initialized\fP()
T}	T{
Indicate whether \fI\%Init\fP has been called.
T}
_
T{
\fI\%Is_thread_main\fP()
T}	T{
Indicate whether this thread called \fI\%Init\fP or \fI\%Init_thread\fP\&.
T}
_
T{
\fI\%Lookup_name\fP(service_name[, info])
T}	T{
Lookup a port name given a service name.
T}
_
T{
\fI\%Open_port\fP([info])
T}	T{
Return an address used to connect group of processes.
T}
_
T{
\fI\%Pcontrol\fP(level)
T}	T{
Control profiling.
T}
_
T{
\fI\%Publish_name\fP(service_name, port_name[, info])
T}	T{
Publish a service name.
T}
_
T{
\fI\%Query_thread\fP()
T}	T{
Return the level of thread support provided by the MPI library.
T}
_
T{
\fI\%Register_datarep\fP(datarep, read_fn, write_fn, ...)
T}	T{
Register user\-defined data representations.
T}
_
T{
\fI\%Remove_error_class\fP(errorclass)
T}	T{
Remove an \fIerror class\fP from the known error classes.
T}
_
T{
\fI\%Remove_error_code\fP(errorcode)
T}	T{
Remove an \fIerror code\fP from the known error codes.
T}
_
T{
\fI\%Remove_error_string\fP(errorcode)
T}	T{
Remove \fIerror string\fP association from \fIerror class\fP or \fIerror code\fP\&.
T}
_
T{
\fI\%Unpublish_name\fP(service_name, port_name[, info])
T}	T{
Unpublish a service name.
T}
_
T{
\fI\%Wtick\fP()
T}	T{
Return the resolution of \fI\%Wtime\fP\&.
T}
_
T{
\fI\%Wtime\fP()
T}	T{
Return an elapsed time on the calling processor.
T}
_
T{
\fI\%get_vendor\fP()
T}	T{
Information about the underlying MPI implementation.
T}
_
.TE
.SS mpi4py.MPI.Add_error_class
.INDENT 0.0
.TP
.B mpi4py.MPI.Add_error_class()
Add an \fIerror class\fP to the known error classes.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Add_error_code
.INDENT 0.0
.TP
.B mpi4py.MPI.Add_error_code(errorclass)
Add an \fIerror code\fP to an \fIerror class\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBerrorclass\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Add_error_string
.INDENT 0.0
.TP
.B mpi4py.MPI.Add_error_string(errorcode, string)
Associate an \fIerror string\fP with an \fIerror class\fP or \fIerror code\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBstring\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Aint_add
.INDENT 0.0
.TP
.B mpi4py.MPI.Aint_add(base, disp)
Return the sum of base address and displacement.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbase\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdisp\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Aint_diff
.INDENT 0.0
.TP
.B mpi4py.MPI.Aint_diff(addr1, addr2)
Return the difference between absolute addresses.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBaddr1\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBaddr2\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Alloc_mem
.INDENT 0.0
.TP
.B mpi4py.MPI.Alloc_mem(size, info=INFO_NULL)
Allocate memory for message passing and remote memory access.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsize\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\fI\%buffer\fP
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Attach_buffer
.INDENT 0.0
.TP
.B mpi4py.MPI.Attach_buffer(buf)
Attach a user\-provided buffer for sending in buffered mode.
.INDENT 7.0
.TP
.B Parameters
\fBbuf\fP (\fI\%Buffer\fP\fI | \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Close_port
.INDENT 0.0
.TP
.B mpi4py.MPI.Close_port(port_name)
Close a port.
.INDENT 7.0
.TP
.B Parameters
\fBport_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Compute_dims
.INDENT 0.0
.TP
.B mpi4py.MPI.Compute_dims(nnodes, dims)
Return a balanced distribution of processes per coordinate direction.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnnodes\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.IP \(bu 2
\fBdims\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI | \fP\X'tty: link https://docs.python.org/3/library/typing.html#typing.Sequence'\fI\%Sequence\fP\X'tty: link'\fI[\fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#list'\fI\%list\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Detach_buffer
.INDENT 0.0
.TP
.B mpi4py.MPI.Detach_buffer()
Remove an existing attached buffer.
.INDENT 7.0
.TP
.B Return type
\fI\%Buffer\fP | \X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Finalize
.INDENT 0.0
.TP
.B mpi4py.MPI.Finalize()
Terminate the MPI execution environment.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Flush_buffer
.INDENT 0.0
.TP
.B mpi4py.MPI.Flush_buffer()
Block until all buffered messages have been transmitted.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Free_mem
.INDENT 0.0
.TP
.B mpi4py.MPI.Free_mem(mem)
Free memory allocated with \fI\%Alloc_mem\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBmem\fP (\fI\%buffer\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_address
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_address(location)
Get the address of a location in memory.
.INDENT 7.0
.TP
.B Parameters
\fBlocation\fP (\fI\%Buffer\fP\fI | \fP\fI\%Bottom\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_error_class
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_error_class(errorcode)
Convert an \fIerror code\fP into an \fIerror class\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_error_string
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_error_string(errorcode)
Return the \fIerror string\fP for a given \fIerror class\fP or \fIerror code\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_hw_resource_info
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_hw_resource_info()
Obtain information about the hardware platform of the calling processor.
.INDENT 7.0
.TP
.B Return type
\fI\%Info\fP
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_library_version
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_library_version()
Obtain the version string of the MPI library.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_processor_name
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_processor_name()
Obtain the name of the calling processor.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Get_version
.INDENT 0.0
.TP
.B mpi4py.MPI.Get_version()
Obtain the version number of the MPI standard.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Iflush_buffer
.INDENT 0.0
.TP
.B mpi4py.MPI.Iflush_buffer()
Nonblocking flush for buffered messages.
.INDENT 7.0
.TP
.B Return type
\fI\%Request\fP
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Init
.INDENT 0.0
.TP
.B mpi4py.MPI.Init()
Initialize the MPI execution environment.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Init_thread
.INDENT 0.0
.TP
.B mpi4py.MPI.Init_thread(required=THREAD_MULTIPLE)
Initialize the MPI execution environment.
.INDENT 7.0
.TP
.B Parameters
\fBrequired\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Is_finalized
.INDENT 0.0
.TP
.B mpi4py.MPI.Is_finalized()
Indicate whether \fI\%Finalize\fP has completed.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Is_initialized
.INDENT 0.0
.TP
.B mpi4py.MPI.Is_initialized()
Indicate whether \fI\%Init\fP has been called.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Is_thread_main
.INDENT 0.0
.TP
.B mpi4py.MPI.Is_thread_main()
Indicate whether this thread called \fI\%Init\fP or \fI\%Init_thread\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#bool'\fI\%bool\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Lookup_name
.INDENT 0.0
.TP
.B mpi4py.MPI.Lookup_name(service_name, info=INFO_NULL)
Lookup a port name given a service name.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBservice_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Open_port
.INDENT 0.0
.TP
.B mpi4py.MPI.Open_port(info=INFO_NULL)
Return an address used to connect group of processes.
.INDENT 7.0
.TP
.B Parameters
\fBinfo\fP (\fI\%Info\fP)
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Pcontrol
.INDENT 0.0
.TP
.B mpi4py.MPI.Pcontrol(level)
Control profiling.
.INDENT 7.0
.TP
.B Parameters
\fBlevel\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Publish_name
.INDENT 0.0
.TP
.B mpi4py.MPI.Publish_name(service_name, port_name, info=INFO_NULL)
Publish a service name.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBservice_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBport_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Query_thread
.INDENT 0.0
.TP
.B mpi4py.MPI.Query_thread()
Return the level of thread support provided by the MPI library.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Register_datarep
.INDENT 0.0
.TP
.B mpi4py.MPI.Register_datarep(datarep, read_fn, write_fn, extent_fn)
Register user\-defined data representations.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdatarep\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBread_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Buffer\fP\fI, \fP\fI\%Datatype\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\fI\%Buffer\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBwrite_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Buffer\fP\fI, \fP\fI\%Datatype\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI, \fP\fI\%Buffer\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'\fI]\fP)
.IP \(bu 2
\fBextent_fn\fP (\X'tty: link https://docs.python.org/3/library/typing.html#typing.Callable'\fI\%Callable\fP\X'tty: link'\fI[\fP\fI[\fP\fI\%Datatype\fP\fI]\fP\fI, \fP\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'\fI]\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Remove_error_class
.INDENT 0.0
.TP
.B mpi4py.MPI.Remove_error_class(errorclass)
Remove an \fIerror class\fP from the known error classes.
.INDENT 7.0
.TP
.B Parameters
\fBerrorclass\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Remove_error_code
.INDENT 0.0
.TP
.B mpi4py.MPI.Remove_error_code(errorcode)
Remove an \fIerror code\fP from the known error codes.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Remove_error_string
.INDENT 0.0
.TP
.B mpi4py.MPI.Remove_error_string(errorcode)
Remove \fIerror string\fP association from \fIerror class\fP or \fIerror code\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBerrorcode\fP (\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link')
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Unpublish_name
.INDENT 0.0
.TP
.B mpi4py.MPI.Unpublish_name(service_name, port_name, info=INFO_NULL)
Unpublish a service name.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBservice_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBport_name\fP (\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link')
.IP \(bu 2
\fBinfo\fP (\fI\%Info\fP)
.UNINDENT
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/constants.html#None'\fI\%None\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Wtick
.INDENT 0.0
.TP
.B mpi4py.MPI.Wtick()
Return the resolution of \fI\%Wtime\fP\&.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.Wtime
.INDENT 0.0
.TP
.B mpi4py.MPI.Wtime()
Return an elapsed time on the calling processor.
.INDENT 7.0
.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/functions.html#float'\fI\%float\fP\X'tty: link'
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.get_vendor
.INDENT 0.0
.TP
.B mpi4py.MPI.get_vendor()
Information about the underlying MPI implementation.
.INDENT 7.0
.TP
.B Returns
.INDENT 7.0
.IP \(bu 2
string with the name of the MPI implementation.
.IP \(bu 2
integer 3\-tuple version number \fB(major, minor, micro)\fP\&.
.UNINDENT

.TP
.B Return type
\X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/stdtypes.html#str'\fI\%str\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/stdtypes.html#tuple'\fI\%tuple\fP\X'tty: link'[\X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link', \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link']]
.UNINDENT
.UNINDENT
.sp
Attributes
.TS
center;
|l|l|.
_
T{
\fI\%UNDEFINED\fP
T}	T{
Constant \fBUNDEFINED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ANY_SOURCE\fP
T}	T{
Constant \fBANY_SOURCE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ANY_TAG\fP
T}	T{
Constant \fBANY_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%PROC_NULL\fP
T}	T{
Constant \fBPROC_NULL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ROOT\fP
T}	T{
Constant \fBROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%BOTTOM\fP
T}	T{
Constant \fBBOTTOM\fP of type \fI\%BottomType\fP
T}
_
T{
\fI\%IN_PLACE\fP
T}	T{
Constant \fBIN_PLACE\fP of type \fI\%InPlaceType\fP
T}
_
T{
\fI\%KEYVAL_INVALID\fP
T}	T{
Constant \fBKEYVAL_INVALID\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TAG_UB\fP
T}	T{
Constant \fBTAG_UB\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%IO\fP
T}	T{
Constant \fBIO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WTIME_IS_GLOBAL\fP
T}	T{
Constant \fBWTIME_IS_GLOBAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNIVERSE_SIZE\fP
T}	T{
Constant \fBUNIVERSE_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%APPNUM\fP
T}	T{
Constant \fBAPPNUM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LASTUSEDCODE\fP
T}	T{
Constant \fBLASTUSEDCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_BASE\fP
T}	T{
Constant \fBWIN_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_SIZE\fP
T}	T{
Constant \fBWIN_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_DISP_UNIT\fP
T}	T{
Constant \fBWIN_DISP_UNIT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_CREATE_FLAVOR\fP
T}	T{
Constant \fBWIN_CREATE_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR\fP
T}	T{
Constant \fBWIN_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_MODEL\fP
T}	T{
Constant \fBWIN_MODEL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SUCCESS\fP
T}	T{
Constant \fBSUCCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_LASTCODE\fP
T}	T{
Constant \fBERR_LASTCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TYPE\fP
T}	T{
Constant \fBERR_TYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_REQUEST\fP
T}	T{
Constant \fBERR_REQUEST\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_OP\fP
T}	T{
Constant \fBERR_OP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_GROUP\fP
T}	T{
Constant \fBERR_GROUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO\fP
T}	T{
Constant \fBERR_INFO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ERRHANDLER\fP
T}	T{
Constant \fBERR_ERRHANDLER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SESSION\fP
T}	T{
Constant \fBERR_SESSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_COMM\fP
T}	T{
Constant \fBERR_COMM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_WIN\fP
T}	T{
Constant \fBERR_WIN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE\fP
T}	T{
Constant \fBERR_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BUFFER\fP
T}	T{
Constant \fBERR_BUFFER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_COUNT\fP
T}	T{
Constant \fBERR_COUNT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TAG\fP
T}	T{
Constant \fBERR_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RANK\fP
T}	T{
Constant \fBERR_RANK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ROOT\fP
T}	T{
Constant \fBERR_ROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TRUNCATE\fP
T}	T{
Constant \fBERR_TRUNCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_IN_STATUS\fP
T}	T{
Constant \fBERR_IN_STATUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PENDING\fP
T}	T{
Constant \fBERR_PENDING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_TOPOLOGY\fP
T}	T{
Constant \fBERR_TOPOLOGY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DIMS\fP
T}	T{
Constant \fBERR_DIMS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ARG\fP
T}	T{
Constant \fBERR_ARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_OTHER\fP
T}	T{
Constant \fBERR_OTHER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNKNOWN\fP
T}	T{
Constant \fBERR_UNKNOWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INTERN\fP
T}	T{
Constant \fBERR_INTERN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_KEYVAL\fP
T}	T{
Constant \fBERR_KEYVAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_MEM\fP
T}	T{
Constant \fBERR_NO_MEM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_KEY\fP
T}	T{
Constant \fBERR_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_VALUE\fP
T}	T{
Constant \fBERR_INFO_VALUE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_INFO_NOKEY\fP
T}	T{
Constant \fBERR_INFO_NOKEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SPAWN\fP
T}	T{
Constant \fBERR_SPAWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PORT\fP
T}	T{
Constant \fBERR_PORT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SERVICE\fP
T}	T{
Constant \fBERR_SERVICE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NAME\fP
T}	T{
Constant \fBERR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PROC_ABORTED\fP
T}	T{
Constant \fBERR_PROC_ABORTED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BASE\fP
T}	T{
Constant \fBERR_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_SIZE\fP
T}	T{
Constant \fBERR_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DISP\fP
T}	T{
Constant \fBERR_DISP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ASSERT\fP
T}	T{
Constant \fBERR_ASSERT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_LOCKTYPE\fP
T}	T{
Constant \fBERR_LOCKTYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_CONFLICT\fP
T}	T{
Constant \fBERR_RMA_CONFLICT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_SYNC\fP
T}	T{
Constant \fBERR_RMA_SYNC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_RANGE\fP
T}	T{
Constant \fBERR_RMA_RANGE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_ATTACH\fP
T}	T{
Constant \fBERR_RMA_ATTACH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_SHARED\fP
T}	T{
Constant \fBERR_RMA_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_RMA_FLAVOR\fP
T}	T{
Constant \fBERR_RMA_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_BAD_FILE\fP
T}	T{
Constant \fBERR_BAD_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_SUCH_FILE\fP
T}	T{
Constant \fBERR_NO_SUCH_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE_EXISTS\fP
T}	T{
Constant \fBERR_FILE_EXISTS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_FILE_IN_USE\fP
T}	T{
Constant \fBERR_FILE_IN_USE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_AMODE\fP
T}	T{
Constant \fBERR_AMODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_ACCESS\fP
T}	T{
Constant \fBERR_ACCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_READ_ONLY\fP
T}	T{
Constant \fBERR_READ_ONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NO_SPACE\fP
T}	T{
Constant \fBERR_NO_SPACE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_QUOTA\fP
T}	T{
Constant \fBERR_QUOTA\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_NOT_SAME\fP
T}	T{
Constant \fBERR_NOT_SAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_IO\fP
T}	T{
Constant \fBERR_IO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNSUPPORTED_OPERATION\fP
T}	T{
Constant \fBERR_UNSUPPORTED_OPERATION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_UNSUPPORTED_DATAREP\fP
T}	T{
Constant \fBERR_UNSUPPORTED_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_CONVERSION\fP
T}	T{
Constant \fBERR_CONVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_DUP_DATAREP\fP
T}	T{
Constant \fBERR_DUP_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_VALUE_TOO_LARGE\fP
T}	T{
Constant \fBERR_VALUE_TOO_LARGE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_REVOKED\fP
T}	T{
Constant \fBERR_REVOKED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PROC_FAILED\fP
T}	T{
Constant \fBERR_PROC_FAILED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ERR_PROC_FAILED_PENDING\fP
T}	T{
Constant \fBERR_PROC_FAILED_PENDING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_C\fP
T}	T{
Constant \fBORDER_C\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_FORTRAN\fP
T}	T{
Constant \fBORDER_FORTRAN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%ORDER_F\fP
T}	T{
Constant \fBORDER_F\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_INTEGER\fP
T}	T{
Constant \fBTYPECLASS_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_REAL\fP
T}	T{
Constant \fBTYPECLASS_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%TYPECLASS_COMPLEX\fP
T}	T{
Constant \fBTYPECLASS_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_NONE\fP
T}	T{
Constant \fBDISTRIBUTE_NONE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_BLOCK\fP
T}	T{
Constant \fBDISTRIBUTE_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_CYCLIC\fP
T}	T{
Constant \fBDISTRIBUTE_CYCLIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISTRIBUTE_DFLT_DARG\fP
T}	T{
Constant \fBDISTRIBUTE_DFLT_DARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_NAMED\fP
T}	T{
Constant \fBCOMBINER_NAMED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_DUP\fP
T}	T{
Constant \fBCOMBINER_DUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_CONTIGUOUS\fP
T}	T{
Constant \fBCOMBINER_CONTIGUOUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_VECTOR\fP
T}	T{
Constant \fBCOMBINER_VECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HVECTOR\fP
T}	T{
Constant \fBCOMBINER_HVECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_INDEXED\fP
T}	T{
Constant \fBCOMBINER_INDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HINDEXED\fP
T}	T{
Constant \fBCOMBINER_HINDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_INDEXED_BLOCK\fP
T}	T{
Constant \fBCOMBINER_INDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_HINDEXED_BLOCK\fP
T}	T{
Constant \fBCOMBINER_HINDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_STRUCT\fP
T}	T{
Constant \fBCOMBINER_STRUCT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_SUBARRAY\fP
T}	T{
Constant \fBCOMBINER_SUBARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_DARRAY\fP
T}	T{
Constant \fBCOMBINER_DARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_RESIZED\fP
T}	T{
Constant \fBCOMBINER_RESIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_VALUE_INDEX\fP
T}	T{
Constant \fBCOMBINER_VALUE_INDEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_INTEGER\fP
T}	T{
Constant \fBCOMBINER_F90_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_REAL\fP
T}	T{
Constant \fBCOMBINER_F90_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMBINER_F90_COMPLEX\fP
T}	T{
Constant \fBCOMBINER_F90_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%F_SOURCE\fP
T}	T{
Constant \fBF_SOURCE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%F_TAG\fP
T}	T{
Constant \fBF_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%F_ERROR\fP
T}	T{
Constant \fBF_ERROR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%F_STATUS_SIZE\fP
T}	T{
Constant \fBF_STATUS_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%IDENT\fP
T}	T{
Constant \fBIDENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%CONGRUENT\fP
T}	T{
Constant \fBCONGRUENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SIMILAR\fP
T}	T{
Constant \fBSIMILAR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNEQUAL\fP
T}	T{
Constant \fBUNEQUAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%CART\fP
T}	T{
Constant \fBCART\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%GRAPH\fP
T}	T{
Constant \fBGRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DIST_GRAPH\fP
T}	T{
Constant \fBDIST_GRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%UNWEIGHTED\fP
T}	T{
Constant \fBUNWEIGHTED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WEIGHTS_EMPTY\fP
T}	T{
Constant \fBWEIGHTS_EMPTY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMM_TYPE_SHARED\fP
T}	T{
Constant \fBCOMM_TYPE_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMM_TYPE_HW_GUIDED\fP
T}	T{
Constant \fBCOMM_TYPE_HW_GUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMM_TYPE_HW_UNGUIDED\fP
T}	T{
Constant \fBCOMM_TYPE_HW_UNGUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%COMM_TYPE_RESOURCE_GUIDED\fP
T}	T{
Constant \fBCOMM_TYPE_RESOURCE_GUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%BSEND_OVERHEAD\fP
T}	T{
Constant \fBBSEND_OVERHEAD\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%BUFFER_AUTOMATIC\fP
T}	T{
Constant \fBBUFFER_AUTOMATIC\fP of type \fI\%BufferAutomaticType\fP
T}
_
T{
\fI\%WIN_FLAVOR_CREATE\fP
T}	T{
Constant \fBWIN_FLAVOR_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_ALLOCATE\fP
T}	T{
Constant \fBWIN_FLAVOR_ALLOCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_DYNAMIC\fP
T}	T{
Constant \fBWIN_FLAVOR_DYNAMIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_FLAVOR_SHARED\fP
T}	T{
Constant \fBWIN_FLAVOR_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_SEPARATE\fP
T}	T{
Constant \fBWIN_SEPARATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%WIN_UNIFIED\fP
T}	T{
Constant \fBWIN_UNIFIED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOCHECK\fP
T}	T{
Constant \fBMODE_NOCHECK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOSTORE\fP
T}	T{
Constant \fBMODE_NOSTORE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOPUT\fP
T}	T{
Constant \fBMODE_NOPUT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOPRECEDE\fP
T}	T{
Constant \fBMODE_NOPRECEDE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_NOSUCCEED\fP
T}	T{
Constant \fBMODE_NOSUCCEED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LOCK_EXCLUSIVE\fP
T}	T{
Constant \fBLOCK_EXCLUSIVE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%LOCK_SHARED\fP
T}	T{
Constant \fBLOCK_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_RDONLY\fP
T}	T{
Constant \fBMODE_RDONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_WRONLY\fP
T}	T{
Constant \fBMODE_WRONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_RDWR\fP
T}	T{
Constant \fBMODE_RDWR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_CREATE\fP
T}	T{
Constant \fBMODE_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_EXCL\fP
T}	T{
Constant \fBMODE_EXCL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_DELETE_ON_CLOSE\fP
T}	T{
Constant \fBMODE_DELETE_ON_CLOSE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_UNIQUE_OPEN\fP
T}	T{
Constant \fBMODE_UNIQUE_OPEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_SEQUENTIAL\fP
T}	T{
Constant \fBMODE_SEQUENTIAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MODE_APPEND\fP
T}	T{
Constant \fBMODE_APPEND\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_SET\fP
T}	T{
Constant \fBSEEK_SET\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_CUR\fP
T}	T{
Constant \fBSEEK_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SEEK_END\fP
T}	T{
Constant \fBSEEK_END\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISPLACEMENT_CURRENT\fP
T}	T{
Constant \fBDISPLACEMENT_CURRENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DISP_CUR\fP
T}	T{
Constant \fBDISP_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_SINGLE\fP
T}	T{
Constant \fBTHREAD_SINGLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_FUNNELED\fP
T}	T{
Constant \fBTHREAD_FUNNELED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_SERIALIZED\fP
T}	T{
Constant \fBTHREAD_SERIALIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%THREAD_MULTIPLE\fP
T}	T{
Constant \fBTHREAD_MULTIPLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%VERSION\fP
T}	T{
Constant \fBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%SUBVERSION\fP
T}	T{
Constant \fBSUBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_PROCESSOR_NAME\fP
T}	T{
Constant \fBMAX_PROCESSOR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_ERROR_STRING\fP
T}	T{
Constant \fBMAX_ERROR_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_PORT_NAME\fP
T}	T{
Constant \fBMAX_PORT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_INFO_KEY\fP
T}	T{
Constant \fBMAX_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_INFO_VAL\fP
T}	T{
Constant \fBMAX_INFO_VAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_OBJECT_NAME\fP
T}	T{
Constant \fBMAX_OBJECT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_DATAREP_STRING\fP
T}	T{
Constant \fBMAX_DATAREP_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_LIBRARY_VERSION_STRING\fP
T}	T{
Constant \fBMAX_LIBRARY_VERSION_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_PSET_NAME_LEN\fP
T}	T{
Constant \fBMAX_PSET_NAME_LEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%MAX_STRINGTAG_LEN\fP
T}	T{
Constant \fBMAX_STRINGTAG_LEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
T}
_
T{
\fI\%DATATYPE_NULL\fP
T}	T{
Object \fBDATATYPE_NULL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%PACKED\fP
T}	T{
Object \fBPACKED\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%BYTE\fP
T}	T{
Object \fBBYTE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%AINT\fP
T}	T{
Object \fBAINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%OFFSET\fP
T}	T{
Object \fBOFFSET\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COUNT\fP
T}	T{
Object \fBCOUNT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CHAR\fP
T}	T{
Object \fBCHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%WCHAR\fP
T}	T{
Object \fBWCHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_CHAR\fP
T}	T{
Object \fBSIGNED_CHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SHORT\fP
T}	T{
Object \fBSHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT\fP
T}	T{
Object \fBINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG\fP
T}	T{
Object \fBLONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_LONG\fP
T}	T{
Object \fBLONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_CHAR\fP
T}	T{
Object \fBUNSIGNED_CHAR\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_SHORT\fP
T}	T{
Object \fBUNSIGNED_SHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED\fP
T}	T{
Object \fBUNSIGNED\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_LONG\fP
T}	T{
Object \fBUNSIGNED_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_LONG_LONG\fP
T}	T{
Object \fBUNSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%FLOAT\fP
T}	T{
Object \fBFLOAT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE\fP
T}	T{
Object \fBDOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_DOUBLE\fP
T}	T{
Object \fBLONG_DOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_BOOL\fP
T}	T{
Object \fBC_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT8_T\fP
T}	T{
Object \fBINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT16_T\fP
T}	T{
Object \fBINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT32_T\fP
T}	T{
Object \fBINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT64_T\fP
T}	T{
Object \fBINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT8_T\fP
T}	T{
Object \fBUINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT16_T\fP
T}	T{
Object \fBUINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT32_T\fP
T}	T{
Object \fBUINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UINT64_T\fP
T}	T{
Object \fBUINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_COMPLEX\fP
T}	T{
Object \fBC_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_FLOAT_COMPLEX\fP
T}	T{
Object \fBC_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_DOUBLE_COMPLEX\fP
T}	T{
Object \fBC_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%C_LONG_DOUBLE_COMPLEX\fP
T}	T{
Object \fBC_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_BOOL\fP
T}	T{
Object \fBCXX_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_FLOAT_COMPLEX\fP
T}	T{
Object \fBCXX_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_DOUBLE_COMPLEX\fP
T}	T{
Object \fBCXX_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CXX_LONG_DOUBLE_COMPLEX\fP
T}	T{
Object \fBCXX_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SHORT_INT\fP
T}	T{
Object \fBSHORT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INT_INT\fP
T}	T{
Object \fBINT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%TWOINT\fP
T}	T{
Object \fBTWOINT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_INT\fP
T}	T{
Object \fBLONG_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%FLOAT_INT\fP
T}	T{
Object \fBFLOAT_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_INT\fP
T}	T{
Object \fBDOUBLE_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LONG_DOUBLE_INT\fP
T}	T{
Object \fBLONG_DOUBLE_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%CHARACTER\fP
T}	T{
Object \fBCHARACTER\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL\fP
T}	T{
Object \fBLOGICAL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER\fP
T}	T{
Object \fBINTEGER\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL\fP
T}	T{
Object \fBREAL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_PRECISION\fP
T}	T{
Object \fBDOUBLE_PRECISION\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX\fP
T}	T{
Object \fBCOMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%DOUBLE_COMPLEX\fP
T}	T{
Object \fBDOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL1\fP
T}	T{
Object \fBLOGICAL1\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL2\fP
T}	T{
Object \fBLOGICAL2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL4\fP
T}	T{
Object \fBLOGICAL4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%LOGICAL8\fP
T}	T{
Object \fBLOGICAL8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER1\fP
T}	T{
Object \fBINTEGER1\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER2\fP
T}	T{
Object \fBINTEGER2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER4\fP
T}	T{
Object \fBINTEGER4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER8\fP
T}	T{
Object \fBINTEGER8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%INTEGER16\fP
T}	T{
Object \fBINTEGER16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL2\fP
T}	T{
Object \fBREAL2\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL4\fP
T}	T{
Object \fBREAL4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL8\fP
T}	T{
Object \fBREAL8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REAL16\fP
T}	T{
Object \fBREAL16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX4\fP
T}	T{
Object \fBCOMPLEX4\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX8\fP
T}	T{
Object \fBCOMPLEX8\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX16\fP
T}	T{
Object \fBCOMPLEX16\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%COMPLEX32\fP
T}	T{
Object \fBCOMPLEX32\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%UNSIGNED_INT\fP
T}	T{
Object \fBUNSIGNED_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_SHORT\fP
T}	T{
Object \fBSIGNED_SHORT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_INT\fP
T}	T{
Object \fBSIGNED_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_LONG\fP
T}	T{
Object \fBSIGNED_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SIGNED_LONG_LONG\fP
T}	T{
Object \fBSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%BOOL\fP
T}	T{
Object \fBBOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT8_T\fP
T}	T{
Object \fBSINT8_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT16_T\fP
T}	T{
Object \fBSINT16_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT32_T\fP
T}	T{
Object \fBSINT32_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%SINT64_T\fP
T}	T{
Object \fBSINT64_T\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_BOOL\fP
T}	T{
Object \fBF_BOOL\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_INT\fP
T}	T{
Object \fBF_INT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_FLOAT\fP
T}	T{
Object \fBF_FLOAT\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_DOUBLE\fP
T}	T{
Object \fBF_DOUBLE\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_COMPLEX\fP
T}	T{
Object \fBF_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_FLOAT_COMPLEX\fP
T}	T{
Object \fBF_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%F_DOUBLE_COMPLEX\fP
T}	T{
Object \fBF_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
T}
_
T{
\fI\%REQUEST_NULL\fP
T}	T{
Object \fBREQUEST_NULL\fP of type \fI\%Request\fP
T}
_
T{
\fI\%MESSAGE_NULL\fP
T}	T{
Object \fBMESSAGE_NULL\fP of type \fI\%Message\fP
T}
_
T{
\fI\%MESSAGE_NO_PROC\fP
T}	T{
Object \fBMESSAGE_NO_PROC\fP of type \fI\%Message\fP
T}
_
T{
\fI\%OP_NULL\fP
T}	T{
Object \fBOP_NULL\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MAX\fP
T}	T{
Object \fBMAX\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MIN\fP
T}	T{
Object \fBMIN\fP of type \fI\%Op\fP
T}
_
T{
\fI\%SUM\fP
T}	T{
Object \fBSUM\fP of type \fI\%Op\fP
T}
_
T{
\fI\%PROD\fP
T}	T{
Object \fBPROD\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LAND\fP
T}	T{
Object \fBLAND\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BAND\fP
T}	T{
Object \fBBAND\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LOR\fP
T}	T{
Object \fBLOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BOR\fP
T}	T{
Object \fBBOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%LXOR\fP
T}	T{
Object \fBLXOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%BXOR\fP
T}	T{
Object \fBBXOR\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MAXLOC\fP
T}	T{
Object \fBMAXLOC\fP of type \fI\%Op\fP
T}
_
T{
\fI\%MINLOC\fP
T}	T{
Object \fBMINLOC\fP of type \fI\%Op\fP
T}
_
T{
\fI\%REPLACE\fP
T}	T{
Object \fBREPLACE\fP of type \fI\%Op\fP
T}
_
T{
\fI\%NO_OP\fP
T}	T{
Object \fBNO_OP\fP of type \fI\%Op\fP
T}
_
T{
\fI\%GROUP_NULL\fP
T}	T{
Object \fBGROUP_NULL\fP of type \fI\%Group\fP
T}
_
T{
\fI\%GROUP_EMPTY\fP
T}	T{
Object \fBGROUP_EMPTY\fP of type \fI\%Group\fP
T}
_
T{
\fI\%INFO_NULL\fP
T}	T{
Object \fBINFO_NULL\fP of type \fI\%Info\fP
T}
_
T{
\fI\%INFO_ENV\fP
T}	T{
Object \fBINFO_ENV\fP of type \fI\%Info\fP
T}
_
T{
\fI\%ERRHANDLER_NULL\fP
T}	T{
Object \fBERRHANDLER_NULL\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%ERRORS_RETURN\fP
T}	T{
Object \fBERRORS_RETURN\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%ERRORS_ABORT\fP
T}	T{
Object \fBERRORS_ABORT\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%ERRORS_ARE_FATAL\fP
T}	T{
Object \fBERRORS_ARE_FATAL\fP of type \fI\%Errhandler\fP
T}
_
T{
\fI\%SESSION_NULL\fP
T}	T{
Object \fBSESSION_NULL\fP of type \fI\%Session\fP
T}
_
T{
\fI\%COMM_NULL\fP
T}	T{
Object \fBCOMM_NULL\fP of type \fI\%Comm\fP
T}
_
T{
\fI\%COMM_SELF\fP
T}	T{
Object \fBCOMM_SELF\fP of type \fI\%Intracomm\fP
T}
_
T{
\fI\%COMM_WORLD\fP
T}	T{
Object \fBCOMM_WORLD\fP of type \fI\%Intracomm\fP
T}
_
T{
\fI\%WIN_NULL\fP
T}	T{
Object \fBWIN_NULL\fP of type \fI\%Win\fP
T}
_
T{
\fI\%FILE_NULL\fP
T}	T{
Object \fBFILE_NULL\fP of type \fI\%File\fP
T}
_
T{
\fI\%pickle\fP
T}	T{
Object \fBpickle\fP of type \fI\%Pickle\fP
T}
_
.TE
.SS mpi4py.MPI.UNDEFINED
.INDENT 0.0
.TP
.B mpi4py.MPI.UNDEFINED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = UNDEFINED
Constant \fBUNDEFINED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ANY_SOURCE
.INDENT 0.0
.TP
.B mpi4py.MPI.ANY_SOURCE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ANY_SOURCE
Constant \fBANY_SOURCE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ANY_TAG
.INDENT 0.0
.TP
.B mpi4py.MPI.ANY_TAG: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ANY_TAG
Constant \fBANY_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.PROC_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.PROC_NULL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = PROC_NULL
Constant \fBPROC_NULL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ROOT
.INDENT 0.0
.TP
.B mpi4py.MPI.ROOT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ROOT
Constant \fBROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.BOTTOM
.INDENT 0.0
.TP
.B mpi4py.MPI.BOTTOM: \fI\%BottomType\fP = BOTTOM
Constant \fBBOTTOM\fP of type \fI\%BottomType\fP
.UNINDENT
.SS mpi4py.MPI.IN_PLACE
.INDENT 0.0
.TP
.B mpi4py.MPI.IN_PLACE: \fI\%InPlaceType\fP = IN_PLACE
Constant \fBIN_PLACE\fP of type \fI\%InPlaceType\fP
.UNINDENT
.SS mpi4py.MPI.KEYVAL_INVALID
.INDENT 0.0
.TP
.B mpi4py.MPI.KEYVAL_INVALID: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = KEYVAL_INVALID
Constant \fBKEYVAL_INVALID\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.TAG_UB
.INDENT 0.0
.TP
.B mpi4py.MPI.TAG_UB: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = TAG_UB
Constant \fBTAG_UB\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.IO
.INDENT 0.0
.TP
.B mpi4py.MPI.IO: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = IO
Constant \fBIO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WTIME_IS_GLOBAL
.INDENT 0.0
.TP
.B mpi4py.MPI.WTIME_IS_GLOBAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WTIME_IS_GLOBAL
Constant \fBWTIME_IS_GLOBAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.UNIVERSE_SIZE
.INDENT 0.0
.TP
.B mpi4py.MPI.UNIVERSE_SIZE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = UNIVERSE_SIZE
Constant \fBUNIVERSE_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.APPNUM
.INDENT 0.0
.TP
.B mpi4py.MPI.APPNUM: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = APPNUM
Constant \fBAPPNUM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.LASTUSEDCODE
.INDENT 0.0
.TP
.B mpi4py.MPI.LASTUSEDCODE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = LASTUSEDCODE
Constant \fBLASTUSEDCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_BASE
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_BASE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_BASE
Constant \fBWIN_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_SIZE
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_SIZE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_SIZE
Constant \fBWIN_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_DISP_UNIT
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_DISP_UNIT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_DISP_UNIT
Constant \fBWIN_DISP_UNIT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_CREATE_FLAVOR
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_CREATE_FLAVOR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_CREATE_FLAVOR
Constant \fBWIN_CREATE_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_FLAVOR
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_FLAVOR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_FLAVOR
Constant \fBWIN_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_MODEL
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_MODEL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_MODEL
Constant \fBWIN_MODEL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SUCCESS
.INDENT 0.0
.TP
.B mpi4py.MPI.SUCCESS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SUCCESS
Constant \fBSUCCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_LASTCODE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_LASTCODE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_LASTCODE
Constant \fBERR_LASTCODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_TYPE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_TYPE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_TYPE
Constant \fBERR_TYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_REQUEST
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_REQUEST: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_REQUEST
Constant \fBERR_REQUEST\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_OP
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_OP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_OP
Constant \fBERR_OP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_GROUP
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_GROUP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_GROUP
Constant \fBERR_GROUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_INFO
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_INFO: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_INFO
Constant \fBERR_INFO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_ERRHANDLER
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_ERRHANDLER: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_ERRHANDLER
Constant \fBERR_ERRHANDLER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_SESSION
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_SESSION: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_SESSION
Constant \fBERR_SESSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_COMM
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_COMM: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_COMM
Constant \fBERR_COMM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_WIN
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_WIN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_WIN
Constant \fBERR_WIN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_FILE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_FILE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_FILE
Constant \fBERR_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_BUFFER
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_BUFFER: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_BUFFER
Constant \fBERR_BUFFER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_COUNT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_COUNT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_COUNT
Constant \fBERR_COUNT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_TAG
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_TAG: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_TAG
Constant \fBERR_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RANK
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RANK: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RANK
Constant \fBERR_RANK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_ROOT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_ROOT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_ROOT
Constant \fBERR_ROOT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_TRUNCATE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_TRUNCATE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_TRUNCATE
Constant \fBERR_TRUNCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_IN_STATUS
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_IN_STATUS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_IN_STATUS
Constant \fBERR_IN_STATUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_PENDING
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_PENDING: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_PENDING
Constant \fBERR_PENDING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_TOPOLOGY
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_TOPOLOGY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_TOPOLOGY
Constant \fBERR_TOPOLOGY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_DIMS
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_DIMS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_DIMS
Constant \fBERR_DIMS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_ARG
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_ARG: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_ARG
Constant \fBERR_ARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_OTHER
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_OTHER: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_OTHER
Constant \fBERR_OTHER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_UNKNOWN
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_UNKNOWN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_UNKNOWN
Constant \fBERR_UNKNOWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_INTERN
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_INTERN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_INTERN
Constant \fBERR_INTERN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_KEYVAL
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_KEYVAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_KEYVAL
Constant \fBERR_KEYVAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_NO_MEM
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_NO_MEM: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_NO_MEM
Constant \fBERR_NO_MEM\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_INFO_KEY
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_INFO_KEY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_INFO_KEY
Constant \fBERR_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_INFO_VALUE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_INFO_VALUE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_INFO_VALUE
Constant \fBERR_INFO_VALUE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_INFO_NOKEY
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_INFO_NOKEY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_INFO_NOKEY
Constant \fBERR_INFO_NOKEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_SPAWN
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_SPAWN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_SPAWN
Constant \fBERR_SPAWN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_PORT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_PORT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_PORT
Constant \fBERR_PORT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_SERVICE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_SERVICE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_SERVICE
Constant \fBERR_SERVICE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_NAME
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_NAME: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_NAME
Constant \fBERR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_PROC_ABORTED
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_PROC_ABORTED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_PROC_ABORTED
Constant \fBERR_PROC_ABORTED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_BASE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_BASE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_BASE
Constant \fBERR_BASE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_SIZE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_SIZE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_SIZE
Constant \fBERR_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_DISP
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_DISP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_DISP
Constant \fBERR_DISP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_ASSERT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_ASSERT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_ASSERT
Constant \fBERR_ASSERT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_LOCKTYPE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_LOCKTYPE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_LOCKTYPE
Constant \fBERR_LOCKTYPE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_CONFLICT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_CONFLICT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_CONFLICT
Constant \fBERR_RMA_CONFLICT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_SYNC
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_SYNC: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_SYNC
Constant \fBERR_RMA_SYNC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_RANGE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_RANGE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_RANGE
Constant \fBERR_RMA_RANGE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_ATTACH
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_ATTACH: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_ATTACH
Constant \fBERR_RMA_ATTACH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_SHARED
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_SHARED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_SHARED
Constant \fBERR_RMA_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_RMA_FLAVOR
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_RMA_FLAVOR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_RMA_FLAVOR
Constant \fBERR_RMA_FLAVOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_BAD_FILE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_BAD_FILE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_BAD_FILE
Constant \fBERR_BAD_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_NO_SUCH_FILE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_NO_SUCH_FILE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_NO_SUCH_FILE
Constant \fBERR_NO_SUCH_FILE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_FILE_EXISTS
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_FILE_EXISTS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_FILE_EXISTS
Constant \fBERR_FILE_EXISTS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_FILE_IN_USE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_FILE_IN_USE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_FILE_IN_USE
Constant \fBERR_FILE_IN_USE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_AMODE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_AMODE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_AMODE
Constant \fBERR_AMODE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_ACCESS
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_ACCESS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_ACCESS
Constant \fBERR_ACCESS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_READ_ONLY
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_READ_ONLY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_READ_ONLY
Constant \fBERR_READ_ONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_NO_SPACE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_NO_SPACE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_NO_SPACE
Constant \fBERR_NO_SPACE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_QUOTA
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_QUOTA: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_QUOTA
Constant \fBERR_QUOTA\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_NOT_SAME
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_NOT_SAME: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_NOT_SAME
Constant \fBERR_NOT_SAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_IO
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_IO: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_IO
Constant \fBERR_IO\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_UNSUPPORTED_OPERATION
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_UNSUPPORTED_OPERATION: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_UNSUPPORTED_OPERATION
Constant \fBERR_UNSUPPORTED_OPERATION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_UNSUPPORTED_DATAREP
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_UNSUPPORTED_DATAREP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_UNSUPPORTED_DATAREP
Constant \fBERR_UNSUPPORTED_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_CONVERSION
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_CONVERSION: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_CONVERSION
Constant \fBERR_CONVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_DUP_DATAREP
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_DUP_DATAREP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_DUP_DATAREP
Constant \fBERR_DUP_DATAREP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_VALUE_TOO_LARGE
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_VALUE_TOO_LARGE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_VALUE_TOO_LARGE
Constant \fBERR_VALUE_TOO_LARGE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_REVOKED
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_REVOKED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_REVOKED
Constant \fBERR_REVOKED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_PROC_FAILED
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_PROC_FAILED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_PROC_FAILED
Constant \fBERR_PROC_FAILED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ERR_PROC_FAILED_PENDING
.INDENT 0.0
.TP
.B mpi4py.MPI.ERR_PROC_FAILED_PENDING: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ERR_PROC_FAILED_PENDING
Constant \fBERR_PROC_FAILED_PENDING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ORDER_C
.INDENT 0.0
.TP
.B mpi4py.MPI.ORDER_C: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ORDER_C
Constant \fBORDER_C\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ORDER_FORTRAN
.INDENT 0.0
.TP
.B mpi4py.MPI.ORDER_FORTRAN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ORDER_FORTRAN
Constant \fBORDER_FORTRAN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.ORDER_F
.INDENT 0.0
.TP
.B mpi4py.MPI.ORDER_F: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = ORDER_F
Constant \fBORDER_F\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.TYPECLASS_INTEGER
.INDENT 0.0
.TP
.B mpi4py.MPI.TYPECLASS_INTEGER: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = TYPECLASS_INTEGER
Constant \fBTYPECLASS_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.TYPECLASS_REAL
.INDENT 0.0
.TP
.B mpi4py.MPI.TYPECLASS_REAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = TYPECLASS_REAL
Constant \fBTYPECLASS_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.TYPECLASS_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.TYPECLASS_COMPLEX: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = TYPECLASS_COMPLEX
Constant \fBTYPECLASS_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISTRIBUTE_NONE
.INDENT 0.0
.TP
.B mpi4py.MPI.DISTRIBUTE_NONE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISTRIBUTE_NONE
Constant \fBDISTRIBUTE_NONE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISTRIBUTE_BLOCK
.INDENT 0.0
.TP
.B mpi4py.MPI.DISTRIBUTE_BLOCK: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISTRIBUTE_BLOCK
Constant \fBDISTRIBUTE_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISTRIBUTE_CYCLIC
.INDENT 0.0
.TP
.B mpi4py.MPI.DISTRIBUTE_CYCLIC: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISTRIBUTE_CYCLIC
Constant \fBDISTRIBUTE_CYCLIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISTRIBUTE_DFLT_DARG
.INDENT 0.0
.TP
.B mpi4py.MPI.DISTRIBUTE_DFLT_DARG: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISTRIBUTE_DFLT_DARG
Constant \fBDISTRIBUTE_DFLT_DARG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_NAMED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_NAMED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_NAMED
Constant \fBCOMBINER_NAMED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_DUP
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_DUP: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_DUP
Constant \fBCOMBINER_DUP\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_CONTIGUOUS
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_CONTIGUOUS: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_CONTIGUOUS
Constant \fBCOMBINER_CONTIGUOUS\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_VECTOR
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_VECTOR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_VECTOR
Constant \fBCOMBINER_VECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_HVECTOR
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_HVECTOR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_HVECTOR
Constant \fBCOMBINER_HVECTOR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_INDEXED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_INDEXED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_INDEXED
Constant \fBCOMBINER_INDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_HINDEXED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_HINDEXED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_HINDEXED
Constant \fBCOMBINER_HINDEXED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_INDEXED_BLOCK
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_INDEXED_BLOCK: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_INDEXED_BLOCK
Constant \fBCOMBINER_INDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_HINDEXED_BLOCK
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_HINDEXED_BLOCK: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_HINDEXED_BLOCK
Constant \fBCOMBINER_HINDEXED_BLOCK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_STRUCT
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_STRUCT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_STRUCT
Constant \fBCOMBINER_STRUCT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_SUBARRAY
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_SUBARRAY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_SUBARRAY
Constant \fBCOMBINER_SUBARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_DARRAY
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_DARRAY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_DARRAY
Constant \fBCOMBINER_DARRAY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_RESIZED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_RESIZED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_RESIZED
Constant \fBCOMBINER_RESIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_VALUE_INDEX
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_VALUE_INDEX: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_VALUE_INDEX
Constant \fBCOMBINER_VALUE_INDEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_F90_INTEGER
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_F90_INTEGER: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_F90_INTEGER
Constant \fBCOMBINER_F90_INTEGER\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_F90_REAL
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_F90_REAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_F90_REAL
Constant \fBCOMBINER_F90_REAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMBINER_F90_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.COMBINER_F90_COMPLEX: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMBINER_F90_COMPLEX
Constant \fBCOMBINER_F90_COMPLEX\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.F_SOURCE
.INDENT 0.0
.TP
.B mpi4py.MPI.F_SOURCE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = F_SOURCE
Constant \fBF_SOURCE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.F_TAG
.INDENT 0.0
.TP
.B mpi4py.MPI.F_TAG: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = F_TAG
Constant \fBF_TAG\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.F_ERROR
.INDENT 0.0
.TP
.B mpi4py.MPI.F_ERROR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = F_ERROR
Constant \fBF_ERROR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.F_STATUS_SIZE
.INDENT 0.0
.TP
.B mpi4py.MPI.F_STATUS_SIZE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = F_STATUS_SIZE
Constant \fBF_STATUS_SIZE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.IDENT
.INDENT 0.0
.TP
.B mpi4py.MPI.IDENT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = IDENT
Constant \fBIDENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.CONGRUENT
.INDENT 0.0
.TP
.B mpi4py.MPI.CONGRUENT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = CONGRUENT
Constant \fBCONGRUENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SIMILAR
.INDENT 0.0
.TP
.B mpi4py.MPI.SIMILAR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SIMILAR
Constant \fBSIMILAR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.UNEQUAL
.INDENT 0.0
.TP
.B mpi4py.MPI.UNEQUAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = UNEQUAL
Constant \fBUNEQUAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.CART
.INDENT 0.0
.TP
.B mpi4py.MPI.CART: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = CART
Constant \fBCART\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.GRAPH
.INDENT 0.0
.TP
.B mpi4py.MPI.GRAPH: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = GRAPH
Constant \fBGRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DIST_GRAPH
.INDENT 0.0
.TP
.B mpi4py.MPI.DIST_GRAPH: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DIST_GRAPH
Constant \fBDIST_GRAPH\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.UNWEIGHTED
.INDENT 0.0
.TP
.B mpi4py.MPI.UNWEIGHTED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = UNWEIGHTED
Constant \fBUNWEIGHTED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WEIGHTS_EMPTY
.INDENT 0.0
.TP
.B mpi4py.MPI.WEIGHTS_EMPTY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WEIGHTS_EMPTY
Constant \fBWEIGHTS_EMPTY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMM_TYPE_SHARED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_TYPE_SHARED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMM_TYPE_SHARED
Constant \fBCOMM_TYPE_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMM_TYPE_HW_GUIDED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_TYPE_HW_GUIDED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMM_TYPE_HW_GUIDED
Constant \fBCOMM_TYPE_HW_GUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMM_TYPE_HW_UNGUIDED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_TYPE_HW_UNGUIDED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMM_TYPE_HW_UNGUIDED
Constant \fBCOMM_TYPE_HW_UNGUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.COMM_TYPE_RESOURCE_GUIDED
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_TYPE_RESOURCE_GUIDED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = COMM_TYPE_RESOURCE_GUIDED
Constant \fBCOMM_TYPE_RESOURCE_GUIDED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.BSEND_OVERHEAD
.INDENT 0.0
.TP
.B mpi4py.MPI.BSEND_OVERHEAD: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = BSEND_OVERHEAD
Constant \fBBSEND_OVERHEAD\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.BUFFER_AUTOMATIC
.INDENT 0.0
.TP
.B mpi4py.MPI.BUFFER_AUTOMATIC: \fI\%BufferAutomaticType\fP = BUFFER_AUTOMATIC
Constant \fBBUFFER_AUTOMATIC\fP of type \fI\%BufferAutomaticType\fP
.UNINDENT
.SS mpi4py.MPI.WIN_FLAVOR_CREATE
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_FLAVOR_CREATE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_FLAVOR_CREATE
Constant \fBWIN_FLAVOR_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_FLAVOR_ALLOCATE
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_FLAVOR_ALLOCATE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_FLAVOR_ALLOCATE
Constant \fBWIN_FLAVOR_ALLOCATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_FLAVOR_DYNAMIC
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_FLAVOR_DYNAMIC: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_FLAVOR_DYNAMIC
Constant \fBWIN_FLAVOR_DYNAMIC\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_FLAVOR_SHARED
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_FLAVOR_SHARED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_FLAVOR_SHARED
Constant \fBWIN_FLAVOR_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_SEPARATE
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_SEPARATE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_SEPARATE
Constant \fBWIN_SEPARATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.WIN_UNIFIED
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_UNIFIED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = WIN_UNIFIED
Constant \fBWIN_UNIFIED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_NOCHECK
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_NOCHECK: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_NOCHECK
Constant \fBMODE_NOCHECK\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_NOSTORE
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_NOSTORE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_NOSTORE
Constant \fBMODE_NOSTORE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_NOPUT
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_NOPUT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_NOPUT
Constant \fBMODE_NOPUT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_NOPRECEDE
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_NOPRECEDE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_NOPRECEDE
Constant \fBMODE_NOPRECEDE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_NOSUCCEED
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_NOSUCCEED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_NOSUCCEED
Constant \fBMODE_NOSUCCEED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.LOCK_EXCLUSIVE
.INDENT 0.0
.TP
.B mpi4py.MPI.LOCK_EXCLUSIVE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = LOCK_EXCLUSIVE
Constant \fBLOCK_EXCLUSIVE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.LOCK_SHARED
.INDENT 0.0
.TP
.B mpi4py.MPI.LOCK_SHARED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = LOCK_SHARED
Constant \fBLOCK_SHARED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_RDONLY
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_RDONLY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_RDONLY
Constant \fBMODE_RDONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_WRONLY
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_WRONLY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_WRONLY
Constant \fBMODE_WRONLY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_RDWR
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_RDWR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_RDWR
Constant \fBMODE_RDWR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_CREATE
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_CREATE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_CREATE
Constant \fBMODE_CREATE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_EXCL
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_EXCL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_EXCL
Constant \fBMODE_EXCL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_DELETE_ON_CLOSE
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_DELETE_ON_CLOSE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_DELETE_ON_CLOSE
Constant \fBMODE_DELETE_ON_CLOSE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_UNIQUE_OPEN
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_UNIQUE_OPEN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_UNIQUE_OPEN
Constant \fBMODE_UNIQUE_OPEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_SEQUENTIAL
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_SEQUENTIAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_SEQUENTIAL
Constant \fBMODE_SEQUENTIAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MODE_APPEND
.INDENT 0.0
.TP
.B mpi4py.MPI.MODE_APPEND: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MODE_APPEND
Constant \fBMODE_APPEND\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SEEK_SET
.INDENT 0.0
.TP
.B mpi4py.MPI.SEEK_SET: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SEEK_SET
Constant \fBSEEK_SET\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SEEK_CUR
.INDENT 0.0
.TP
.B mpi4py.MPI.SEEK_CUR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SEEK_CUR
Constant \fBSEEK_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SEEK_END
.INDENT 0.0
.TP
.B mpi4py.MPI.SEEK_END: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SEEK_END
Constant \fBSEEK_END\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISPLACEMENT_CURRENT
.INDENT 0.0
.TP
.B mpi4py.MPI.DISPLACEMENT_CURRENT: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISPLACEMENT_CURRENT
Constant \fBDISPLACEMENT_CURRENT\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DISP_CUR
.INDENT 0.0
.TP
.B mpi4py.MPI.DISP_CUR: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = DISP_CUR
Constant \fBDISP_CUR\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.THREAD_SINGLE
.INDENT 0.0
.TP
.B mpi4py.MPI.THREAD_SINGLE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = THREAD_SINGLE
Constant \fBTHREAD_SINGLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.THREAD_FUNNELED
.INDENT 0.0
.TP
.B mpi4py.MPI.THREAD_FUNNELED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = THREAD_FUNNELED
Constant \fBTHREAD_FUNNELED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.THREAD_SERIALIZED
.INDENT 0.0
.TP
.B mpi4py.MPI.THREAD_SERIALIZED: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = THREAD_SERIALIZED
Constant \fBTHREAD_SERIALIZED\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.THREAD_MULTIPLE
.INDENT 0.0
.TP
.B mpi4py.MPI.THREAD_MULTIPLE: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = THREAD_MULTIPLE
Constant \fBTHREAD_MULTIPLE\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.VERSION
.INDENT 0.0
.TP
.B mpi4py.MPI.VERSION: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = VERSION
Constant \fBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.SUBVERSION
.INDENT 0.0
.TP
.B mpi4py.MPI.SUBVERSION: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = SUBVERSION
Constant \fBSUBVERSION\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_PROCESSOR_NAME
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_PROCESSOR_NAME: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_PROCESSOR_NAME
Constant \fBMAX_PROCESSOR_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_ERROR_STRING
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_ERROR_STRING: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_ERROR_STRING
Constant \fBMAX_ERROR_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_PORT_NAME
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_PORT_NAME: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_PORT_NAME
Constant \fBMAX_PORT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_INFO_KEY
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_INFO_KEY: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_INFO_KEY
Constant \fBMAX_INFO_KEY\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_INFO_VAL
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_INFO_VAL: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_INFO_VAL
Constant \fBMAX_INFO_VAL\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_OBJECT_NAME
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_OBJECT_NAME: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_OBJECT_NAME
Constant \fBMAX_OBJECT_NAME\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_DATAREP_STRING
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_DATAREP_STRING: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_DATAREP_STRING
Constant \fBMAX_DATAREP_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_LIBRARY_VERSION_STRING
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_LIBRARY_VERSION_STRING: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_LIBRARY_VERSION_STRING
Constant \fBMAX_LIBRARY_VERSION_STRING\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_PSET_NAME_LEN
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_PSET_NAME_LEN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_PSET_NAME_LEN
Constant \fBMAX_PSET_NAME_LEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.MAX_STRINGTAG_LEN
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX_STRINGTAG_LEN: \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link' = MAX_STRINGTAG_LEN
Constant \fBMAX_STRINGTAG_LEN\fP of type \X'tty: link https://docs.python.org/3/library/functions.html#int'\fI\%int\fP\X'tty: link'
.UNINDENT
.SS mpi4py.MPI.DATATYPE_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.DATATYPE_NULL: \fI\%Datatype\fP = DATATYPE_NULL
Object \fBDATATYPE_NULL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.PACKED
.INDENT 0.0
.TP
.B mpi4py.MPI.PACKED: \fI\%Datatype\fP = PACKED
Object \fBPACKED\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.BYTE
.INDENT 0.0
.TP
.B mpi4py.MPI.BYTE: \fI\%Datatype\fP = BYTE
Object \fBBYTE\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.AINT
.INDENT 0.0
.TP
.B mpi4py.MPI.AINT: \fI\%Datatype\fP = AINT
Object \fBAINT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.OFFSET
.INDENT 0.0
.TP
.B mpi4py.MPI.OFFSET: \fI\%Datatype\fP = OFFSET
Object \fBOFFSET\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COUNT
.INDENT 0.0
.TP
.B mpi4py.MPI.COUNT: \fI\%Datatype\fP = COUNT
Object \fBCOUNT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CHAR
.INDENT 0.0
.TP
.B mpi4py.MPI.CHAR: \fI\%Datatype\fP = CHAR
Object \fBCHAR\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.WCHAR
.INDENT 0.0
.TP
.B mpi4py.MPI.WCHAR: \fI\%Datatype\fP = WCHAR
Object \fBWCHAR\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SIGNED_CHAR
.INDENT 0.0
.TP
.B mpi4py.MPI.SIGNED_CHAR: \fI\%Datatype\fP = SIGNED_CHAR
Object \fBSIGNED_CHAR\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SHORT
.INDENT 0.0
.TP
.B mpi4py.MPI.SHORT: \fI\%Datatype\fP = SHORT
Object \fBSHORT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT
.INDENT 0.0
.TP
.B mpi4py.MPI.INT: \fI\%Datatype\fP = INT
Object \fBINT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.LONG: \fI\%Datatype\fP = LONG
Object \fBLONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LONG_LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.LONG_LONG: \fI\%Datatype\fP = LONG_LONG
Object \fBLONG_LONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED_CHAR
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED_CHAR: \fI\%Datatype\fP = UNSIGNED_CHAR
Object \fBUNSIGNED_CHAR\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED_SHORT
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED_SHORT: \fI\%Datatype\fP = UNSIGNED_SHORT
Object \fBUNSIGNED_SHORT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED: \fI\%Datatype\fP = UNSIGNED
Object \fBUNSIGNED\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED_LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED_LONG: \fI\%Datatype\fP = UNSIGNED_LONG
Object \fBUNSIGNED_LONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED_LONG_LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED_LONG_LONG: \fI\%Datatype\fP = UNSIGNED_LONG_LONG
Object \fBUNSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.FLOAT
.INDENT 0.0
.TP
.B mpi4py.MPI.FLOAT: \fI\%Datatype\fP = FLOAT
Object \fBFLOAT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.DOUBLE
.INDENT 0.0
.TP
.B mpi4py.MPI.DOUBLE: \fI\%Datatype\fP = DOUBLE
Object \fBDOUBLE\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LONG_DOUBLE
.INDENT 0.0
.TP
.B mpi4py.MPI.LONG_DOUBLE: \fI\%Datatype\fP = LONG_DOUBLE
Object \fBLONG_DOUBLE\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.C_BOOL
.INDENT 0.0
.TP
.B mpi4py.MPI.C_BOOL: \fI\%Datatype\fP = C_BOOL
Object \fBC_BOOL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT8_T
.INDENT 0.0
.TP
.B mpi4py.MPI.INT8_T: \fI\%Datatype\fP = INT8_T
Object \fBINT8_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT16_T
.INDENT 0.0
.TP
.B mpi4py.MPI.INT16_T: \fI\%Datatype\fP = INT16_T
Object \fBINT16_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT32_T
.INDENT 0.0
.TP
.B mpi4py.MPI.INT32_T: \fI\%Datatype\fP = INT32_T
Object \fBINT32_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT64_T
.INDENT 0.0
.TP
.B mpi4py.MPI.INT64_T: \fI\%Datatype\fP = INT64_T
Object \fBINT64_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UINT8_T
.INDENT 0.0
.TP
.B mpi4py.MPI.UINT8_T: \fI\%Datatype\fP = UINT8_T
Object \fBUINT8_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UINT16_T
.INDENT 0.0
.TP
.B mpi4py.MPI.UINT16_T: \fI\%Datatype\fP = UINT16_T
Object \fBUINT16_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UINT32_T
.INDENT 0.0
.TP
.B mpi4py.MPI.UINT32_T: \fI\%Datatype\fP = UINT32_T
Object \fBUINT32_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UINT64_T
.INDENT 0.0
.TP
.B mpi4py.MPI.UINT64_T: \fI\%Datatype\fP = UINT64_T
Object \fBUINT64_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.C_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.C_COMPLEX: \fI\%Datatype\fP = C_COMPLEX
Object \fBC_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.C_FLOAT_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.C_FLOAT_COMPLEX: \fI\%Datatype\fP = C_FLOAT_COMPLEX
Object \fBC_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.C_DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.C_DOUBLE_COMPLEX: \fI\%Datatype\fP = C_DOUBLE_COMPLEX
Object \fBC_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.C_LONG_DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.C_LONG_DOUBLE_COMPLEX: \fI\%Datatype\fP = C_LONG_DOUBLE_COMPLEX
Object \fBC_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CXX_BOOL
.INDENT 0.0
.TP
.B mpi4py.MPI.CXX_BOOL: \fI\%Datatype\fP = CXX_BOOL
Object \fBCXX_BOOL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CXX_FLOAT_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.CXX_FLOAT_COMPLEX: \fI\%Datatype\fP = CXX_FLOAT_COMPLEX
Object \fBCXX_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CXX_DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.CXX_DOUBLE_COMPLEX: \fI\%Datatype\fP = CXX_DOUBLE_COMPLEX
Object \fBCXX_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CXX_LONG_DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.CXX_LONG_DOUBLE_COMPLEX: \fI\%Datatype\fP = CXX_LONG_DOUBLE_COMPLEX
Object \fBCXX_LONG_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SHORT_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.SHORT_INT: \fI\%Datatype\fP = SHORT_INT
Object \fBSHORT_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INT_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.INT_INT: \fI\%Datatype\fP = INT_INT
Object \fBINT_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.TWOINT
.INDENT 0.0
.TP
.B mpi4py.MPI.TWOINT: \fI\%Datatype\fP = TWOINT
Object \fBTWOINT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LONG_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.LONG_INT: \fI\%Datatype\fP = LONG_INT
Object \fBLONG_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.FLOAT_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.FLOAT_INT: \fI\%Datatype\fP = FLOAT_INT
Object \fBFLOAT_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.DOUBLE_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.DOUBLE_INT: \fI\%Datatype\fP = DOUBLE_INT
Object \fBDOUBLE_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LONG_DOUBLE_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.LONG_DOUBLE_INT: \fI\%Datatype\fP = LONG_DOUBLE_INT
Object \fBLONG_DOUBLE_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.CHARACTER
.INDENT 0.0
.TP
.B mpi4py.MPI.CHARACTER: \fI\%Datatype\fP = CHARACTER
Object \fBCHARACTER\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LOGICAL
.INDENT 0.0
.TP
.B mpi4py.MPI.LOGICAL: \fI\%Datatype\fP = LOGICAL
Object \fBLOGICAL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER: \fI\%Datatype\fP = INTEGER
Object \fBINTEGER\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REAL
.INDENT 0.0
.TP
.B mpi4py.MPI.REAL: \fI\%Datatype\fP = REAL
Object \fBREAL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.DOUBLE_PRECISION
.INDENT 0.0
.TP
.B mpi4py.MPI.DOUBLE_PRECISION: \fI\%Datatype\fP = DOUBLE_PRECISION
Object \fBDOUBLE_PRECISION\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.COMPLEX: \fI\%Datatype\fP = COMPLEX
Object \fBCOMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.DOUBLE_COMPLEX: \fI\%Datatype\fP = DOUBLE_COMPLEX
Object \fBDOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LOGICAL1
.INDENT 0.0
.TP
.B mpi4py.MPI.LOGICAL1: \fI\%Datatype\fP = LOGICAL1
Object \fBLOGICAL1\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LOGICAL2
.INDENT 0.0
.TP
.B mpi4py.MPI.LOGICAL2: \fI\%Datatype\fP = LOGICAL2
Object \fBLOGICAL2\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LOGICAL4
.INDENT 0.0
.TP
.B mpi4py.MPI.LOGICAL4: \fI\%Datatype\fP = LOGICAL4
Object \fBLOGICAL4\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.LOGICAL8
.INDENT 0.0
.TP
.B mpi4py.MPI.LOGICAL8: \fI\%Datatype\fP = LOGICAL8
Object \fBLOGICAL8\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER1
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER1: \fI\%Datatype\fP = INTEGER1
Object \fBINTEGER1\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER2
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER2: \fI\%Datatype\fP = INTEGER2
Object \fBINTEGER2\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER4
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER4: \fI\%Datatype\fP = INTEGER4
Object \fBINTEGER4\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER8
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER8: \fI\%Datatype\fP = INTEGER8
Object \fBINTEGER8\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.INTEGER16
.INDENT 0.0
.TP
.B mpi4py.MPI.INTEGER16: \fI\%Datatype\fP = INTEGER16
Object \fBINTEGER16\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REAL2
.INDENT 0.0
.TP
.B mpi4py.MPI.REAL2: \fI\%Datatype\fP = REAL2
Object \fBREAL2\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REAL4
.INDENT 0.0
.TP
.B mpi4py.MPI.REAL4: \fI\%Datatype\fP = REAL4
Object \fBREAL4\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REAL8
.INDENT 0.0
.TP
.B mpi4py.MPI.REAL8: \fI\%Datatype\fP = REAL8
Object \fBREAL8\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REAL16
.INDENT 0.0
.TP
.B mpi4py.MPI.REAL16: \fI\%Datatype\fP = REAL16
Object \fBREAL16\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COMPLEX4
.INDENT 0.0
.TP
.B mpi4py.MPI.COMPLEX4: \fI\%Datatype\fP = COMPLEX4
Object \fBCOMPLEX4\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COMPLEX8
.INDENT 0.0
.TP
.B mpi4py.MPI.COMPLEX8: \fI\%Datatype\fP = COMPLEX8
Object \fBCOMPLEX8\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COMPLEX16
.INDENT 0.0
.TP
.B mpi4py.MPI.COMPLEX16: \fI\%Datatype\fP = COMPLEX16
Object \fBCOMPLEX16\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.COMPLEX32
.INDENT 0.0
.TP
.B mpi4py.MPI.COMPLEX32: \fI\%Datatype\fP = COMPLEX32
Object \fBCOMPLEX32\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.UNSIGNED_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.UNSIGNED_INT: \fI\%Datatype\fP = UNSIGNED_INT
Object \fBUNSIGNED_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SIGNED_SHORT
.INDENT 0.0
.TP
.B mpi4py.MPI.SIGNED_SHORT: \fI\%Datatype\fP = SIGNED_SHORT
Object \fBSIGNED_SHORT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SIGNED_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.SIGNED_INT: \fI\%Datatype\fP = SIGNED_INT
Object \fBSIGNED_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SIGNED_LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.SIGNED_LONG: \fI\%Datatype\fP = SIGNED_LONG
Object \fBSIGNED_LONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SIGNED_LONG_LONG
.INDENT 0.0
.TP
.B mpi4py.MPI.SIGNED_LONG_LONG: \fI\%Datatype\fP = SIGNED_LONG_LONG
Object \fBSIGNED_LONG_LONG\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.BOOL
.INDENT 0.0
.TP
.B mpi4py.MPI.BOOL: \fI\%Datatype\fP = BOOL
Object \fBBOOL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SINT8_T
.INDENT 0.0
.TP
.B mpi4py.MPI.SINT8_T: \fI\%Datatype\fP = SINT8_T
Object \fBSINT8_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SINT16_T
.INDENT 0.0
.TP
.B mpi4py.MPI.SINT16_T: \fI\%Datatype\fP = SINT16_T
Object \fBSINT16_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SINT32_T
.INDENT 0.0
.TP
.B mpi4py.MPI.SINT32_T: \fI\%Datatype\fP = SINT32_T
Object \fBSINT32_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.SINT64_T
.INDENT 0.0
.TP
.B mpi4py.MPI.SINT64_T: \fI\%Datatype\fP = SINT64_T
Object \fBSINT64_T\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_BOOL
.INDENT 0.0
.TP
.B mpi4py.MPI.F_BOOL: \fI\%Datatype\fP = F_BOOL
Object \fBF_BOOL\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_INT
.INDENT 0.0
.TP
.B mpi4py.MPI.F_INT: \fI\%Datatype\fP = F_INT
Object \fBF_INT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_FLOAT
.INDENT 0.0
.TP
.B mpi4py.MPI.F_FLOAT: \fI\%Datatype\fP = F_FLOAT
Object \fBF_FLOAT\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_DOUBLE
.INDENT 0.0
.TP
.B mpi4py.MPI.F_DOUBLE: \fI\%Datatype\fP = F_DOUBLE
Object \fBF_DOUBLE\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.F_COMPLEX: \fI\%Datatype\fP = F_COMPLEX
Object \fBF_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_FLOAT_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.F_FLOAT_COMPLEX: \fI\%Datatype\fP = F_FLOAT_COMPLEX
Object \fBF_FLOAT_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.F_DOUBLE_COMPLEX
.INDENT 0.0
.TP
.B mpi4py.MPI.F_DOUBLE_COMPLEX: \fI\%Datatype\fP = F_DOUBLE_COMPLEX
Object \fBF_DOUBLE_COMPLEX\fP of type \fI\%Datatype\fP
.UNINDENT
.SS mpi4py.MPI.REQUEST_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.REQUEST_NULL: \fI\%Request\fP = REQUEST_NULL
Object \fBREQUEST_NULL\fP of type \fI\%Request\fP
.UNINDENT
.SS mpi4py.MPI.MESSAGE_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.MESSAGE_NULL: \fI\%Message\fP = MESSAGE_NULL
Object \fBMESSAGE_NULL\fP of type \fI\%Message\fP
.UNINDENT
.SS mpi4py.MPI.MESSAGE_NO_PROC
.INDENT 0.0
.TP
.B mpi4py.MPI.MESSAGE_NO_PROC: \fI\%Message\fP = MESSAGE_NO_PROC
Object \fBMESSAGE_NO_PROC\fP of type \fI\%Message\fP
.UNINDENT
.SS mpi4py.MPI.OP_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.OP_NULL: \fI\%Op\fP = OP_NULL
Object \fBOP_NULL\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.MAX
.INDENT 0.0
.TP
.B mpi4py.MPI.MAX: \fI\%Op\fP = MAX
Object \fBMAX\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.MIN
.INDENT 0.0
.TP
.B mpi4py.MPI.MIN: \fI\%Op\fP = MIN
Object \fBMIN\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.SUM
.INDENT 0.0
.TP
.B mpi4py.MPI.SUM: \fI\%Op\fP = SUM
Object \fBSUM\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.PROD
.INDENT 0.0
.TP
.B mpi4py.MPI.PROD: \fI\%Op\fP = PROD
Object \fBPROD\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.LAND
.INDENT 0.0
.TP
.B mpi4py.MPI.LAND: \fI\%Op\fP = LAND
Object \fBLAND\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.BAND
.INDENT 0.0
.TP
.B mpi4py.MPI.BAND: \fI\%Op\fP = BAND
Object \fBBAND\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.LOR
.INDENT 0.0
.TP
.B mpi4py.MPI.LOR: \fI\%Op\fP = LOR
Object \fBLOR\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.BOR
.INDENT 0.0
.TP
.B mpi4py.MPI.BOR: \fI\%Op\fP = BOR
Object \fBBOR\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.LXOR
.INDENT 0.0
.TP
.B mpi4py.MPI.LXOR: \fI\%Op\fP = LXOR
Object \fBLXOR\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.BXOR
.INDENT 0.0
.TP
.B mpi4py.MPI.BXOR: \fI\%Op\fP = BXOR
Object \fBBXOR\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.MAXLOC
.INDENT 0.0
.TP
.B mpi4py.MPI.MAXLOC: \fI\%Op\fP = MAXLOC
Object \fBMAXLOC\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.MINLOC
.INDENT 0.0
.TP
.B mpi4py.MPI.MINLOC: \fI\%Op\fP = MINLOC
Object \fBMINLOC\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.REPLACE
.INDENT 0.0
.TP
.B mpi4py.MPI.REPLACE: \fI\%Op\fP = REPLACE
Object \fBREPLACE\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.NO_OP
.INDENT 0.0
.TP
.B mpi4py.MPI.NO_OP: \fI\%Op\fP = NO_OP
Object \fBNO_OP\fP of type \fI\%Op\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP (\fIAny\fP)
.IP \(bu 2
\fBy\fP (\fIAny\fP)
.UNINDENT
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.SS mpi4py.MPI.GROUP_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.GROUP_NULL: \fI\%Group\fP = GROUP_NULL
Object \fBGROUP_NULL\fP of type \fI\%Group\fP
.UNINDENT
.SS mpi4py.MPI.GROUP_EMPTY
.INDENT 0.0
.TP
.B mpi4py.MPI.GROUP_EMPTY: \fI\%Group\fP = GROUP_EMPTY
Object \fBGROUP_EMPTY\fP of type \fI\%Group\fP
.UNINDENT
.SS mpi4py.MPI.INFO_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.INFO_NULL: \fI\%Info\fP = INFO_NULL
Object \fBINFO_NULL\fP of type \fI\%Info\fP
.UNINDENT
.SS mpi4py.MPI.INFO_ENV
.INDENT 0.0
.TP
.B mpi4py.MPI.INFO_ENV: \fI\%Info\fP = INFO_ENV
Object \fBINFO_ENV\fP of type \fI\%Info\fP
.UNINDENT
.SS mpi4py.MPI.ERRHANDLER_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.ERRHANDLER_NULL: \fI\%Errhandler\fP = ERRHANDLER_NULL
Object \fBERRHANDLER_NULL\fP of type \fI\%Errhandler\fP
.UNINDENT
.SS mpi4py.MPI.ERRORS_RETURN
.INDENT 0.0
.TP
.B mpi4py.MPI.ERRORS_RETURN: \fI\%Errhandler\fP = ERRORS_RETURN
Object \fBERRORS_RETURN\fP of type \fI\%Errhandler\fP
.UNINDENT
.SS mpi4py.MPI.ERRORS_ABORT
.INDENT 0.0
.TP
.B mpi4py.MPI.ERRORS_ABORT: \fI\%Errhandler\fP = ERRORS_ABORT
Object \fBERRORS_ABORT\fP of type \fI\%Errhandler\fP
.UNINDENT
.SS mpi4py.MPI.ERRORS_ARE_FATAL
.INDENT 0.0
.TP
.B mpi4py.MPI.ERRORS_ARE_FATAL: \fI\%Errhandler\fP = ERRORS_ARE_FATAL
Object \fBERRORS_ARE_FATAL\fP of type \fI\%Errhandler\fP
.UNINDENT
.SS mpi4py.MPI.SESSION_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.SESSION_NULL: \fI\%Session\fP = SESSION_NULL
Object \fBSESSION_NULL\fP of type \fI\%Session\fP
.UNINDENT
.SS mpi4py.MPI.COMM_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_NULL: \fI\%Comm\fP = COMM_NULL
Object \fBCOMM_NULL\fP of type \fI\%Comm\fP
.UNINDENT
.SS mpi4py.MPI.COMM_SELF
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_SELF: \fI\%Intracomm\fP = COMM_SELF
Object \fBCOMM_SELF\fP of type \fI\%Intracomm\fP
.UNINDENT
.SS mpi4py.MPI.COMM_WORLD
.INDENT 0.0
.TP
.B mpi4py.MPI.COMM_WORLD: \fI\%Intracomm\fP = COMM_WORLD
Object \fBCOMM_WORLD\fP of type \fI\%Intracomm\fP
.UNINDENT
.SS mpi4py.MPI.WIN_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.WIN_NULL: \fI\%Win\fP = WIN_NULL
Object \fBWIN_NULL\fP of type \fI\%Win\fP
.UNINDENT
.SS mpi4py.MPI.FILE_NULL
.INDENT 0.0
.TP
.B mpi4py.MPI.FILE_NULL: \fI\%File\fP = FILE_NULL
Object \fBFILE_NULL\fP of type \fI\%File\fP
.UNINDENT
.SS mpi4py.MPI.pickle
.INDENT 0.0
.TP
.B mpi4py.MPI.pickle: \fI\%Pickle\fP = <mpi4py.MPI.Pickle object>
Object \fBpickle\fP of type \fI\%Pickle\fP
.UNINDENT
.SH CITATION
.sp
If MPI for Python been significant to a project that leads to an
academic publication, please acknowledge that fact by citing the
project.
.INDENT 0.0
.IP \(bu 2
M. Rogowski, S. Aseeri, D. Keyes, and L. Dalcin,
\fImpi4py.futures: MPI\-Based Asynchronous Task Execution for Python\fP,
IEEE Transactions on Parallel and Distributed Systems, 34(2):611\-622, 2023.
\X'tty: link https://doi.org/10.1109/TPDS.2022.3225481'\fI\%https://doi.org/10.1109/TPDS.2022.3225481\fP\X'tty: link'
.IP \(bu 2
L. Dalcin and Y.\-L. L. Fang,
\fImpi4py: Status Update After 12 Years of Development\fP,
Computing in Science & Engineering, 23(4):47\-54, 2021.
\X'tty: link https://doi.org/10.1109/MCSE.2021.3083216'\fI\%https://doi.org/10.1109/MCSE.2021.3083216\fP\X'tty: link'
.IP \(bu 2
L. Dalcin, P. Kler, R. Paz, and A. Cosimo,
\fIParallel Distributed Computing using Python\fP,
Advances in Water Resources, 34(9):1124\-1139, 2011.
\X'tty: link https://doi.org/10.1016/j.advwatres.2011.04.013'\fI\%https://doi.org/10.1016/j.advwatres.2011.04.013\fP\X'tty: link'
.IP \(bu 2
L. Dalcin, R. Paz, M. Storti, and J. D\(aqElia,
\fIMPI for Python: performance improvements and MPI\-2 extensions\fP,
Journal of Parallel and Distributed Computing, 68(5):655\-662, 2008.
\X'tty: link https://doi.org/10.1016/j.jpdc.2007.09.005'\fI\%https://doi.org/10.1016/j.jpdc.2007.09.005\fP\X'tty: link'
.IP \(bu 2
L. Dalcin, R. Paz, and M. Storti,
\fIMPI for Python\fP,
Journal of Parallel and Distributed Computing, 65(9):1108\-1115, 2005.
\X'tty: link https://doi.org/10.1016/j.jpdc.2005.03.010'\fI\%https://doi.org/10.1016/j.jpdc.2005.03.010\fP\X'tty: link'
.UNINDENT
.SH INSTALLATION
.SS Build backends
.sp
mpi4py supports two different build backends: \X'tty: link https://setuptools.pypa.io/'\fI\%setuptools\fP\X'tty: link' (default),
\X'tty: link https://scikit-build-core.readthedocs.io/'\fI\%scikit\-build\-core\fP\X'tty: link' (\X'tty: link https://cmake.org/'\fI\%CMake\fP\X'tty: link'\-based), and \X'tty: link https://meson-python.readthedocs.io/'\fI\%meson\-python\fP\X'tty: link'
(\X'tty: link https://mesonbuild.com/'\fI\%Meson\fP\X'tty: link'\-based). The build backend can be selected by setting the
\fI\%MPI4PY_BUILD_BACKEND\fP environment variable.
.INDENT 0.0
.TP
.B MPI4PY_BUILD_BACKEND
.INDENT 7.0
.TP
.B Choices
\fB\(dqsetuptools\(dq\fP, \fB\(dqscikit\-build\-core\(dq\fP, \fB\(dqmeson\-python\(dq\fP
.TP
.B Default
\fB\(dqsetuptools\(dq\fP
.UNINDENT
.sp
Request a build backend for building mpi4py from sources.
.UNINDENT
.SS Using \fBsetuptools\fP
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Set the \fI\%MPI4PY_BUILD_BACKEND\fP environment variable to
\fB\(dqsetuptools\(dq\fP to use the \X'tty: link https://setuptools.pypa.io/'\fI\%setuptools\fP\X'tty: link' build backend.
.UNINDENT
.UNINDENT
.sp
When using the default \X'tty: link https://setuptools.pypa.io/'\fI\%setuptools\fP\X'tty: link' build backend, mpi4py relies on
the legacy Python distutils framework to build C extension modules.
The following environment variables affect the build configuration.
.INDENT 0.0
.TP
.B MPI4PY_BUILD_MPICC
The \fBmpicc\fP compiler wrapper command is searched for in
the executable search path (\fBPATH\fP environment variable)
and used to compile the \fI\%mpi4py.MPI\fP C extension module.
Alternatively, use the \fI\%MPI4PY_BUILD_MPICC\fP environment
variable to the full path or command corresponding to the MPI\-aware
C compiler.
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_BUILD_MPILD
The \fBmpicc\fP compiler wrapper command is also used for
linking the \fI\%mpi4py.MPI\fP C extension module.
Alternatively, use the \fI\%MPI4PY_BUILD_MPILD\fP environment
variable to specify the full path or command corresponding to the
MPI\-aware C linker.
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_BUILD_MPICFG
If the MPI implementation does not provide a compiler wrapper, or
it is not installed in a default system location, all relevant
build information like include/library locations and library lists
can be provided in an ini\-style configuration file under a
\fB[mpi]\fP section. mpi4py can then be asked to use the custom build
information by setting the \fI\%MPI4PY_BUILD_MPICFG\fP
environment variable to the full path of the configuration file. As
an example, see the \fBmpi.cfg\fP file located in the top level
mpi4py source directory.
.UNINDENT
.INDENT 0.0
.TP
.B MPI4PY_BUILD_CONFIGURE
Some vendor MPI implementations may not provide complete coverage
of the MPI standard, or may provide partial features of newer MPI
standard versions while advertising support for an older version.
Setting the \fI\%MPI4PY_BUILD_CONFIGURE\fP environment variable
to a non\-empty string will trigger the run of exhaustive checks for
the availability of all MPI constants, predefined handles, and
routines.
.UNINDENT
.sp
The following environment variables are aliases for the ones described
above. Having shorter names, they are convenient for occasional use in
the command line. Its usage is not recommended in automation scenarios
like packaging recipes, deployment scripts, and container image
creation.
.INDENT 0.0
.TP
.B MPICC
Convenience alias for \fI\%MPI4PY_BUILD_MPICC\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B MPILD
Convenience alias for \fI\%MPI4PY_BUILD_MPILD\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B MPICFG
Convenience alias for \fI\%MPI4PY_BUILD_MPICFG\fP\&.
.UNINDENT
.SS Using \fBscikit\-build\-core\fP
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Set the \fI\%MPI4PY_BUILD_BACKEND\fP environment variable to
\fB\(dqscikit\-build\-core\(dq\fP to use the \X'tty: link https://scikit-build-core.readthedocs.io/'\fI\%scikit\-build\-core\fP\X'tty: link' build backend.
.UNINDENT
.UNINDENT
.sp
When using the \X'tty: link https://scikit-build-core.readthedocs.io/'\fI\%scikit\-build\-core\fP\X'tty: link' build backend, mpi4py delegates all
of MPI build configuration to \X'tty: link https://cmake.org/'\fI\%CMake\fP\X'tty: link'\(aqs \X'tty: link https://cmake.org/cmake/help/latest/module/FindMPI.html'\fI\%FindMPI\fP\X'tty: link' module. Besides the
obvious advantage of cross\-platform support, this delegation to CMake
may be convenient in build environments exposing vendor software
stacks via intricate module systems. Note however that mpi4py will not
be able to look for MPI routines available beyond the MPI standard
version the MPI implementation advertises to support (via the
\fBMPI_VERSION\fP and \fBMPI_SUBVERSION\fP macro constants
in the \fBmpi.h\fP header file), any missing MPI constant or symbol
will prevent a successful build.
.SS Using \fBmeson\-python\fP
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Set the \fI\%MPI4PY_BUILD_BACKEND\fP environment variable to
\fB\(dqmeson\-python\(dq\fP to use the \X'tty: link https://meson-python.readthedocs.io/'\fI\%meson\-python\fP\X'tty: link' build backend.
.UNINDENT
.UNINDENT
.sp
When using the \X'tty: link https://meson-python.readthedocs.io/'\fI\%meson\-python\fP\X'tty: link' build backend, mpi4py delegates build
tasks to the \X'tty: link https://mesonbuild.com/'\fI\%Meson\fP\X'tty: link' build system.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
mpi4py support for the \X'tty: link https://meson-python.readthedocs.io/'\fI\%meson\-python\fP\X'tty: link' build backend is
experimental. For the time being, users must set the \X'tty: link https://docs.python.org/3/using/configure.html#envvar-CC'\fI\%CC\fP\X'tty: link'
environment variable to the command or path corresponding to the
\fBmpicc\fP C compiler wrapper.
.UNINDENT
.UNINDENT
.SS Using \fBpip\fP
.sp
You can install the latest mpi4py release from its source distribution
at \X'tty: link https://pypi.org/project/mpi4py/'\fI\%PyPI\fP\X'tty: link' using \fBpip\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also install the in\-development version with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install git+https://github.com/mpi4py/mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install https://github.com/mpi4py/mpi4py/tarball/master
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Installing mpi4py from its source distribution (available at PyPI)
or Git source code repository (available at GitHub) requires a C
compiler and a working MPI implementation with development headers
and libraries.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fBpip\fP keeps previously built wheel files on its cache for future
reuse. If you want to reinstall the \fBmpi4py\fP package using a
different or updated MPI implementation, you have to either first
remove the cached wheel file with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip cache remove mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or ask \fBpip\fP to disable the cache:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install \-\-no\-cache\-dir mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Using \fBconda\fP
.sp
The \X'tty: link https://conda-forge.org/'\fI\%conda\-forge\fP\X'tty: link' community provides ready\-to\-use binary packages
from an ever growing collection of software libraries built around the
multi\-platform \fIconda\fP package manager. Four MPI implementations are
available on conda\-forge: Open MPI (Linux and macOS), MPICH (Linux and
macOS), Intel MPI (Linux and Windows) and Microsoft MPI (Windows).
You can install mpi4py and your preferred MPI implementation using the
\fBconda\fP package manager:
.INDENT 0.0
.IP \(bu 2
to use MPICH do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ conda install \-c conda\-forge mpi4py mpich
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
to use Open MPI do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ conda install \-c conda\-forge mpi4py openmpi
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
to use Intel MPI do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ conda install \-c conda\-forge mpi4py impi_rt
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
to use Microsoft MPI do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ conda install \-c conda\-forge mpi4py msmpi
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
MPICH and many of its derivatives are ABI\-compatible. You can provide
the package specification \fBmpich=X.Y.*=external_*\fP (where \fBX\fP and
\fBY\fP are the major and minor version numbers) to request the conda
package manager to use system\-provided MPICH (or derivative)
libraries. Similarly, you can provide the package specification
\fBopenmpi=X.Y.*=external_*\fP to use system\-provided Open MPI
libraries.
.sp
The \fBopenmpi\fP package on conda\-forge has built\-in CUDA support, but
it is disabled by default. To enable it, follow the instruction
outlined during \fBconda install\fP\&. Additionally, UCX support is also
available once the \fBucx\fP package is installed.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Binary conda\-forge packages are built with a focus on
compatibility. The MPICH and Open MPI packages are build in a
constrained environment with relatively dated OS images. Therefore,
they may lack support for high\-performance features like
cross\-memory attach (XPMEM/CMA). In production scenarios, it is
recommended to use external (either custom\-built or system\-provided)
MPI installations. See the relevant conda\-forge documentation about
\X'tty: link https://conda-forge.org/docs/user/tipsandtricks/#using-external-message-passing-interface-mpi-libraries'\fI\%using external MPI libraries\fP\X'tty: link' .
.UNINDENT
.UNINDENT
.SS Linux
.sp
On \fBFedora Linux\fP systems (as well as \fBRHEL\fP and their derivatives
using the EPEL software repository), you can install binary packages
with the system package manager:
.INDENT 0.0
.IP \(bu 2
using \fBdnf\fP and the \fBmpich\fP package:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo dnf install python3\-mpi4py\-mpich
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
using \fBdnf\fP and the \fBopenmpi\fP package:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo dnf install python3\-mpi4py\-openmpi
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Please remember to load the correct MPI module for your chosen MPI
implementation:
.INDENT 0.0
.IP \(bu 2
for the \fBmpich\fP package do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ module load mpi/mpich\-$(arch)
$ python \-c \(dqfrom mpi4py import MPI\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
for the \fBopenmpi\fP package do:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ module load mpi/openmpi\-$(arch)
$ python \-c \(dqfrom mpi4py import MPI\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
On \fBUbuntu Linux\fP and \fBDebian Linux\fP systems, binary packages are
available for installation using the system package manager:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt install python3\-mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that on Ubuntu/Debian systems, the mpi4py package uses Open
MPI. To use MPICH, install the \fBlibmpich\-dev\fP and \fBpython3\-dev\fP
packages (and any other required development tools). Afterwards,
install mpi4py from sources using \fBpip\fP\&.
.SS macOS
.sp
\fBmacOS\fP users can install mpi4py using the \X'tty: link https://brew.sh/'\fI\%Homebrew\fP\X'tty: link' package
manager:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ brew install mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that the Homebrew mpi4py package uses Open MPI. Alternatively,
install the \fBmpich\fP package and next install mpi4py from sources
using \fBpip\fP\&.
.SS Windows
.sp
\fBWindows\fP users can install mpi4py from binary wheels hosted on the
Python Package Index (PyPI) using \fBpip\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install mpi4py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Windows wheels available on PyPI are specially crafted to work
with either the \X'tty: link https://software.intel.com/intel-mpi-library'\fI\%Intel MPI\fP\X'tty: link' or the \X'tty: link https://learn.microsoft.com/message-passing-interface/microsoft-mpi'\fI\%Microsoft MPI\fP\X'tty: link'
runtime, therefore requiring a separate installation of any one of
these packages.
.sp
Intel MPI is under active development and supports recent version of
the MPI standard. Intel MPI can be installed with \fBpip\fP (see the
\X'tty: link https://pypi.org/project/impi-rt/'\fI\%impi\-rt\fP\X'tty: link' package on PyPI), being therefore straightforward to get it
up and running within a Python environment. Intel MPI can also be
installed system\-wide as part of the Intel HPC Toolkit for Windows or
via standalone online/offline installers.
.SH DEVELOPMENT
.SS Prerequisites
.sp
You need to have the following software properly installed to develop
\fIMPI for Python\fP:
.INDENT 0.0
.IP \(bu 2
\X'tty: link https://www.python.org/'\fI\%Python\fP\X'tty: link' 3.6 or above.
.IP \(bu 2
The \X'tty: link https://cython.org/'\fI\%Cython\fP\X'tty: link' compiler.
.IP \(bu 2
A working \X'tty: link https://www.mpi-forum.org/'\fI\%MPI\fP\X'tty: link' implementation like \X'tty: link https://www.mpich.org/'\fI\%MPICH\fP\X'tty: link' or \X'tty: link https://www.open-mpi.org/'\fI\%Open MPI\fP\X'tty: link',
preferably supporting MPI\-4 and built with shared/dynamic libraries.
.UNINDENT
.sp
Optionally, consider installing the following packages:
.INDENT 0.0
.IP \(bu 2
\X'tty: link https://numpy.org/'\fI\%NumPy\fP\X'tty: link' for enabling comprehensive testing of MPI communication.
.IP \(bu 2
\X'tty: link https://cupy.dev/'\fI\%CuPy\fP\X'tty: link' for enabling comprehensive testing with a GPU\-aware MPI.
.IP \(bu 2
\X'tty: link https://www.sphinx-doc.org/'\fI\%Sphinx\fP\X'tty: link' to build the documentation.
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Most routine development tasks like building, installing in
editable mode, testing, and generating documentation can be
performed with the \X'tty: link https://github.com/scientific-python/spin'\fI\%spin\fP\X'tty: link' developer tool. Run \fBspin\fP at
the top level source directory for a list of available subcommands.
.UNINDENT
.UNINDENT
.SS Building
.sp
\fIMPI for Python\fP uses \fBsetuptools\fP\-based build system that relies on
the \fBsetup.py\fP file. Some setuptools commands (e.g., \fIbuild\fP)
accept additional options:
.INDENT 0.0
.TP
.B \-\-mpi=
Lets you pass a section with MPI configuration within a special
configuration file. Alternatively, you can use the \fI\%MPICFG\fP
environment variable.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mpicc=
Specify the path or name of the \fBmpicc\fP C compiler wrapper.
Alternatively, use the \fI\%MPICC\fP environment variable.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mpild=
Specify the full path or name for the MPI\-aware C linker.
Alternatively, use the \fI\%MPILD\fP environment variable. If
not set, the \fBmpicc\fP C compiler wrapper is used for
linking.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-configure
Runs exhaustive tests for checking about missing MPI types,
constants, and functions. This option should be passed in order to
build \fIMPI for Python\fP against old MPI\-1, MPI\-2, or MPI\-3
implementations, possibly providing a subset of MPI\-4.
.UNINDENT
.sp
If you use a MPI implementation providing a \fBmpicc\fP C
compiler wrapper (e.g., MPICH or Open MPI), it will be used for
compilation and linking. This is the preferred and easiest way to
build \fIMPI for Python\fP\&.
.sp
If \fBmpicc\fP is found in the executable search path
(\fBPATH\fP environment variable), simply run the \fIbuild\fP
command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py build
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fBmpicc\fP is not in your search path or the compiler wrapper
has a different name, you can run the \fIbuild\fP command specifying its
location, either via the \fI\%\-\-mpicc\fP command option or using the
\fI\%MPICC\fP environment variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py build \-\-mpicc=/path/to/mpicc
$ env MPICC=/path/to/mpicc python setup.py build
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, you can provide all the relevant information about your
MPI implementation by editing the \fBmpi.cfg\fP file located in the
top level source directory. You can use the default section \fB[mpi]\fP
or add a new custom section, for example \fB[vendor_mpi]\fP (see the
examples provided in the \fBmpi.cfg\fP file as a starting point to
write your own section):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[mpi]
include_dirs         = /usr/local/mpi/include
libraries            = mpi
library_dirs         = /usr/local/mpi/lib
runtime_library_dirs = /usr/local/mpi/lib

[vendor_mpi]
include_dirs         = /opt/mpi/include ...
libraries            = mpi ...
library_dirs         = /opt/mpi/lib ...
runtime_library_dirs = /opt/mpi/lib ...

\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and then run the \fIbuild\fP command specifying you custom
configuration section:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py build \-\-mpi=vendor_mpi
$ env MPICFG=vendor_mpi python setup.py build
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Installing
.sp
\fIMPI for Python\fP can be installed in editable mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install \-\-editable .
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After modifying Cython sources, an in\-place rebuild is needed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py build \-\-inplace
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Testing
.sp
To quickly test the installation:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 5 python \-m mpi4py.bench helloworld
Hello, World! I am process 0 of 5 on localhost.
Hello, World! I am process 1 of 5 on localhost.
Hello, World! I am process 2 of 5 on localhost.
Hello, World! I am process 3 of 5 on localhost.
Hello, World! I am process 4 of 5 on localhost.

$ mpiexec \-n 5 python \-m mpi4py.bench ringtest \-l 10 \-n 1048576
time for 10 loops = 0.00361614 seconds (5 processes, 1048576 bytes)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you installed from a git clone or the source distribution, issuing
at the command line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 5 python demo/helloworld.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will launch a five\-process run of the Python interpreter and run the
demo script \fBdemo/helloworld.py\fP from the source distribution.
.sp
You can also run all the \fIunittest\fP scripts:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 5 python test/main.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or, if you have the \X'tty: link https://docs.pytest.org/'\fI\%pytest\fP\X'tty: link' unit testing framework installed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mpiexec \-n 5 pytest
.ft P
.fi
.UNINDENT
.UNINDENT
.SH GUIDELINES
.SS Fair play
.SS Summary
.sp
This section defines Rules of Play for companies and outside developers that
engage with the mpi4py project. It covers:
.INDENT 0.0
.IP \(bu 2
Restrictions on use of the mpi4py name.
.IP \(bu 2
How and whether to publish a modified distribution.
.IP \(bu 2
How to make us aware of patched versions.
.UNINDENT
.sp
After reading this section, companies and developers will know what kinds of
behavior the mpi4py developers and contributors would like to see, and which we
consider troublesome, bothersome, and unacceptable.
.sp
This document is a close adaptation of \X'tty: link https://numpy.org/neps/nep-0036-fair-play.html'\fI\%NumPy NEP 36\fP\X'tty: link'\&.
.SS Motivation
.sp
Occasionally, we learn of modified mpi4py versions and binary distributions
circulated by outsiders. These patched versions can cause problems to mpi4py
users (see, e.g., \X'tty: link https://github.com/mpi4py/mpi4py/issues/508'\fI\%mpi4py/mpi4py#508\fP\X'tty: link'). When issues like these arise, our
developers waste time identifying the problematic release, locating
alterations, and determining an appropriate course of action.
.sp
In addition, packages on the Python Packaging Index are sometimes named such
that users assume they are sanctioned or maintained by the mpi4py
developers. We wish to reduce the number of such incidents.
.SS Scope
.sp
This document aims to define a minimal set of rules that, when followed, will
be considered good\-faith efforts in line with the expectations of the mpi4py
developers and contributors.
.sp
Our hope is that companies and outside developers who feel they need to modify
mpi4py will first consider contributing to the project, or use alternative
mechanisms for patching and extending mpi4py.
.sp
When in doubt, please \X'tty: link https://github.com/mpi4py/mpi4py/discussions/'\fI\%talk to us first\fP\X'tty: link'\&. We may suggest an alternative; at
minimum, we\(aqll be informed and we may even grant an exception if deemed
appropriate.
.SS Fair play rules
.INDENT 0.0
.IP 1. 3
Do not reuse the mpi4py name for projects not affiliated with the mpi4py
project.
.sp
At time of writing, there are only a handful of \fBmpi4py\fP\-named packages
developed by the mpi4py project, including \fBmpi4py\fP and \fBmpi4py\-fft\fP\&. We
ask that outside packages not include the phrase \fBmpi4py\fP, i.e., avoid
names such as \fBmycompany\-mpi4py\fP or \fBmpi4py\-mycompany\fP\&.
.sp
To be clear, this rule only applies to modules (package names); it is
perfectly acceptable to have a \fIsubmodule\fP of your own package named
\fBmycompany.mpi4py\fP\&.
.IP 2. 3
Do not publish binary mpi4py wheels on PyPI (\X'tty: link https://pypi.org/'\fI\%https://pypi.org/\fP\X'tty: link').
.sp
We ask companies and outside developers to not publish binary mpi4py wheels
in the main Python Package Index (\X'tty: link https://pypi.org/'\fI\%https://pypi.org/\fP\X'tty: link') under names such
\fBmpi4py\-mpich\fP, \fBmpi4py\-openmpi\fP, or \fBmpi4py\-vendor_mpi\fP\&.
.sp
The usual approaches to build binary Python wheels involve the embedding of
dependent shared libraries. While such an approach may seem convenient and
often is, in the particular case of MPI and mpi4py it is ultimately harmful
to end users. Embedding the MPI shared libraries would prevent the use of
external, system\-provided MPI installations with hardware\-specific
optimizations and site\-specific tweaks.
.sp
The MPI Forum is currently discussing the standardization of a proposal for
an Application Binary Interface (ABI) for MPI, see \fI\%[mpi\-abi\-paper]\fP and
\fI\%[mpi\-abi\-issue]\fP\&. Such standardization will allow for any binary dependent
on the MPI library to be used with multiple MPI backends. Once this proposal
becomes part of the MPI standard, the mpi4py project will consider
publishing on PyPI binary wheels capable of using any backend MPI
implementation supporting the new MPI ABI specification. In the mean time,
mpi4py is currently distributing experimental MPI and mpi4py binary wheels
on \X'tty: link https://anaconda.org/mpi4py'\fI\%https://anaconda.org/mpi4py\fP\X'tty: link'\&.
.IP [mpi-abi-paper] 5
J. Hammond, L. Dalcin, E. Schnetter, M. Pérache, J. B. Besnard,
J. Brown, G. Brito Gadeschi, S. Byrne, J. Schuchart, and H. Zhou.
MPI Application Binary Interface Standardization.
EuroMPI 2023, Bristol, UK, September 2023.
\X'tty: link https://doi.org/10.1145/3615318.3615319'\fI\%https://doi.org/10.1145/3615318.3615319\fP\X'tty: link'
.IP [mpi-abi-issue] 5
MPI Forum GitHub Issue: \fIMPI needs a standard ABI\fP\&.
\X'tty: link https://github.com/mpi-forum/mpi-issues/issues/751'\fI\%https://github.com/mpi\-forum/mpi\-issues/issues/751\fP\X'tty: link'
.IP 3. 3
Do not republish modified versions of mpi4py.
.sp
Modified versions of mpi4py make it very difficult for the developers to
address bug reports, since we typically do not know which parts of mpi4py
have been modified.
.sp
If you have to break this rule (and we implore you not to!), then make it
clear in the \fB__version__\fP tag that you have modified mpi4py, e.g.:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
>>> print(mpi4py.__version__)
\(aq4.0.0+mycompany.13\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We understand that minor patches are often required to make a library work
inside of a package ecosystem. This is totally acceptable, but we ask that
no substantive changes are made.
.IP 4. 3
Do not extend or modify mpi4py\(aqs API.
.sp
If you absolutely have to break the previous rule, please do not add
additional functions to the namespace, or modify the API of existing
functions. Having additional functions exposed in distributed versions is
confusing for users and developers alike.
.UNINDENT
.SH LICENSE
.sp
Copyright (c) 2024, Lisandro Dalcin
.sp
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
.INDENT 0.0
.IP 1. 3
Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
.IP 2. 3
Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.
.IP 3. 3
Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
.UNINDENT
.sp
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \(dqAS IS\(dq
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH CHANGES
.SS Release 4.0.0 [2024\-07\-28]
.INDENT 0.0
.IP \(bu 2
New features:
.INDENT 2.0
.IP \(bu 2
Add support for the MPI\-4.0 standard.
.INDENT 2.0
.IP \(bu 2
Use large count MPI\-4 routines.
.IP \(bu 2
Add persistent collective communication.
.IP \(bu 2
Add partitioned point\-to\-point communication.
.IP \(bu 2
Add new communicator constructors.
.IP \(bu 2
Add the \fBSession\fP class and its methods.
.UNINDENT
.IP \(bu 2
Add support for the MPI\-4.1 standard.
.INDENT 2.0
.IP \(bu 2
Add non\-destructive completion test for multiple requests.
.IP \(bu 2
Add value\-index datatype constructor.
.IP \(bu 2
Add communicator/session buffer attach/detach/flush.
.IP \(bu 2
Support for removal of error classes/codes/strings.
.IP \(bu 2
Support for querying hardware resource information.
.UNINDENT
.IP \(bu 2
Add preliminary support for the upcoming MPI\-5.0 standard.
.INDENT 2.0
.IP \(bu 2
User\-level failure mitigation (ULFM).
.UNINDENT
.IP \(bu 2
\fBmpi4py.util.pool\fP: New drop\-in replacement for \fBmultiprocessing.pool\fP\&.
.IP \(bu 2
\fBmpi4py.util.sync\fP: New synchronization utilities.
.IP \(bu 2
Add runtime check for mismatch between \fBmpiexec\fP and MPI library.
.IP \(bu 2
Support \X'tty: link https://scikit-build.readthedocs.io/'\fI\%scikit\-build\-core\fP\X'tty: link' as an alternative build backend.
.UNINDENT
.INDENT 2.0
.IP \(bu 2
Support \X'tty: link https://meson-python.readthedocs.io/'\fI\%meson\-python\fP\X'tty: link' as an alternative build backend.
.UNINDENT
.IP \(bu 2
Enhancements:
.INDENT 2.0
.IP \(bu 2
\fBmpi4py.futures\fP: Support for parallel tasks.
.IP \(bu 2
\fBmpi4py.futures\fP: Report exception tracebacks in workers.
.IP \(bu 2
\fBmpi4py.util.pkl5\fP: Add support for collective communication.
.IP \(bu 2
Add methods \fBDatatype.fromcode()\fP, \fBDatatype.tocode()\fP and
attributes \fBDatatype.typestr\fP, \fBDatatype.typechar\fP to simplify
NumPy interoperability for simple cases.
.IP \(bu 2
Add methods \fBComm.Create_errhandler()\fP, \fBWin.Create_errhandler()\fP,
and \fBFile.Create_errhandler()\fP to create custom error handlers.
.IP \(bu 2
Add support for pickle serialization of instances of MPI types.
All instances of \fBDatatype\fP, \fBInfo\fP, and \fBStatus\fP can be
serialized. Instances of \fBOp\fP can be serialized only if created
through \fBmpi4py\fP by calling \fBOp.Create()\fP\&. Instances of other MPI
types can be serialized only if they reference predefined handles.
.IP \(bu 2
Add \fBhandle\fP attribute and \fBfromhandle()\fP class method to MPI
classes to ease interoperability with external code. The handle
value is a unsigned integer guaranteed to fit on the platform\(aqs
\fBuintptr_t\fP C type.
.IP \(bu 2
Add lowercase \fBfree()\fP method to MPI classes to ease MPI object
deallocation and cleanup. This method eventually attempts to call
\fBFree()\fP, but only if the object\(aqs MPI handle is not a null or
predefined handle, and such call is allowed within the World Model
init/finalize.
.UNINDENT
.IP \(bu 2
Backward\-incompatible changes:
.INDENT 2.0
.IP \(bu 2
Python 2 is no longer supported, Python 3.6+ is required, but
typing stubs are supported for Python 3.8+.
.IP \(bu 2
The \fBIntracomm.Create_group()\fP method is no longer defined in the
base \fBComm\fP class.
.IP \(bu 2
\fBGroup.Compare()\fP and \fBComm.Compare()\fP are no longer class methods
but instance methods. Existing codes using the former class
methods are expected to continue working.
.IP \(bu 2
\fBGroup.Translate_ranks()\fP is no longer a class method but an
instance method. Existing codes using the former class method are
expected to continue working.
.IP \(bu 2
The \fBLB\fP and \fBUB\fP datatypes are no longer available, use
\fBDatatype.Create_resized()\fP instead.
.IP \(bu 2
The \fBHOST\fP predefined attribute key is no longer available.
.IP \(bu 2
The \fBMPI.memory\fP class has been renamed to \fBMPI.buffer\fP\&. The old
name is still available as an alias to the new name.
.IP \(bu 2
The \fBmpi4py.dl\fP module is no longer available.
.IP \(bu 2
The \fBmpi4py.get_config\fP function returns an empty dictionary.
.UNINDENT
.IP \(bu 2
Miscellaneous:
.INDENT 2.0
.IP \(bu 2
The project is now licenced under the BSD\-3\-Clause license. This
change is fairly inconsequential for users and distributors. It
simply adds an additional clause against using contributor names
for promotional purposes without their consent.
.IP \(bu 2
Add a new guidelines section to documentation laying out new fair
play rules. These rules ask companies and outside developers to
refrain from reusing the \fBmpi4py\fP name in unaffiliated projects,
publishing binary mpi4py wheels on the main Python Package Index
(PyPI), and distributing modified versions with incompatible or
extended API changes. The primary motivation of these rules is to
avoid fragmentation and end\-user confusion.
.UNINDENT
.UNINDENT
.SS Release 3.1.6 [2024\-04\-14]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Fix various build issues.
.UNINDENT
.SS Release 3.1.5 [2023\-10\-04]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Rebuild C sources with Cython 0.29.36 to support Python 3.12.
.UNINDENT
.SS Release 3.1.4 [2022\-11\-02]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Rebuild C sources with Cython 0.29.32 to support Python 3.11.
.IP \(bu 2
Fix contiguity check for DLPack and CAI buffers.
.IP \(bu 2
Workaround build failures with setuptools v60.
.UNINDENT
.SS Release 3.1.3 [2021\-11\-25]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Add missing support for \fBMPI.BOTTOM\fP to generalized all\-to\-all collectives.
.UNINDENT
.SS Release 3.1.2 [2021\-11\-04]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBmpi4py.futures\fP: Add \fB_max_workers\fP property to \fBMPIPoolExecutor\fP\&.
.IP \(bu 2
\fBmpi4py.util.dtlib\fP: Fix computation of alignment for predefined datatypes.
.IP \(bu 2
\fBmpi4py.util.pkl5\fP: Fix deadlock when using \fBssend()\fP + \fBmprobe()\fP\&.
.IP \(bu 2
\fBmpi4py.util.pkl5\fP: Add environment variable \fBMPI4PY_PICKLE_THRESHOLD\fP\&.
.IP \(bu 2
\fBmpi4py.rc\fP: Interpret \fB\(dqy\(dq\fP and \fB\(dqn\(dq\fP strings as boolean values.
.IP \(bu 2
Fix/add typemap/typestr for \fBMPI.WCHAR\fP/\fBMPI.COUNT\fP datatypes.
.IP \(bu 2
Minor fixes and additions to documentation.
.IP \(bu 2
Minor fixes to typing support.
.IP \(bu 2
Support for local version identifier (PEP\-440).
.UNINDENT
.SS Release 3.1.1 [2021\-08\-14]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Fix typo in Requires\-Python package metadata.
.IP \(bu 2
Regenerate C sources with Cython 0.29.24.
.UNINDENT
.SS Release 3.1.0 [2021\-08\-12]
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is the last release supporting Python 2.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
New features:
.INDENT 2.0
.IP \(bu 2
\fBmpi4py.util\fP: New package collecting miscellaneous utilities.
.UNINDENT
.IP \(bu 2
Enhancements:
.INDENT 2.0
.IP \(bu 2
Add pickle\-based \fBRequest.waitsome()\fP and \fBRequest.testsome()\fP\&.
.IP \(bu 2
Add lowercase methods \fBRequest.get_status()\fP and \fBRequest.cancel()\fP\&.
.IP \(bu 2
Support for passing Python GPU arrays compliant with the \X'tty: link https://github.com/dmlc/dlpack'\fI\%DLPack\fP\X'tty: link' data
interchange mechanism (\X'tty: link https://data-apis.org/array-api/latest/design_topics/data_interchange.html'\fI\%link\fP\X'tty: link') and the \fB__cuda_array_interface__\fP
(CAI) standard (\X'tty: link https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html'\fI\%link\fP\X'tty: link') to uppercase methods. This support requires
that mpi4py is built against \X'tty: link https://developer.nvidia.com/blog/introduction-cuda-aware-mpi/'\fI\%CUDA\-aware MPI\fP\X'tty: link' implementations. This
feature is currently experimental and subject to future changes.
.IP \(bu 2
\fBmpi4py.futures\fP: Add support for initializers and canceling futures at shutdown.
Environment variables names now follow the pattern \fBMPI4PY_FUTURES_*\fP, the
previous \fBMPI4PY_*\fP names are deprecated.
.IP \(bu 2
Add type annotations to Cython code. The first line of the docstring of functions
and methods displays a signature including type annotations.
.IP \(bu 2
Add companion stub files to support type checkers.
.IP \(bu 2
Support for weak references.
.UNINDENT
.IP \(bu 2
Miscellaneous:
.INDENT 2.0
.IP \(bu 2
Add a new mpi4py publication (\X'tty: link https://doi.org/10.1109/MCSE.2021.3083216'\fI\%link\fP\X'tty: link') to the citation listing.
.UNINDENT
.UNINDENT
.SS Release 3.0.3 [2019\-11\-04]
.INDENT 0.0
.IP \(bu 2
Regenerate Cython wrappers to support Python 3.8.
.UNINDENT
.SS Release 3.0.2 [2019\-06\-11]
.INDENT 0.0
.IP \(bu 2
Bug fixes:
.INDENT 2.0
.IP \(bu 2
Fix handling of readonly buffers in support for Python 2 legacy
buffer interface. The issue triggers only when using a buffer\-like
object that is readonly and does not export the new Python 3
buffer interface.
.IP \(bu 2
Fix build issues with Open MPI 4.0.x series related to removal of
many MPI\-1 symbols deprecated in MPI\-2 and removed in MPI\-3.
.IP \(bu 2
Minor documentation fixes.
.UNINDENT
.UNINDENT
.SS Release 3.0.1 [2019\-02\-15]
.INDENT 0.0
.IP \(bu 2
Bug fixes:
.INDENT 2.0
.IP \(bu 2
Fix \fBComm.scatter()\fP and other collectives corrupting input send
list. Add safety measures to prevent related issues in global
reduction operations.
.IP \(bu 2
Fix error\-checking code for counts in \fBOp.Reduce_local()\fP\&.
.UNINDENT
.IP \(bu 2
Enhancements:
.INDENT 2.0
.IP \(bu 2
Map size\-specific Python/NumPy typecodes to MPI datatypes.
.IP \(bu 2
Allow partial specification of target list/tuple arguments in the
various \fBWin\fP RMA methods.
.IP \(bu 2
Workaround for removal of \fBMPI_{LB|UB}\fP in Open MPI 4.0.
.IP \(bu 2
Support for Microsoft MPI v10.0.
.UNINDENT
.UNINDENT
.SS Release 3.0.0 [2017\-11\-08]
.INDENT 0.0
.IP \(bu 2
New features:
.INDENT 2.0
.IP \(bu 2
\fBmpi4py.futures\fP: Execute computations asynchronously using a pool
of MPI processes. This package is based on \fBconcurrent.futures\fP
from the Python standard library.
.IP \(bu 2
\fBmpi4py.run\fP: Run Python code and abort execution in case of
unhandled exceptions to prevent deadlocks.
.IP \(bu 2
\fBmpi4py.bench\fP: Run basic MPI benchmarks and tests.
.UNINDENT
.IP \(bu 2
Enhancements:
.INDENT 2.0
.IP \(bu 2
Lowercase, pickle\-based collective communication calls are now
thread\-safe through the use of fine\-grained locking.
.IP \(bu 2
The \fBMPI\fP module now exposes a \fBmemory\fP type which is a
lightweight variant of the builtin \fBmemoryview\fP type, but
exposes both the legacy Python 2 and the modern Python 3 buffer
interface under a Python 2 runtime.
.IP \(bu 2
The \fBMPI.Comm.Alltoallw()\fP method now uses \fBcount=1\fP and
\fBdispl=0\fP as defaults, assuming that messages are specified
through user\-defined datatypes.
.IP \(bu 2
The \fBRequest.Wait[all]()\fP methods now return \fBTrue\fP to match
the interface of \fBRequest.Test[all]()\fP\&.
.IP \(bu 2
The \fBWin\fP class now implements the Python buffer interface.
.UNINDENT
.IP \(bu 2
Backward\-incompatible changes:
.INDENT 2.0
.IP \(bu 2
The \fBbuf\fP argument of the \fBMPI.Comm.recv()\fP method is
deprecated, passing anything but \fBNone\fP emits a warning.
.IP \(bu 2
The \fBMPI.Win.memory\fP property was removed, use the
\fBMPI.Win.tomemory()\fP method instead.
.IP \(bu 2
Executing \fBpython \-m mpi4py\fP in the command line is now
equivalent to \fBpython \-m mpi4py.run\fP\&. For the former behavior,
use \fBpython \-m mpi4py.bench\fP\&.
.IP \(bu 2
Python 2.6 and 3.2 are no longer supported. The \fBmpi4py.MPI\fP
module may still build and partially work, but other pure\-Python
modules under the \fBmpi4py\fP namespace will not.
.IP \(bu 2
Windows: Remove support for legacy MPICH2, Open MPI, and DeinoMPI.
.UNINDENT
.UNINDENT
.SS Release 2.0.0 [2015\-10\-18]
.INDENT 0.0
.IP \(bu 2
Support for MPI\-3 features.
.INDENT 2.0
.IP \(bu 2
Matched probes and receives.
.IP \(bu 2
Nonblocking collectives.
.IP \(bu 2
Neighborhood collectives.
.IP \(bu 2
New communicator constructors.
.IP \(bu 2
Request\-based RMA operations.
.IP \(bu 2
New RMA communication and synchronisation calls.
.IP \(bu 2
New window constructors.
.IP \(bu 2
New datatype constructor.
.IP \(bu 2
New C++ boolean and floating complex datatypes.
.UNINDENT
.IP \(bu 2
Support for MPI\-2 features not included in previous releases.
.INDENT 2.0
.IP \(bu 2
Generalized All\-to\-All collective (\fBComm.Alltoallw()\fP)
.IP \(bu 2
User\-defined data representations (\fBRegister_datarep()\fP)
.UNINDENT
.IP \(bu 2
New scalable implementation of reduction operations for Python
objects. This code is based on binomial tree algorithms using
point\-to\-point communication and duplicated communicator
contexts. To disable this feature, use
\fBmpi4py.rc.fast_reduce = False\fP\&.
.IP \(bu 2
Backward\-incompatible changes:
.INDENT 2.0
.IP \(bu 2
Python 2.4, 2.5, 3.0 and 3.1 are no longer supported.
.IP \(bu 2
Default MPI error handling policies are overridden. After import,
mpi4py sets the \fBERRORS_RETURN\fP error handler in \fBCOMM_SELF\fP
and \fBCOMM_WORLD\fP, as well as any new \fBComm\fP, \fBWin\fP, or
\fBFile\fP instance created through mpi4py, thus effectively
ignoring the MPI rules about error handler inheritance.  This way,
MPI errors translate to Python exceptions.  To disable this
behavior and use the standard MPI error handling rules, use
\fBmpi4py.rc.errors = \(aqdefault\(aq\fP\&.
.IP \(bu 2
Change signature of all send methods,
\fBdest\fP is a required argument.
.IP \(bu 2
Change signature of all receive and probe methods,
\fBsource\fP defaults to \fBANY_SOURCE\fP,
\fBtag\fP defaults to \fBANY_TAG\fP\&.
.IP \(bu 2
Change signature of send lowercase\-spelling methods,
\fBobj\fP arguments are not mandatory.
.IP \(bu 2
Change signature of recv lowercase\-spelling methods,
renamed \(aqobj\(aq arguments to \(aqbuf\(aq.
.IP \(bu 2
Change \fBRequest.Waitsome()\fP and \fBRequest.Testsome()\fP
to return \fBNone\fP or \fBlist\fP\&.
.IP \(bu 2
Change signature of all lowercase\-spelling collectives,
\fBsendobj\fP arguments are now mandatory,
\fBrecvobj\fP arguments were removed.
.IP \(bu 2
Reduction operations \fBMAXLOC\fP and \fBMINLOC\fP are no longer
special\-cased in lowercase\-spelling methods \fBComm.[all]reduce()\fP
and \fBComm.[ex]scan()\fP, the input object must be specified as a
tuple \fB(obj, location)\fP\&.
.IP \(bu 2
Change signature of name publishing functions.
The new signatures are
\fBPublish_name(service_name, port_name, info=INFO_NULL)\fP and
\fBUnpublish_name(service_name, port_name, info=INFO_NULL)\(ga\fP\&.
.IP \(bu 2
\fBWin\fP instances now cache Python objects exposing memory by
keeping references instead of using MPI attribute caching.
.IP \(bu 2
Change signature of \fBWin.Lock()\fP\&.
The new signature is
\fBWin.Lock(rank, lock_type=LOCK_EXCLUSIVE, assertion=0)\fP\&.
.IP \(bu 2
Move \fBCartcomm.Map()\fP to \fBIntracomm.Cart_map()\fP\&.
.IP \(bu 2
Move \fBGraphcomm.Map()\fP to \fBIntracomm.Graph_map()\fP\&.
.IP \(bu 2
Remove the \fBmpi4py.MPE\fP module.
.IP \(bu 2
Rename the Cython definition file for use with \fBcimport\fP
statement from \fBmpi_c.pxd\fP to \fBlibmpi.pxd\fP\&.
.UNINDENT
.UNINDENT
.SS Release 1.3.1 [2013\-08\-07]
.INDENT 0.0
.IP \(bu 2
Regenerate C wrappers with Cython 0.19.1 to support Python 3.3.
.IP \(bu 2
Install \fB*.pxd\fP files in \fB<site\-packages>/mpi4py\fP to ease the
support for Cython\(aqs \fBcimport\fP statement in code requiring to
access mpi4py internals.
.IP \(bu 2
As a side\-effect of using Cython 0.19.1, ancient Python 2.3 is no
longer supported. If you really need it, you can install an older
Cython and run \fBpython setup.py build_src \-\-force\fP\&.
.UNINDENT
.SS Release 1.3 [2012\-01\-20]
.INDENT 0.0
.IP \(bu 2
Now \fBComm.recv()\fP accept a buffer to receive the message.
.IP \(bu 2
Add \fBComm.irecv()\fP and \fBRequest.{wait|test}[any|all]()\fP\&.
.IP \(bu 2
Add \fBIntracomm.Spawn_multiple()\fP\&.
.IP \(bu 2
Better buffer handling for PEP 3118 and legacy buffer interfaces.
.IP \(bu 2
Add support for attribute attribute caching on communicators,
datatypes and windows.
.IP \(bu 2
Install MPI\-enabled Python interpreter as
\fB<path>/mpi4py/bin/python\-mpi\fP\&.
.IP \(bu 2
Windows: Support for building with Open MPI.
.UNINDENT
.SS Release 1.2.2 [2010\-09\-13]
.INDENT 0.0
.IP \(bu 2
Add \fBmpi4py.get_config()\fP to retrieve information (compiler
wrappers, includes, libraries, etc) about the MPI implementation
employed to build mpi4py.
.IP \(bu 2
Workaround Python libraries with missing GILState\-related API calls
in case of non\-threaded Python builds.
.IP \(bu 2
Windows: look for MPICH2, DeinoMPI, Microsoft HPC Pack at their
default install locations under %ProgramFiles.
.IP \(bu 2
MPE: fix hacks related to old API\(aqs, these hacks are broken when MPE
is built with a MPI implementations other than MPICH2.
.IP \(bu 2
HP\-MPI: fix for missing Fortran datatypes, use dlopen() to load the
MPI shared library before MPI_Init()
.IP \(bu 2
Many distutils\-related fixes, cleanup, and enhancements, better
logics to find MPI compiler wrappers.
.IP \(bu 2
Support for \fBpip install mpi4py\fP\&.
.UNINDENT
.SS Release 1.2.1 [2010\-02\-26]
.INDENT 0.0
.IP \(bu 2
Fix declaration in Cython include file. This declaration, while
valid for Cython, broke the simple\-minded parsing used in
conf/mpidistutils.py to implement configure\-tests for availability
of MPI symbols.
.IP \(bu 2
Update SWIG support and make it compatible with Python 3. Also
generate an warning for SWIG < 1.3.28.
.IP \(bu 2
Fix distutils\-related issues in Mac OS X. Now ARCHFLAGS environment
variable is honored of all Python\(aqs \fBconfig/Makefile\fP variables.
.IP \(bu 2
Fix issues with Open MPI < 1.4.2 related to error checking and
\fBMPI_XXX_NULL\fP handles.
.UNINDENT
.SS Release 1.2 [2009\-12\-29]
.INDENT 0.0
.IP \(bu 2
Automatic MPI datatype discovery for NumPy arrays and PEP\-3118
buffers. Now buffer\-like objects can be messaged directly, it is no
longer required to explicitly pass a 2/3\-list/tuple like \fB[data,
MPI.DOUBLE]\fP, or \fB[data, count, MPI.DOUBLE]\fP\&. Only basic types
are supported, i.e., all C/C99\-native signed/unsigned integral types
and single/double precision real/complex floating types. Many thanks
to Eilif Muller for the initial feedback.
.IP \(bu 2
Nonblocking send of pickled Python objects. Many thanks to Andreas
Kloeckner for the initial patch and enlightening discussion about
this enhancement.
.IP \(bu 2
\fBRequest\fP instances now hold a reference to the Python object
exposing the buffer involved in point\-to\-point communication or
parallel I/O. Many thanks to Andreas Kloeckner for the initial
feedback.
.IP \(bu 2
Support for logging of user\-defined states and events using \X'tty: link https://www.mcs.anl.gov/research/projects/perfvis/'\fI\%MPE\fP\X'tty: link'\&. Runtime
(i.e., without requiring a recompile!)  activation of logging of all
MPI calls is supported in POSIX platforms implementing \fBdlopen()\fP\&.
.IP \(bu 2
Support for all the new features in MPI\-2.2 (new C99 and F90
datatypes, distributed graph topology, local reduction operation,
and other minor enhancements).
.IP \(bu 2
Fix the annoying issues related to Open MPI and Python dynamic
loading of extension modules in platforms supporting \fBdlopen()\fP\&.
.IP \(bu 2
Fix SLURM dynamic loading issues on SiCortex. Many thanks to Ian
Langmore for providing me shell access.
.UNINDENT
.SS Release 1.1.0 [2009\-06\-06]
.INDENT 0.0
.IP \(bu 2
Fix bug in \fBComm.Iprobe()\fP that caused segfaults as Python C\-API
calls were issued with the GIL released (issue #2).
.IP \(bu 2
Add \fBComm.bsend()\fP and \fBComm.ssend()\fP for buffered and
synchronous send semantics when communicating general Python
objects.
.IP \(bu 2
Now the call \fBInfo.Get(key)\fP return a \fIsingle\fP value (i.e, instead
of a 2\-tuple); this value is \fBNone\fP if \fBkey\fP is not in the
\fBInfo\fP object, or a string otherwise. Previously, the call
redundantly returned \fB(None, False)\fP for missing key\-value pairs;
\fBNone\fP is enough to signal a missing entry.
.IP \(bu 2
Add support for parametrized Fortran datatypes.
.IP \(bu 2
Add support for decoding user\-defined datatypes.
.IP \(bu 2
Add support for user\-defined reduction operations on memory
buffers. However, at most 16 user\-defined reduction operations
can be created. Ask the author for more room if you need it.
.UNINDENT
.SS Release 1.0.0 [2009\-03\-20]
.sp
This is the fist release of the all\-new, Cython\-based, implementation
of \fIMPI for Python\fP\&. Unfortunately, this implementation is not
backward\-compatible with the previous one. The list below summarizes
the more important changes that can impact user codes.
.INDENT 0.0
.IP \(bu 2
Some communication calls had \fIoverloaded\fP functionality. Now there
is a clear distinction between communication of general Python
object with \fIpickle\fP, and (fast, near C\-speed) communication of
buffer\-like objects (e.g., NumPy arrays).
.INDENT 2.0
.IP \(bu 2
for communicating general Python objects, you have to use
all\-lowercase methods, like \fBsend()\fP, \fBrecv()\fP, \fBbcast()\fP,
etc.
.IP \(bu 2
for communicating array data, you have to use \fBSend()\fP,
\fBRecv()\fP, \fBBcast()\fP, etc. methods. Buffer arguments to these
calls must be explicitly specified by using a 2/3\-list/tuple like
\fB[data, MPI.DOUBLE]\fP, or \fB[data, count, MPI.DOUBLE]\fP (the
former one uses the byte\-size of \fBdata\fP and the extent of the
MPI datatype to define the \fBcount\fP).
.UNINDENT
.IP \(bu 2
Indexing a communicator with an integer returned a special object
associating the communication with a target rank, alleviating you
from specifying source/destination/root arguments in point\-to\-point
and collective communications. This functionality is no longer
available, expressions like:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
MPI.COMM_WORLD[0].Send(...)
MPI.COMM_WORLD[0].Recv(...)
MPI.COMM_WORLD[0].Bcast(...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
have to be replaced by:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
MPI.COMM_WORLD.Send(..., dest=0)
MPI.COMM_WORLD.Recv(..., source=0)
MPI.COMM_WORLD.Bcast(..., root=0)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Automatic MPI initialization (i.e., at import time) requests the
maximum level of MPI thread support (i.e., it is done by calling
\fBMPI_Init_thread()\fP and passing \fBMPI_THREAD_MULTIPLE\fP). In case
you need to change this behavior, you can tweak the contents of the
\fBmpi4py.rc\fP module.
.IP \(bu 2
In order to obtain the values of predefined attributes attached to
the world communicator, now you have to use the \fBGet_attr()\fP
method on the \fBMPI.COMM_WORLD\fP instance:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
tag_ub = MPI.COMM_WORLD.Get_attr(MPI.TAG_UB)
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
In the previous implementation, \fBMPI.COMM_WORLD\fP and
\fBMPI.COMM_SELF\fP were associated to \fBduplicates\fP of the (C\-level)
\fBMPI_COMM_WORLD\fP and \fBMPI_COMM_SELF\fP predefined communicator
handles. Now this is no longer the case, \fBMPI.COMM_WORLD\fP and
\fBMPI.COMM_SELF\fP proxies the \fBactual\fP \fBMPI_COMM_WORLD\fP and
\fBMPI_COMM_SELF\fP handles.
.IP \(bu 2
Convenience aliases \fBMPI.WORLD\fP and \fBMPI.SELF\fP were removed. Use
instead \fBMPI.COMM_WORLD\fP and \fBMPI.COMM_SELF\fP\&.
.IP \(bu 2
Convenience constants \fBMPI.WORLD_SIZE\fP and \fBMPI.WORLD_RANK\fP were
removed. Use instead \fBMPI.COMM_WORLD.Get_size()\fP and
\fBMPI.COMM_WORLD.Get_rank()\fP\&.
.UNINDENT
.SH AUTHOR
Lisandro Dalcin
.SH COPYRIGHT
2024, Lisandro Dalcin
.\" Generated by docutils manpage writer.
.
